
iot_testbench.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00002e46  00002efa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e46  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000706  00800172  00800172  00002f6c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00002f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00002f6f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002fcc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005e0  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005f4a  00000000  00000000  000035ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019e0  00000000  00000000  00009536  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003615  00000000  00000000  0000af16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000edc  00000000  00000000  0000e52c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ed4  00000000  00000000  0000f408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004268  00000000  00000000  000112dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000510  00000000  00000000  00015544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_11>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e6 e4       	ldi	r30, 0x46	; 70
     17e:	fe e2       	ldi	r31, 0x2E	; 46
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a2 37       	cpi	r26, 0x72	; 114
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	28 e0       	ldi	r18, 0x08	; 8
     18e:	a2 e7       	ldi	r26, 0x72	; 114
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a8 37       	cpi	r26, 0x78	; 120
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <main>
     1a0:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     1a8:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1aa:	03 96       	adiw	r24, 0x03	; 3
     1ac:	92 83       	std	Z+2, r25	; 0x02
     1ae:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     1b0:	2f ef       	ldi	r18, 0xFF	; 255
     1b2:	3f ef       	ldi	r19, 0xFF	; 255
     1b4:	34 83       	std	Z+4, r19	; 0x04
     1b6:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1b8:	96 83       	std	Z+6, r25	; 0x06
     1ba:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1bc:	90 87       	std	Z+8, r25	; 0x08
     1be:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     1c0:	10 82       	st	Z, r1
     1c2:	08 95       	ret

000001c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     1c4:	fc 01       	movw	r30, r24
     1c6:	11 86       	std	Z+9, r1	; 0x09
     1c8:	10 86       	std	Z+8, r1	; 0x08
     1ca:	08 95       	ret

000001cc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	9c 01       	movw	r18, r24
     1d2:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     1d4:	dc 01       	movw	r26, r24
     1d6:	11 96       	adiw	r26, 0x01	; 1
     1d8:	cd 91       	ld	r28, X+
     1da:	dc 91       	ld	r29, X
     1dc:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     1de:	d3 83       	std	Z+3, r29	; 0x03
     1e0:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     1e2:	8c 81       	ldd	r24, Y+4	; 0x04
     1e4:	9d 81       	ldd	r25, Y+5	; 0x05
     1e6:	95 83       	std	Z+5, r25	; 0x05
     1e8:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     1ea:	8c 81       	ldd	r24, Y+4	; 0x04
     1ec:	9d 81       	ldd	r25, Y+5	; 0x05
     1ee:	dc 01       	movw	r26, r24
     1f0:	13 96       	adiw	r26, 0x03	; 3
     1f2:	7c 93       	st	X, r23
     1f4:	6e 93       	st	-X, r22
     1f6:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     1f8:	7d 83       	std	Y+5, r23	; 0x05
     1fa:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1fc:	31 87       	std	Z+9, r19	; 0x09
     1fe:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     200:	f9 01       	movw	r30, r18
     202:	80 81       	ld	r24, Z
     204:	8f 5f       	subi	r24, 0xFF	; 255
     206:	80 83       	st	Z, r24
}
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     214:	48 81       	ld	r20, Y
     216:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     218:	4f 3f       	cpi	r20, 0xFF	; 255
     21a:	2f ef       	ldi	r18, 0xFF	; 255
     21c:	52 07       	cpc	r21, r18
     21e:	21 f4       	brne	.+8      	; 0x228 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     220:	fc 01       	movw	r30, r24
     222:	a7 81       	ldd	r26, Z+7	; 0x07
     224:	b0 85       	ldd	r27, Z+8	; 0x08
     226:	0d c0       	rjmp	.+26     	; 0x242 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     228:	dc 01       	movw	r26, r24
     22a:	13 96       	adiw	r26, 0x03	; 3
     22c:	01 c0       	rjmp	.+2      	; 0x230 <vListInsert+0x22>
     22e:	df 01       	movw	r26, r30
     230:	12 96       	adiw	r26, 0x02	; 2
     232:	ed 91       	ld	r30, X+
     234:	fc 91       	ld	r31, X
     236:	13 97       	sbiw	r26, 0x03	; 3
     238:	20 81       	ld	r18, Z
     23a:	31 81       	ldd	r19, Z+1	; 0x01
     23c:	42 17       	cp	r20, r18
     23e:	53 07       	cpc	r21, r19
     240:	b0 f7       	brcc	.-20     	; 0x22e <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     242:	12 96       	adiw	r26, 0x02	; 2
     244:	ed 91       	ld	r30, X+
     246:	fc 91       	ld	r31, X
     248:	13 97       	sbiw	r26, 0x03	; 3
     24a:	fb 83       	std	Y+3, r31	; 0x03
     24c:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     24e:	d5 83       	std	Z+5, r29	; 0x05
     250:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     252:	bd 83       	std	Y+5, r27	; 0x05
     254:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     256:	13 96       	adiw	r26, 0x03	; 3
     258:	dc 93       	st	X, r29
     25a:	ce 93       	st	-X, r28
     25c:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     25e:	99 87       	std	Y+9, r25	; 0x09
     260:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     262:	fc 01       	movw	r30, r24
     264:	20 81       	ld	r18, Z
     266:	2f 5f       	subi	r18, 0xFF	; 255
     268:	20 83       	st	Z, r18
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     276:	a0 85       	ldd	r26, Z+8	; 0x08
     278:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     27a:	c2 81       	ldd	r28, Z+2	; 0x02
     27c:	d3 81       	ldd	r29, Z+3	; 0x03
     27e:	84 81       	ldd	r24, Z+4	; 0x04
     280:	95 81       	ldd	r25, Z+5	; 0x05
     282:	9d 83       	std	Y+5, r25	; 0x05
     284:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     286:	c4 81       	ldd	r28, Z+4	; 0x04
     288:	d5 81       	ldd	r29, Z+5	; 0x05
     28a:	82 81       	ldd	r24, Z+2	; 0x02
     28c:	93 81       	ldd	r25, Z+3	; 0x03
     28e:	9b 83       	std	Y+3, r25	; 0x03
     290:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     292:	11 96       	adiw	r26, 0x01	; 1
     294:	8d 91       	ld	r24, X+
     296:	9c 91       	ld	r25, X
     298:	12 97       	sbiw	r26, 0x02	; 2
     29a:	e8 17       	cp	r30, r24
     29c:	f9 07       	cpc	r31, r25
     29e:	31 f4       	brne	.+12     	; 0x2ac <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     2a0:	84 81       	ldd	r24, Z+4	; 0x04
     2a2:	95 81       	ldd	r25, Z+5	; 0x05
     2a4:	12 96       	adiw	r26, 0x02	; 2
     2a6:	9c 93       	st	X, r25
     2a8:	8e 93       	st	-X, r24
     2aa:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     2ac:	11 86       	std	Z+9, r1	; 0x09
     2ae:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     2b0:	8c 91       	ld	r24, X
     2b2:	81 50       	subi	r24, 0x01	; 1
     2b4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     2bc:	8c e7       	ldi	r24, 0x7C	; 124
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     2c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     2c8:	e0 e8       	ldi	r30, 0x80	; 128
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	8c 7f       	andi	r24, 0xFC	; 252
     2d0:	80 83       	st	Z, r24
     2d2:	8b e0       	ldi	r24, 0x0B	; 11
     2d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     2d8:	ef e6       	ldi	r30, 0x6F	; 111
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	82 60       	ori	r24, 0x02	; 2
     2e0:	80 83       	st	Z, r24
     2e2:	08 95       	ret

000002e4 <pxPortInitialiseStack>:
     2e4:	31 e1       	ldi	r19, 0x11	; 17
     2e6:	fc 01       	movw	r30, r24
     2e8:	30 83       	st	Z, r19
     2ea:	31 97       	sbiw	r30, 0x01	; 1
     2ec:	22 e2       	ldi	r18, 0x22	; 34
     2ee:	20 83       	st	Z, r18
     2f0:	31 97       	sbiw	r30, 0x01	; 1
     2f2:	a3 e3       	ldi	r26, 0x33	; 51
     2f4:	a0 83       	st	Z, r26
     2f6:	31 97       	sbiw	r30, 0x01	; 1
     2f8:	60 83       	st	Z, r22
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	70 83       	st	Z, r23
     2fe:	31 97       	sbiw	r30, 0x01	; 1
     300:	10 82       	st	Z, r1
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	60 e8       	ldi	r22, 0x80	; 128
     306:	60 83       	st	Z, r22
     308:	31 97       	sbiw	r30, 0x01	; 1
     30a:	10 82       	st	Z, r1
     30c:	31 97       	sbiw	r30, 0x01	; 1
     30e:	62 e0       	ldi	r22, 0x02	; 2
     310:	60 83       	st	Z, r22
     312:	31 97       	sbiw	r30, 0x01	; 1
     314:	63 e0       	ldi	r22, 0x03	; 3
     316:	60 83       	st	Z, r22
     318:	31 97       	sbiw	r30, 0x01	; 1
     31a:	64 e0       	ldi	r22, 0x04	; 4
     31c:	60 83       	st	Z, r22
     31e:	31 97       	sbiw	r30, 0x01	; 1
     320:	65 e0       	ldi	r22, 0x05	; 5
     322:	60 83       	st	Z, r22
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	66 e0       	ldi	r22, 0x06	; 6
     328:	60 83       	st	Z, r22
     32a:	31 97       	sbiw	r30, 0x01	; 1
     32c:	67 e0       	ldi	r22, 0x07	; 7
     32e:	60 83       	st	Z, r22
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	68 e0       	ldi	r22, 0x08	; 8
     334:	60 83       	st	Z, r22
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	69 e0       	ldi	r22, 0x09	; 9
     33a:	60 83       	st	Z, r22
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	60 e1       	ldi	r22, 0x10	; 16
     340:	60 83       	st	Z, r22
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	30 83       	st	Z, r19
     346:	31 97       	sbiw	r30, 0x01	; 1
     348:	32 e1       	ldi	r19, 0x12	; 18
     34a:	30 83       	st	Z, r19
     34c:	31 97       	sbiw	r30, 0x01	; 1
     34e:	33 e1       	ldi	r19, 0x13	; 19
     350:	30 83       	st	Z, r19
     352:	31 97       	sbiw	r30, 0x01	; 1
     354:	34 e1       	ldi	r19, 0x14	; 20
     356:	30 83       	st	Z, r19
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	35 e1       	ldi	r19, 0x15	; 21
     35c:	30 83       	st	Z, r19
     35e:	31 97       	sbiw	r30, 0x01	; 1
     360:	36 e1       	ldi	r19, 0x16	; 22
     362:	30 83       	st	Z, r19
     364:	31 97       	sbiw	r30, 0x01	; 1
     366:	37 e1       	ldi	r19, 0x17	; 23
     368:	30 83       	st	Z, r19
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	38 e1       	ldi	r19, 0x18	; 24
     36e:	30 83       	st	Z, r19
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	39 e1       	ldi	r19, 0x19	; 25
     374:	30 83       	st	Z, r19
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	30 e2       	ldi	r19, 0x20	; 32
     37a:	30 83       	st	Z, r19
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	31 e2       	ldi	r19, 0x21	; 33
     380:	30 83       	st	Z, r19
     382:	31 97       	sbiw	r30, 0x01	; 1
     384:	20 83       	st	Z, r18
     386:	31 97       	sbiw	r30, 0x01	; 1
     388:	23 e2       	ldi	r18, 0x23	; 35
     38a:	20 83       	st	Z, r18
     38c:	31 97       	sbiw	r30, 0x01	; 1
     38e:	40 83       	st	Z, r20
     390:	31 97       	sbiw	r30, 0x01	; 1
     392:	50 83       	st	Z, r21
     394:	31 97       	sbiw	r30, 0x01	; 1
     396:	26 e2       	ldi	r18, 0x26	; 38
     398:	20 83       	st	Z, r18
     39a:	31 97       	sbiw	r30, 0x01	; 1
     39c:	27 e2       	ldi	r18, 0x27	; 39
     39e:	20 83       	st	Z, r18
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	28 e2       	ldi	r18, 0x28	; 40
     3a4:	20 83       	st	Z, r18
     3a6:	31 97       	sbiw	r30, 0x01	; 1
     3a8:	29 e2       	ldi	r18, 0x29	; 41
     3aa:	20 83       	st	Z, r18
     3ac:	31 97       	sbiw	r30, 0x01	; 1
     3ae:	20 e3       	ldi	r18, 0x30	; 48
     3b0:	20 83       	st	Z, r18
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	21 e3       	ldi	r18, 0x31	; 49
     3b6:	20 83       	st	Z, r18
     3b8:	86 97       	sbiw	r24, 0x26	; 38
     3ba:	08 95       	ret

000003bc <xPortStartScheduler>:
     3bc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <prvSetupTimerInterrupt>
     3c0:	a0 91 a9 07 	lds	r26, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     3c4:	b0 91 aa 07 	lds	r27, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     3c8:	cd 91       	ld	r28, X+
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	dd 91       	ld	r29, X+
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	ff 91       	pop	r31
     3d2:	ef 91       	pop	r30
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	bf 91       	pop	r27
     3da:	af 91       	pop	r26
     3dc:	9f 91       	pop	r25
     3de:	8f 91       	pop	r24
     3e0:	7f 91       	pop	r23
     3e2:	6f 91       	pop	r22
     3e4:	5f 91       	pop	r21
     3e6:	4f 91       	pop	r20
     3e8:	3f 91       	pop	r19
     3ea:	2f 91       	pop	r18
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	df 90       	pop	r13
     3f6:	cf 90       	pop	r12
     3f8:	bf 90       	pop	r11
     3fa:	af 90       	pop	r10
     3fc:	9f 90       	pop	r9
     3fe:	8f 90       	pop	r8
     400:	7f 90       	pop	r7
     402:	6f 90       	pop	r6
     404:	5f 90       	pop	r5
     406:	4f 90       	pop	r4
     408:	3f 90       	pop	r3
     40a:	2f 90       	pop	r2
     40c:	1f 90       	pop	r1
     40e:	0f 90       	pop	r0
     410:	0f be       	out	0x3f, r0	; 63
     412:	0f 90       	pop	r0
     414:	08 95       	ret
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	08 95       	ret

0000041a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	0f 92       	push	r0
     422:	1f 92       	push	r1
     424:	11 24       	eor	r1, r1
     426:	2f 92       	push	r2
     428:	3f 92       	push	r3
     42a:	4f 92       	push	r4
     42c:	5f 92       	push	r5
     42e:	6f 92       	push	r6
     430:	7f 92       	push	r7
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	af 92       	push	r10
     438:	bf 92       	push	r11
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	2f 93       	push	r18
     448:	3f 93       	push	r19
     44a:	4f 93       	push	r20
     44c:	5f 93       	push	r21
     44e:	6f 93       	push	r22
     450:	7f 93       	push	r23
     452:	8f 93       	push	r24
     454:	9f 93       	push	r25
     456:	af 93       	push	r26
     458:	bf 93       	push	r27
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	ef 93       	push	r30
     460:	ff 93       	push	r31
     462:	a0 91 a9 07 	lds	r26, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     466:	b0 91 aa 07 	lds	r27, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     46a:	0d b6       	in	r0, 0x3d	; 61
     46c:	0d 92       	st	X+, r0
     46e:	0e b6       	in	r0, 0x3e	; 62
     470:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     472:	0e 94 1b 09 	call	0x1236	; 0x1236 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     476:	a0 91 a9 07 	lds	r26, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     47a:	b0 91 aa 07 	lds	r27, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     47e:	cd 91       	ld	r28, X+
     480:	cd bf       	out	0x3d, r28	; 61
     482:	dd 91       	ld	r29, X+
     484:	de bf       	out	0x3e, r29	; 62
     486:	ff 91       	pop	r31
     488:	ef 91       	pop	r30
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	bf 91       	pop	r27
     490:	af 91       	pop	r26
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	7f 91       	pop	r23
     498:	6f 91       	pop	r22
     49a:	5f 91       	pop	r21
     49c:	4f 91       	pop	r20
     49e:	3f 91       	pop	r19
     4a0:	2f 91       	pop	r18
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	bf 90       	pop	r11
     4b0:	af 90       	pop	r10
     4b2:	9f 90       	pop	r9
     4b4:	8f 90       	pop	r8
     4b6:	7f 90       	pop	r7
     4b8:	6f 90       	pop	r6
     4ba:	5f 90       	pop	r5
     4bc:	4f 90       	pop	r4
     4be:	3f 90       	pop	r3
     4c0:	2f 90       	pop	r2
     4c2:	1f 90       	pop	r1
     4c4:	0f 90       	pop	r0
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	0f 90       	pop	r0

	asm volatile ( "ret" );
     4ca:	08 95       	ret

000004cc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	0f 92       	push	r0
     4d4:	1f 92       	push	r1
     4d6:	11 24       	eor	r1, r1
     4d8:	2f 92       	push	r2
     4da:	3f 92       	push	r3
     4dc:	4f 92       	push	r4
     4de:	5f 92       	push	r5
     4e0:	6f 92       	push	r6
     4e2:	7f 92       	push	r7
     4e4:	8f 92       	push	r8
     4e6:	9f 92       	push	r9
     4e8:	af 92       	push	r10
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	2f 93       	push	r18
     4fa:	3f 93       	push	r19
     4fc:	4f 93       	push	r20
     4fe:	5f 93       	push	r21
     500:	6f 93       	push	r22
     502:	7f 93       	push	r23
     504:	8f 93       	push	r24
     506:	9f 93       	push	r25
     508:	af 93       	push	r26
     50a:	bf 93       	push	r27
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	ef 93       	push	r30
     512:	ff 93       	push	r31
     514:	a0 91 a9 07 	lds	r26, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     518:	b0 91 aa 07 	lds	r27, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     51c:	0d b6       	in	r0, 0x3d	; 61
     51e:	0d 92       	st	X+, r0
     520:	0e b6       	in	r0, 0x3e	; 62
     522:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     524:	0e 94 8b 07 	call	0xf16	; 0xf16 <xTaskIncrementTick>
     528:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     52a:	0e 94 1b 09 	call	0x1236	; 0x1236 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     52e:	a0 91 a9 07 	lds	r26, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     532:	b0 91 aa 07 	lds	r27, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     536:	cd 91       	ld	r28, X+
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	dd 91       	ld	r29, X+
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	ff 91       	pop	r31
     540:	ef 91       	pop	r30
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	bf 91       	pop	r27
     548:	af 91       	pop	r26
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	7f 91       	pop	r23
     550:	6f 91       	pop	r22
     552:	5f 91       	pop	r21
     554:	4f 91       	pop	r20
     556:	3f 91       	pop	r19
     558:	2f 91       	pop	r18
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	cf 90       	pop	r12
     566:	bf 90       	pop	r11
     568:	af 90       	pop	r10
     56a:	9f 90       	pop	r9
     56c:	8f 90       	pop	r8
     56e:	7f 90       	pop	r7
     570:	6f 90       	pop	r6
     572:	5f 90       	pop	r5
     574:	4f 90       	pop	r4
     576:	3f 90       	pop	r3
     578:	2f 90       	pop	r2
     57a:	1f 90       	pop	r1
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0

	asm volatile ( "ret" );
     582:	08 95       	ret

00000584 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     584:	0e 94 66 02 	call	0x4cc	; 0x4cc <vPortYieldFromTick>
		asm volatile ( "reti" );
     588:	18 95       	reti

0000058a <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     590:	0e 94 85 07 	call	0xf0a	; 0xf0a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     594:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     598:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     59c:	89 2b       	or	r24, r25
     59e:	31 f4       	brne	.+12     	; 0x5ac <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     5a0:	87 e7       	ldi	r24, 0x77	; 119
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     5a8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     5ac:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <xNextFreeByte>
     5b0:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <xNextFreeByte+0x1>
     5b4:	c9 01       	movw	r24, r18
     5b6:	8c 0f       	add	r24, r28
     5b8:	9d 1f       	adc	r25, r29
     5ba:	8b 3d       	cpi	r24, 0xDB	; 219
     5bc:	45 e0       	ldi	r20, 0x05	; 5
     5be:	94 07       	cpc	r25, r20
     5c0:	70 f4       	brcc	.+28     	; 0x5de <pvPortMalloc+0x54>
     5c2:	28 17       	cp	r18, r24
     5c4:	39 07       	cpc	r19, r25
     5c6:	70 f4       	brcc	.+28     	; 0x5e4 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     5c8:	c0 91 72 01 	lds	r28, 0x0172	; 0x800172 <__data_end>
     5cc:	d0 91 73 01 	lds	r29, 0x0173	; 0x800173 <__data_end+0x1>
     5d0:	c2 0f       	add	r28, r18
     5d2:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     5d4:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <xNextFreeByte+0x1>
     5d8:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <xNextFreeByte>
     5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     5de:	c0 e0       	ldi	r28, 0x00	; 0
     5e0:	d0 e0       	ldi	r29, 0x00	; 0
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <pvPortMalloc+0x5e>
     5e4:	c0 e0       	ldi	r28, 0x00	; 0
     5e6:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     5e8:	0e 94 4b 08 	call	0x1096	; 0x1096 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     5ec:	ce 01       	movw	r24, r28
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     5f4:	08 95       	ret

000005f6 <prvIsQueueEmpty>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	0f 92       	push	r0
     5fc:	fc 01       	movw	r30, r24
     5fe:	82 8d       	ldd	r24, Z+26	; 0x1a
     600:	81 11       	cpse	r24, r1
     602:	02 c0       	rjmp	.+4      	; 0x608 <prvIsQueueEmpty+0x12>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	01 c0       	rjmp	.+2      	; 0x60a <prvIsQueueEmpty+0x14>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	08 95       	ret

00000610 <prvIsQueueFull>:
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	0f 92       	push	r0
     616:	fc 01       	movw	r30, r24
     618:	22 8d       	ldd	r18, Z+26	; 0x1a
     61a:	83 8d       	ldd	r24, Z+27	; 0x1b
     61c:	28 13       	cpse	r18, r24
     61e:	02 c0       	rjmp	.+4      	; 0x624 <prvIsQueueFull+0x14>
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	01 c0       	rjmp	.+2      	; 0x626 <prvIsQueueFull+0x16>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0f 90       	pop	r0
     628:	0f be       	out	0x3f, r0	; 63
     62a:	08 95       	ret

0000062c <prvCopyDataToQueue>:
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	ec 01       	movw	r28, r24
     634:	14 2f       	mov	r17, r20
     636:	4c 8d       	ldd	r20, Y+28	; 0x1c
     638:	41 11       	cpse	r20, r1
     63a:	0c c0       	rjmp	.+24     	; 0x654 <prvCopyDataToQueue+0x28>
     63c:	88 81       	ld	r24, Y
     63e:	99 81       	ldd	r25, Y+1	; 0x01
     640:	89 2b       	or	r24, r25
     642:	09 f0       	breq	.+2      	; 0x646 <prvCopyDataToQueue+0x1a>
     644:	45 c0       	rjmp	.+138    	; 0x6d0 <prvCopyDataToQueue+0xa4>
     646:	8a 81       	ldd	r24, Y+2	; 0x02
     648:	9b 81       	ldd	r25, Y+3	; 0x03
     64a:	0e 94 81 0a 	call	0x1502	; 0x1502 <xTaskPriorityDisinherit>
     64e:	1b 82       	std	Y+3, r1	; 0x03
     650:	1a 82       	std	Y+2, r1	; 0x02
     652:	45 c0       	rjmp	.+138    	; 0x6de <prvCopyDataToQueue+0xb2>
     654:	11 11       	cpse	r17, r1
     656:	17 c0       	rjmp	.+46     	; 0x686 <prvCopyDataToQueue+0x5a>
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	8c 81       	ldd	r24, Y+4	; 0x04
     65c:	9d 81       	ldd	r25, Y+5	; 0x05
     65e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <memcpy>
     662:	2c 8d       	ldd	r18, Y+28	; 0x1c
     664:	8c 81       	ldd	r24, Y+4	; 0x04
     666:	9d 81       	ldd	r25, Y+5	; 0x05
     668:	82 0f       	add	r24, r18
     66a:	91 1d       	adc	r25, r1
     66c:	9d 83       	std	Y+5, r25	; 0x05
     66e:	8c 83       	std	Y+4, r24	; 0x04
     670:	2a 81       	ldd	r18, Y+2	; 0x02
     672:	3b 81       	ldd	r19, Y+3	; 0x03
     674:	82 17       	cp	r24, r18
     676:	93 07       	cpc	r25, r19
     678:	68 f1       	brcs	.+90     	; 0x6d4 <prvCopyDataToQueue+0xa8>
     67a:	88 81       	ld	r24, Y
     67c:	99 81       	ldd	r25, Y+1	; 0x01
     67e:	9d 83       	std	Y+5, r25	; 0x05
     680:	8c 83       	std	Y+4, r24	; 0x04
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	2c c0       	rjmp	.+88     	; 0x6de <prvCopyDataToQueue+0xb2>
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	8e 81       	ldd	r24, Y+6	; 0x06
     68a:	9f 81       	ldd	r25, Y+7	; 0x07
     68c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <memcpy>
     690:	8c 8d       	ldd	r24, Y+28	; 0x1c
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	91 95       	neg	r25
     696:	81 95       	neg	r24
     698:	91 09       	sbc	r25, r1
     69a:	2e 81       	ldd	r18, Y+6	; 0x06
     69c:	3f 81       	ldd	r19, Y+7	; 0x07
     69e:	28 0f       	add	r18, r24
     6a0:	39 1f       	adc	r19, r25
     6a2:	3f 83       	std	Y+7, r19	; 0x07
     6a4:	2e 83       	std	Y+6, r18	; 0x06
     6a6:	48 81       	ld	r20, Y
     6a8:	59 81       	ldd	r21, Y+1	; 0x01
     6aa:	24 17       	cp	r18, r20
     6ac:	35 07       	cpc	r19, r21
     6ae:	30 f4       	brcc	.+12     	; 0x6bc <prvCopyDataToQueue+0x90>
     6b0:	2a 81       	ldd	r18, Y+2	; 0x02
     6b2:	3b 81       	ldd	r19, Y+3	; 0x03
     6b4:	82 0f       	add	r24, r18
     6b6:	93 1f       	adc	r25, r19
     6b8:	9f 83       	std	Y+7, r25	; 0x07
     6ba:	8e 83       	std	Y+6, r24	; 0x06
     6bc:	12 30       	cpi	r17, 0x02	; 2
     6be:	61 f4       	brne	.+24     	; 0x6d8 <prvCopyDataToQueue+0xac>
     6c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6c2:	88 23       	and	r24, r24
     6c4:	59 f0       	breq	.+22     	; 0x6dc <prvCopyDataToQueue+0xb0>
     6c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6c8:	81 50       	subi	r24, 0x01	; 1
     6ca:	8a 8f       	std	Y+26, r24	; 0x1a
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	07 c0       	rjmp	.+14     	; 0x6de <prvCopyDataToQueue+0xb2>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <prvCopyDataToQueue+0xb2>
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <prvCopyDataToQueue+0xb2>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	01 c0       	rjmp	.+2      	; 0x6de <prvCopyDataToQueue+0xb2>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6e0:	9f 5f       	subi	r25, 0xFF	; 255
     6e2:	9a 8f       	std	Y+26, r25	; 0x1a
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <prvCopyDataFromQueue>:
     6ec:	fc 01       	movw	r30, r24
     6ee:	44 8d       	ldd	r20, Z+28	; 0x1c
     6f0:	44 23       	and	r20, r20
     6f2:	a9 f0       	breq	.+42     	; 0x71e <prvCopyDataFromQueue+0x32>
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	26 81       	ldd	r18, Z+6	; 0x06
     6f8:	37 81       	ldd	r19, Z+7	; 0x07
     6fa:	24 0f       	add	r18, r20
     6fc:	35 1f       	adc	r19, r21
     6fe:	37 83       	std	Z+7, r19	; 0x07
     700:	26 83       	std	Z+6, r18	; 0x06
     702:	82 81       	ldd	r24, Z+2	; 0x02
     704:	93 81       	ldd	r25, Z+3	; 0x03
     706:	28 17       	cp	r18, r24
     708:	39 07       	cpc	r19, r25
     70a:	20 f0       	brcs	.+8      	; 0x714 <prvCopyDataFromQueue+0x28>
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	97 83       	std	Z+7, r25	; 0x07
     712:	86 83       	std	Z+6, r24	; 0x06
     714:	cb 01       	movw	r24, r22
     716:	66 81       	ldd	r22, Z+6	; 0x06
     718:	77 81       	ldd	r23, Z+7	; 0x07
     71a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <memcpy>
     71e:	08 95       	ret

00000720 <prvUnlockQueue>:
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	ec 01       	movw	r28, r24
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	0f 92       	push	r0
     72c:	0d c0       	rjmp	.+26     	; 0x748 <prvUnlockQueue+0x28>
     72e:	89 89       	ldd	r24, Y+17	; 0x11
     730:	88 23       	and	r24, r24
     732:	69 f0       	breq	.+26     	; 0x74e <prvUnlockQueue+0x2e>
     734:	ce 01       	movw	r24, r28
     736:	41 96       	adiw	r24, 0x11	; 17
     738:	0e 94 96 09 	call	0x132c	; 0x132c <xTaskRemoveFromEventList>
     73c:	81 11       	cpse	r24, r1
     73e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <vTaskMissedYield>
     742:	8e 8d       	ldd	r24, Y+30	; 0x1e
     744:	81 50       	subi	r24, 0x01	; 1
     746:	8e 8f       	std	Y+30, r24	; 0x1e
     748:	8e 8d       	ldd	r24, Y+30	; 0x1e
     74a:	18 16       	cp	r1, r24
     74c:	84 f3       	brlt	.-32     	; 0x72e <prvUnlockQueue+0xe>
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	8e 8f       	std	Y+30, r24	; 0x1e
     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	0f 92       	push	r0
     75c:	0d c0       	rjmp	.+26     	; 0x778 <prvUnlockQueue+0x58>
     75e:	88 85       	ldd	r24, Y+8	; 0x08
     760:	88 23       	and	r24, r24
     762:	69 f0       	breq	.+26     	; 0x77e <prvUnlockQueue+0x5e>
     764:	ce 01       	movw	r24, r28
     766:	08 96       	adiw	r24, 0x08	; 8
     768:	0e 94 96 09 	call	0x132c	; 0x132c <xTaskRemoveFromEventList>
     76c:	81 11       	cpse	r24, r1
     76e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <vTaskMissedYield>
     772:	8d 8d       	ldd	r24, Y+29	; 0x1d
     774:	81 50       	subi	r24, 0x01	; 1
     776:	8d 8f       	std	Y+29, r24	; 0x1d
     778:	8d 8d       	ldd	r24, Y+29	; 0x1d
     77a:	18 16       	cp	r1, r24
     77c:	84 f3       	brlt	.-32     	; 0x75e <prvUnlockQueue+0x3e>
     77e:	8f ef       	ldi	r24, 0xFF	; 255
     780:	8d 8f       	std	Y+29, r24	; 0x1d
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <xQueueGenericReset>:
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	ec 01       	movw	r28, r24
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	0f 92       	push	r0
     798:	e8 81       	ld	r30, Y
     79a:	f9 81       	ldd	r31, Y+1	; 0x01
     79c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	82 9f       	mul	r24, r18
     7a6:	a0 01       	movw	r20, r0
     7a8:	83 9f       	mul	r24, r19
     7aa:	50 0d       	add	r21, r0
     7ac:	92 9f       	mul	r25, r18
     7ae:	50 0d       	add	r21, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	4e 0f       	add	r20, r30
     7b4:	5f 1f       	adc	r21, r31
     7b6:	5b 83       	std	Y+3, r21	; 0x03
     7b8:	4a 83       	std	Y+2, r20	; 0x02
     7ba:	1a 8e       	std	Y+26, r1	; 0x1a
     7bc:	fd 83       	std	Y+5, r31	; 0x05
     7be:	ec 83       	std	Y+4, r30	; 0x04
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	28 9f       	mul	r18, r24
     7c4:	a0 01       	movw	r20, r0
     7c6:	29 9f       	mul	r18, r25
     7c8:	50 0d       	add	r21, r0
     7ca:	38 9f       	mul	r19, r24
     7cc:	50 0d       	add	r21, r0
     7ce:	11 24       	eor	r1, r1
     7d0:	cf 01       	movw	r24, r30
     7d2:	84 0f       	add	r24, r20
     7d4:	95 1f       	adc	r25, r21
     7d6:	9f 83       	std	Y+7, r25	; 0x07
     7d8:	8e 83       	std	Y+6, r24	; 0x06
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	8d 8f       	std	Y+29, r24	; 0x1d
     7de:	8e 8f       	std	Y+30, r24	; 0x1e
     7e0:	61 11       	cpse	r22, r1
     7e2:	0c c0       	rjmp	.+24     	; 0x7fc <xQueueGenericReset+0x70>
     7e4:	88 85       	ldd	r24, Y+8	; 0x08
     7e6:	88 23       	and	r24, r24
     7e8:	89 f0       	breq	.+34     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7ea:	ce 01       	movw	r24, r28
     7ec:	08 96       	adiw	r24, 0x08	; 8
     7ee:	0e 94 96 09 	call	0x132c	; 0x132c <xTaskRemoveFromEventList>
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	59 f4       	brne	.+22     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7f6:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
     7fa:	08 c0       	rjmp	.+16     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7fc:	ce 01       	movw	r24, r28
     7fe:	08 96       	adiw	r24, 0x08	; 8
     800:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <vListInitialise>
     804:	ce 01       	movw	r24, r28
     806:	41 96       	adiw	r24, 0x11	; 17
     808:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <vListInitialise>
     80c:	0f 90       	pop	r0
     80e:	0f be       	out	0x3f, r0	; 63
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <xQueueGenericCreate>:
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	08 2f       	mov	r16, r24
     822:	16 2f       	mov	r17, r22
     824:	66 23       	and	r22, r22
     826:	29 f0       	breq	.+10     	; 0x832 <xQueueGenericCreate+0x1a>
     828:	86 9f       	mul	r24, r22
     82a:	c0 01       	movw	r24, r0
     82c:	11 24       	eor	r1, r1
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	02 c0       	rjmp	.+4      	; 0x836 <xQueueGenericCreate+0x1e>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	4f 96       	adiw	r24, 0x1f	; 31
     838:	0e 94 c5 02 	call	0x58a	; 0x58a <pvPortMalloc>
     83c:	ec 01       	movw	r28, r24
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	71 f0       	breq	.+28     	; 0x85e <xQueueGenericCreate+0x46>
     842:	11 11       	cpse	r17, r1
     844:	03 c0       	rjmp	.+6      	; 0x84c <xQueueGenericCreate+0x34>
     846:	99 83       	std	Y+1, r25	; 0x01
     848:	88 83       	st	Y, r24
     84a:	03 c0       	rjmp	.+6      	; 0x852 <xQueueGenericCreate+0x3a>
     84c:	4f 96       	adiw	r24, 0x1f	; 31
     84e:	99 83       	std	Y+1, r25	; 0x01
     850:	88 83       	st	Y, r24
     852:	0b 8f       	std	Y+27, r16	; 0x1b
     854:	1c 8f       	std	Y+28, r17	; 0x1c
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	ce 01       	movw	r24, r28
     85a:	0e 94 c6 03 	call	0x78c	; 0x78c <xQueueGenericReset>
     85e:	ce 01       	movw	r24, r28
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	08 95       	ret

0000086a <xQueueGenericSend>:
     86a:	cf 92       	push	r12
     86c:	df 92       	push	r13
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	00 d0       	rcall	.+0      	; 0x87c <xQueueGenericSend+0x12>
     87c:	00 d0       	rcall	.+0      	; 0x87e <xQueueGenericSend+0x14>
     87e:	1f 92       	push	r1
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	8c 01       	movw	r16, r24
     886:	7b 01       	movw	r14, r22
     888:	5d 83       	std	Y+5, r21	; 0x05
     88a:	4c 83       	std	Y+4, r20	; 0x04
     88c:	c2 2e       	mov	r12, r18
     88e:	d1 2c       	mov	r13, r1
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	0f 92       	push	r0
     896:	f8 01       	movw	r30, r16
     898:	92 8d       	ldd	r25, Z+26	; 0x1a
     89a:	83 8d       	ldd	r24, Z+27	; 0x1b
     89c:	98 17       	cp	r25, r24
     89e:	18 f0       	brcs	.+6      	; 0x8a6 <xQueueGenericSend+0x3c>
     8a0:	f2 e0       	ldi	r31, 0x02	; 2
     8a2:	cf 12       	cpse	r12, r31
     8a4:	19 c0       	rjmp	.+50     	; 0x8d8 <xQueueGenericSend+0x6e>
     8a6:	4c 2d       	mov	r20, r12
     8a8:	b7 01       	movw	r22, r14
     8aa:	c8 01       	movw	r24, r16
     8ac:	0e 94 16 03 	call	0x62c	; 0x62c <prvCopyDataToQueue>
     8b0:	f8 01       	movw	r30, r16
     8b2:	91 89       	ldd	r25, Z+17	; 0x11
     8b4:	99 23       	and	r25, r25
     8b6:	49 f0       	breq	.+18     	; 0x8ca <xQueueGenericSend+0x60>
     8b8:	c8 01       	movw	r24, r16
     8ba:	41 96       	adiw	r24, 0x11	; 17
     8bc:	0e 94 96 09 	call	0x132c	; 0x132c <xTaskRemoveFromEventList>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	31 f4       	brne	.+12     	; 0x8d0 <xQueueGenericSend+0x66>
     8c4:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <xQueueGenericSend+0x66>
     8ca:	81 11       	cpse	r24, r1
     8cc:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
     8d0:	0f 90       	pop	r0
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	4d c0       	rjmp	.+154    	; 0x972 <__stack+0x73>
     8d8:	8c 81       	ldd	r24, Y+4	; 0x04
     8da:	9d 81       	ldd	r25, Y+5	; 0x05
     8dc:	89 2b       	or	r24, r25
     8de:	21 f4       	brne	.+8      	; 0x8e8 <xQueueGenericSend+0x7e>
     8e0:	0f 90       	pop	r0
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	45 c0       	rjmp	.+138    	; 0x972 <__stack+0x73>
     8e8:	d1 10       	cpse	r13, r1
     8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <xQueueGenericSend+0x8e>
     8ec:	ce 01       	movw	r24, r28
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	0e 94 de 09 	call	0x13bc	; 0x13bc <vTaskSetTimeOutState>
     8f4:	dd 24       	eor	r13, r13
     8f6:	d3 94       	inc	r13
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	0e 94 85 07 	call	0xf0a	; 0xf0a <vTaskSuspendAll>
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	0f 92       	push	r0
     906:	f8 01       	movw	r30, r16
     908:	85 8d       	ldd	r24, Z+29	; 0x1d
     90a:	8f 3f       	cpi	r24, 0xFF	; 255
     90c:	09 f4       	brne	.+2      	; 0x910 <__stack+0x11>
     90e:	15 8e       	std	Z+29, r1	; 0x1d
     910:	f8 01       	movw	r30, r16
     912:	86 8d       	ldd	r24, Z+30	; 0x1e
     914:	8f 3f       	cpi	r24, 0xFF	; 255
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
     918:	16 8e       	std	Z+30, r1	; 0x1e
     91a:	0f 90       	pop	r0
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	be 01       	movw	r22, r28
     920:	6c 5f       	subi	r22, 0xFC	; 252
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	ce 01       	movw	r24, r28
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <xTaskCheckForTimeOut>
     92c:	81 11       	cpse	r24, r1
     92e:	1b c0       	rjmp	.+54     	; 0x966 <__stack+0x67>
     930:	c8 01       	movw	r24, r16
     932:	0e 94 08 03 	call	0x610	; 0x610 <prvIsQueueFull>
     936:	88 23       	and	r24, r24
     938:	81 f0       	breq	.+32     	; 0x95a <__stack+0x5b>
     93a:	6c 81       	ldd	r22, Y+4	; 0x04
     93c:	7d 81       	ldd	r23, Y+5	; 0x05
     93e:	c8 01       	movw	r24, r16
     940:	08 96       	adiw	r24, 0x08	; 8
     942:	0e 94 79 09 	call	0x12f2	; 0x12f2 <vTaskPlaceOnEventList>
     946:	c8 01       	movw	r24, r16
     948:	0e 94 90 03 	call	0x720	; 0x720 <prvUnlockQueue>
     94c:	0e 94 4b 08 	call	0x1096	; 0x1096 <xTaskResumeAll>
     950:	81 11       	cpse	r24, r1
     952:	9e cf       	rjmp	.-196    	; 0x890 <xQueueGenericSend+0x26>
     954:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
     958:	9b cf       	rjmp	.-202    	; 0x890 <xQueueGenericSend+0x26>
     95a:	c8 01       	movw	r24, r16
     95c:	0e 94 90 03 	call	0x720	; 0x720 <prvUnlockQueue>
     960:	0e 94 4b 08 	call	0x1096	; 0x1096 <xTaskResumeAll>
     964:	95 cf       	rjmp	.-214    	; 0x890 <xQueueGenericSend+0x26>
     966:	c8 01       	movw	r24, r16
     968:	0e 94 90 03 	call	0x720	; 0x720 <prvUnlockQueue>
     96c:	0e 94 4b 08 	call	0x1096	; 0x1096 <xTaskResumeAll>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	08 95       	ret

0000098e <xQueueCreateMutex>:
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	8f e1       	ldi	r24, 0x1F	; 31
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 c5 02 	call	0x58a	; 0x58a <pvPortMalloc>
     99a:	ec 01       	movw	r28, r24
     99c:	89 2b       	or	r24, r25
     99e:	f9 f0       	breq	.+62     	; 0x9de <xQueueCreateMutex+0x50>
     9a0:	1b 82       	std	Y+3, r1	; 0x03
     9a2:	1a 82       	std	Y+2, r1	; 0x02
     9a4:	19 82       	std	Y+1, r1	; 0x01
     9a6:	18 82       	st	Y, r1
     9a8:	1d 82       	std	Y+5, r1	; 0x05
     9aa:	1c 82       	std	Y+4, r1	; 0x04
     9ac:	1f 82       	std	Y+7, r1	; 0x07
     9ae:	1e 82       	std	Y+6, r1	; 0x06
     9b0:	1a 8e       	std	Y+26, r1	; 0x1a
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	8b 8f       	std	Y+27, r24	; 0x1b
     9b6:	1c 8e       	std	Y+28, r1	; 0x1c
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	8d 8f       	std	Y+29, r24	; 0x1d
     9bc:	8e 8f       	std	Y+30, r24	; 0x1e
     9be:	ce 01       	movw	r24, r28
     9c0:	08 96       	adiw	r24, 0x08	; 8
     9c2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <vListInitialise>
     9c6:	ce 01       	movw	r24, r28
     9c8:	41 96       	adiw	r24, 0x11	; 17
     9ca:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <vListInitialise>
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	ce 01       	movw	r24, r28
     9da:	0e 94 35 04 	call	0x86a	; 0x86a <xQueueGenericSend>
     9de:	ce 01       	movw	r24, r28
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <xQueueGenericReceive+0x16>
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <xQueueGenericReceive+0x18>
     9fe:	1f 92       	push	r1
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	8c 01       	movw	r16, r24
     a06:	6b 01       	movw	r12, r22
     a08:	5d 83       	std	Y+5, r21	; 0x05
     a0a:	4c 83       	std	Y+4, r20	; 0x04
     a0c:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE;
     a0e:	f1 2c       	mov	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     a16:	f8 01       	movw	r30, r16
     a18:	82 8d       	ldd	r24, Z+26	; 0x1a
     a1a:	88 23       	and	r24, r24
     a1c:	99 f1       	breq	.+102    	; 0xa84 <xQueueGenericReceive+0x9e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
     a1e:	a6 80       	ldd	r10, Z+6	; 0x06
     a20:	b7 80       	ldd	r11, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
     a22:	b6 01       	movw	r22, r12
     a24:	c8 01       	movw	r24, r16
     a26:	0e 94 76 03 	call	0x6ec	; 0x6ec <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
     a2a:	e1 10       	cpse	r14, r1
     a2c:	1a c0       	rjmp	.+52     	; 0xa62 <xQueueGenericReceive+0x7c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
     a2e:	f8 01       	movw	r30, r16
     a30:	82 8d       	ldd	r24, Z+26	; 0x1a
     a32:	81 50       	subi	r24, 0x01	; 1
     a34:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     a36:	80 81       	ld	r24, Z
     a38:	91 81       	ldd	r25, Z+1	; 0x01
     a3a:	89 2b       	or	r24, r25
     a3c:	29 f4       	brne	.+10     	; 0xa48 <xQueueGenericReceive+0x62>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     a3e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pvTaskIncrementMutexHeldCount>
     a42:	f8 01       	movw	r30, r16
     a44:	93 83       	std	Z+3, r25	; 0x03
     a46:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     a48:	f8 01       	movw	r30, r16
     a4a:	80 85       	ldd	r24, Z+8	; 0x08
     a4c:	88 23       	and	r24, r24
     a4e:	b1 f0       	breq	.+44     	; 0xa7c <xQueueGenericReceive+0x96>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     a50:	c8 01       	movw	r24, r16
     a52:	08 96       	adiw	r24, 0x08	; 8
     a54:	0e 94 96 09 	call	0x132c	; 0x132c <xTaskRemoveFromEventList>
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	81 f4       	brne	.+32     	; 0xa7c <xQueueGenericReceive+0x96>
						{
							queueYIELD_IF_USING_PREEMPTION();
     a5c:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
     a60:	0d c0       	rjmp	.+26     	; 0xa7c <xQueueGenericReceive+0x96>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
     a62:	f8 01       	movw	r30, r16
     a64:	b7 82       	std	Z+7, r11	; 0x07
     a66:	a6 82       	std	Z+6, r10	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     a68:	81 89       	ldd	r24, Z+17	; 0x11
     a6a:	88 23       	and	r24, r24
     a6c:	39 f0       	breq	.+14     	; 0xa7c <xQueueGenericReceive+0x96>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     a6e:	c8 01       	movw	r24, r16
     a70:	41 96       	adiw	r24, 0x11	; 17
     a72:	0e 94 96 09 	call	0x132c	; 0x132c <xTaskRemoveFromEventList>
     a76:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
     a78:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	5b c0       	rjmp	.+182    	; 0xb3a <xQueueGenericReceive+0x154>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     a84:	8c 81       	ldd	r24, Y+4	; 0x04
     a86:	9d 81       	ldd	r25, Y+5	; 0x05
     a88:	89 2b       	or	r24, r25
     a8a:	21 f4       	brne	.+8      	; 0xa94 <xQueueGenericReceive+0xae>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	53 c0       	rjmp	.+166    	; 0xb3a <xQueueGenericReceive+0x154>
				}
				else if( xEntryTimeSet == pdFALSE )
     a94:	f1 10       	cpse	r15, r1
     a96:	06 c0       	rjmp	.+12     	; 0xaa4 <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     a98:	ce 01       	movw	r24, r28
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	0e 94 de 09 	call	0x13bc	; 0x13bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     aa0:	ff 24       	eor	r15, r15
     aa2:	f3 94       	inc	r15
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     aa8:	0e 94 85 07 	call	0xf0a	; 0xf0a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	0f 92       	push	r0
     ab2:	f8 01       	movw	r30, r16
     ab4:	85 8d       	ldd	r24, Z+29	; 0x1d
     ab6:	8f 3f       	cpi	r24, 0xFF	; 255
     ab8:	09 f4       	brne	.+2      	; 0xabc <xQueueGenericReceive+0xd6>
     aba:	15 8e       	std	Z+29, r1	; 0x1d
     abc:	f8 01       	movw	r30, r16
     abe:	86 8d       	ldd	r24, Z+30	; 0x1e
     ac0:	8f 3f       	cpi	r24, 0xFF	; 255
     ac2:	09 f4       	brne	.+2      	; 0xac6 <xQueueGenericReceive+0xe0>
     ac4:	16 8e       	std	Z+30, r1	; 0x1e
     ac6:	0f 90       	pop	r0
     ac8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     aca:	be 01       	movw	r22, r28
     acc:	6c 5f       	subi	r22, 0xFC	; 252
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <xTaskCheckForTimeOut>
     ad8:	81 11       	cpse	r24, r1
     ada:	29 c0       	rjmp	.+82     	; 0xb2e <xQueueGenericReceive+0x148>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     adc:	c8 01       	movw	r24, r16
     ade:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <prvIsQueueEmpty>
     ae2:	88 23       	and	r24, r24
     ae4:	f1 f0       	breq	.+60     	; 0xb22 <xQueueGenericReceive+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     ae6:	f8 01       	movw	r30, r16
     ae8:	80 81       	ld	r24, Z
     aea:	91 81       	ldd	r25, Z+1	; 0x01
     aec:	89 2b       	or	r24, r25
     aee:	49 f4       	brne	.+18     	; 0xb02 <xQueueGenericReceive+0x11c>
					{
						taskENTER_CRITICAL();
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     af6:	82 81       	ldd	r24, Z+2	; 0x02
     af8:	93 81       	ldd	r25, Z+3	; 0x03
     afa:	0e 94 1f 0a 	call	0x143e	; 0x143e <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     b02:	6c 81       	ldd	r22, Y+4	; 0x04
     b04:	7d 81       	ldd	r23, Y+5	; 0x05
     b06:	c8 01       	movw	r24, r16
     b08:	41 96       	adiw	r24, 0x11	; 17
     b0a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
     b0e:	c8 01       	movw	r24, r16
     b10:	0e 94 90 03 	call	0x720	; 0x720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
     b14:	0e 94 4b 08 	call	0x1096	; 0x1096 <xTaskResumeAll>
     b18:	81 11       	cpse	r24, r1
     b1a:	7a cf       	rjmp	.-268    	; 0xa10 <xQueueGenericReceive+0x2a>
				{
					portYIELD_WITHIN_API();
     b1c:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
     b20:	77 cf       	rjmp	.-274    	; 0xa10 <xQueueGenericReceive+0x2a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     b22:	c8 01       	movw	r24, r16
     b24:	0e 94 90 03 	call	0x720	; 0x720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     b28:	0e 94 4b 08 	call	0x1096	; 0x1096 <xTaskResumeAll>
     b2c:	71 cf       	rjmp	.-286    	; 0xa10 <xQueueGenericReceive+0x2a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
     b2e:	c8 01       	movw	r24, r16
     b30:	0e 94 90 03 	call	0x720	; 0x720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     b34:	0e 94 4b 08 	call	0x1096	; 0x1096 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
     b38:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	af 90       	pop	r10
     b58:	08 95       	ret

00000b5a <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
     b5a:	e0 91 71 07 	lds	r30, 0x0771	; 0x800771 <pxDelayedTaskList>
     b5e:	f0 91 72 07 	lds	r31, 0x0772	; 0x800772 <pxDelayedTaskList+0x1>
     b62:	80 81       	ld	r24, Z
     b64:	81 11       	cpse	r24, r1
     b66:	07 c0       	rjmp	.+14     	; 0xb76 <prvResetNextTaskUnblockTime+0x1c>
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	9f ef       	ldi	r25, 0xFF	; 255
     b6c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b70:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b74:	08 95       	ret
     b76:	e0 91 71 07 	lds	r30, 0x0771	; 0x800771 <pxDelayedTaskList>
     b7a:	f0 91 72 07 	lds	r31, 0x0772	; 0x800772 <pxDelayedTaskList+0x1>
     b7e:	05 80       	ldd	r0, Z+5	; 0x05
     b80:	f6 81       	ldd	r31, Z+6	; 0x06
     b82:	e0 2d       	mov	r30, r0
     b84:	06 80       	ldd	r0, Z+6	; 0x06
     b86:	f7 81       	ldd	r31, Z+7	; 0x07
     b88:	e0 2d       	mov	r30, r0
     b8a:	82 81       	ldd	r24, Z+2	; 0x02
     b8c:	93 81       	ldd	r25, Z+3	; 0x03
     b8e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b92:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b96:	08 95       	ret

00000b98 <prvAllocateTCBAndStack>:
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	61 15       	cp	r22, r1
     ba2:	71 05       	cpc	r23, r1
     ba4:	21 f4       	brne	.+8      	; 0xbae <prvAllocateTCBAndStack+0x16>
     ba6:	0e 94 c5 02 	call	0x58a	; 0x58a <pvPortMalloc>
     baa:	ec 01       	movw	r28, r24
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <prvAllocateTCBAndStack+0x18>
     bae:	eb 01       	movw	r28, r22
     bb0:	20 97       	sbiw	r28, 0x00	; 0
     bb2:	79 f0       	breq	.+30     	; 0xbd2 <prvAllocateTCBAndStack+0x3a>
     bb4:	88 e2       	ldi	r24, 0x28	; 40
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 c5 02 	call	0x58a	; 0x58a <pvPortMalloc>
     bbc:	8c 01       	movw	r16, r24
     bbe:	00 97       	sbiw	r24, 0x00	; 0
     bc0:	21 f0       	breq	.+8      	; 0xbca <prvAllocateTCBAndStack+0x32>
     bc2:	fc 01       	movw	r30, r24
     bc4:	d0 8f       	std	Z+24, r29	; 0x18
     bc6:	c7 8b       	std	Z+23, r28	; 0x17
     bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <prvAllocateTCBAndStack+0x3e>
     bca:	ce 01       	movw	r24, r28
     bcc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <vPortFree>
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <prvAllocateTCBAndStack+0x3e>
     bd2:	00 e0       	ldi	r16, 0x00	; 0
     bd4:	10 e0       	ldi	r17, 0x00	; 0
     bd6:	c8 01       	movw	r24, r16
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <prvDeleteTCB>:
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	ec 01       	movw	r28, r24
     be8:	8f 89       	ldd	r24, Y+23	; 0x17
     bea:	98 8d       	ldd	r25, Y+24	; 0x18
     bec:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <vPortFree>
     bf0:	ce 01       	movw	r24, r28
     bf2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <vPortFree>
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <prvInitialiseTCBVariables>:
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
     c04:	14 2f       	mov	r17, r20
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	0f c0       	rjmp	.+30     	; 0xc28 <prvInitialiseTCBVariables+0x2c>
     c0a:	82 2f       	mov	r24, r18
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	fb 01       	movw	r30, r22
     c10:	e8 0f       	add	r30, r24
     c12:	f9 1f       	adc	r31, r25
     c14:	30 81       	ld	r19, Z
     c16:	de 01       	movw	r26, r28
     c18:	a8 0f       	add	r26, r24
     c1a:	b9 1f       	adc	r27, r25
     c1c:	59 96       	adiw	r26, 0x19	; 25
     c1e:	3c 93       	st	X, r19
     c20:	80 81       	ld	r24, Z
     c22:	88 23       	and	r24, r24
     c24:	19 f0       	breq	.+6      	; 0xc2c <prvInitialiseTCBVariables+0x30>
     c26:	2f 5f       	subi	r18, 0xFF	; 255
     c28:	28 30       	cpi	r18, 0x08	; 8
     c2a:	78 f3       	brcs	.-34     	; 0xc0a <prvInitialiseTCBVariables+0xe>
     c2c:	18 a2       	std	Y+32, r1	; 0x20
     c2e:	14 30       	cpi	r17, 0x04	; 4
     c30:	08 f0       	brcs	.+2      	; 0xc34 <prvInitialiseTCBVariables+0x38>
     c32:	13 e0       	ldi	r17, 0x03	; 3
     c34:	1e 8b       	std	Y+22, r17	; 0x16
     c36:	19 a3       	std	Y+33, r17	; 0x21
     c38:	1a a2       	std	Y+34, r1	; 0x22
     c3a:	ce 01       	movw	r24, r28
     c3c:	02 96       	adiw	r24, 0x02	; 2
     c3e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <vListInitialiseItem>
     c42:	ce 01       	movw	r24, r28
     c44:	0c 96       	adiw	r24, 0x0c	; 12
     c46:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <vListInitialiseItem>
     c4a:	d9 87       	std	Y+9, r29	; 0x09
     c4c:	c8 87       	std	Y+8, r28	; 0x08
     c4e:	84 e0       	ldi	r24, 0x04	; 4
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	81 1b       	sub	r24, r17
     c54:	91 09       	sbc	r25, r1
     c56:	9d 87       	std	Y+13, r25	; 0x0d
     c58:	8c 87       	std	Y+12, r24	; 0x0c
     c5a:	db 8b       	std	Y+19, r29	; 0x13
     c5c:	ca 8b       	std	Y+18, r28	; 0x12
     c5e:	1b a2       	std	Y+35, r1	; 0x23
     c60:	1c a2       	std	Y+36, r1	; 0x24
     c62:	1d a2       	std	Y+37, r1	; 0x25
     c64:	1e a2       	std	Y+38, r1	; 0x26
     c66:	1f a2       	std	Y+39, r1	; 0x27
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	08 95       	ret

00000c70 <prvInitialiseTaskLists>:
     c70:	cf 93       	push	r28
     c72:	c0 e0       	ldi	r28, 0x00	; 0
     c74:	10 c0       	rjmp	.+32     	; 0xc96 <prvInitialiseTaskLists+0x26>
     c76:	8c 2f       	mov	r24, r28
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	9c 01       	movw	r18, r24
     c7c:	22 0f       	add	r18, r18
     c7e:	33 1f       	adc	r19, r19
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	8b 57       	subi	r24, 0x7B	; 123
     c8e:	98 4f       	sbci	r25, 0xF8	; 248
     c90:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <vListInitialise>
     c94:	cf 5f       	subi	r28, 0xFF	; 255
     c96:	c4 30       	cpi	r28, 0x04	; 4
     c98:	70 f3       	brcs	.-36     	; 0xc76 <prvInitialiseTaskLists+0x6>
     c9a:	8c e7       	ldi	r24, 0x7C	; 124
     c9c:	97 e0       	ldi	r25, 0x07	; 7
     c9e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <vListInitialise>
     ca2:	83 e7       	ldi	r24, 0x73	; 115
     ca4:	97 e0       	ldi	r25, 0x07	; 7
     ca6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <vListInitialise>
     caa:	86 e6       	ldi	r24, 0x66	; 102
     cac:	97 e0       	ldi	r25, 0x07	; 7
     cae:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <vListInitialise>
     cb2:	8d e5       	ldi	r24, 0x5D	; 93
     cb4:	97 e0       	ldi	r25, 0x07	; 7
     cb6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <vListInitialise>
     cba:	8c e7       	ldi	r24, 0x7C	; 124
     cbc:	97 e0       	ldi	r25, 0x07	; 7
     cbe:	90 93 72 07 	sts	0x0772, r25	; 0x800772 <pxDelayedTaskList+0x1>
     cc2:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <pxDelayedTaskList>
     cc6:	83 e7       	ldi	r24, 0x73	; 115
     cc8:	97 e0       	ldi	r25, 0x07	; 7
     cca:	90 93 70 07 	sts	0x0770, r25	; 0x800770 <pxOverflowDelayedTaskList+0x1>
     cce:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <pxOverflowDelayedTaskList>
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <prvAddCurrentTaskToDelayedList>:
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	ec 01       	movw	r28, r24
     cdc:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     ce0:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     ce4:	93 83       	std	Z+3, r25	; 0x03
     ce6:	82 83       	std	Z+2, r24	; 0x02
     ce8:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <xTickCount>
     cec:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <xTickCount+0x1>
     cf0:	c8 17       	cp	r28, r24
     cf2:	d9 07       	cpc	r29, r25
     cf4:	68 f4       	brcc	.+26     	; 0xd10 <prvAddCurrentTaskToDelayedList+0x3a>
     cf6:	60 91 a9 07 	lds	r22, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     cfa:	70 91 aa 07 	lds	r23, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     cfe:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <pxOverflowDelayedTaskList>
     d02:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <pxOverflowDelayedTaskList+0x1>
     d06:	6e 5f       	subi	r22, 0xFE	; 254
     d08:	7f 4f       	sbci	r23, 0xFF	; 255
     d0a:	0e 94 07 01 	call	0x20e	; 0x20e <vListInsert>
     d0e:	17 c0       	rjmp	.+46     	; 0xd3e <prvAddCurrentTaskToDelayedList+0x68>
     d10:	60 91 a9 07 	lds	r22, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     d14:	70 91 aa 07 	lds	r23, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     d18:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <pxDelayedTaskList>
     d1c:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <pxDelayedTaskList+0x1>
     d20:	6e 5f       	subi	r22, 0xFE	; 254
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
     d24:	0e 94 07 01 	call	0x20e	; 0x20e <vListInsert>
     d28:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d2c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d30:	c8 17       	cp	r28, r24
     d32:	d9 07       	cpc	r29, r25
     d34:	20 f4       	brcc	.+8      	; 0xd3e <prvAddCurrentTaskToDelayedList+0x68>
     d36:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d3a:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__DATA_REGION_ORIGIN__>
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <xTaskGenericCreate>:
     d44:	2f 92       	push	r2
     d46:	3f 92       	push	r3
     d48:	4f 92       	push	r4
     d4a:	5f 92       	push	r5
     d4c:	7f 92       	push	r7
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	00 d0       	rcall	.+0      	; 0xd68 <xTaskGenericCreate+0x24>
     d68:	00 d0       	rcall	.+0      	; 0xd6a <xTaskGenericCreate+0x26>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	4b 01       	movw	r8, r22
     d74:	5c 83       	std	Y+4, r21	; 0x04
     d76:	4b 83       	std	Y+3, r20	; 0x03
     d78:	19 01       	movw	r2, r18
     d7a:	70 2e       	mov	r7, r16
     d7c:	b6 01       	movw	r22, r12
     d7e:	25 01       	movw	r4, r10
     d80:	ca 01       	movw	r24, r20
     d82:	0e 94 cc 05 	call	0xb98	; 0xb98 <prvAllocateTCBAndStack>
     d86:	5c 01       	movw	r10, r24
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	09 f4       	brne	.+2      	; 0xd8e <xTaskGenericCreate+0x4a>
     d8c:	6a c0       	rjmp	.+212    	; 0xe62 <xTaskGenericCreate+0x11e>
     d8e:	fc 01       	movw	r30, r24
     d90:	c7 88       	ldd	r12, Z+23	; 0x17
     d92:	d0 8c       	ldd	r13, Z+24	; 0x18
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	c8 0e       	add	r12, r24
     d9c:	d9 1e       	adc	r13, r25
     d9e:	0b 81       	ldd	r16, Y+3	; 0x03
     da0:	1c 81       	ldd	r17, Y+4	; 0x04
     da2:	92 01       	movw	r18, r4
     da4:	47 2d       	mov	r20, r7
     da6:	b4 01       	movw	r22, r8
     da8:	c5 01       	movw	r24, r10
     daa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <prvInitialiseTCBVariables>
     dae:	a1 01       	movw	r20, r2
     db0:	69 81       	ldd	r22, Y+1	; 0x01
     db2:	7a 81       	ldd	r23, Y+2	; 0x02
     db4:	c6 01       	movw	r24, r12
     db6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <pxPortInitialiseStack>
     dba:	f5 01       	movw	r30, r10
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	80 83       	st	Z, r24
     dc0:	e1 14       	cp	r14, r1
     dc2:	f1 04       	cpc	r15, r1
     dc4:	19 f0       	breq	.+6      	; 0xdcc <xTaskGenericCreate+0x88>
     dc6:	f7 01       	movw	r30, r14
     dc8:	b1 82       	std	Z+1, r11	; 0x01
     dca:	a0 82       	st	Z, r10
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	0f 92       	push	r0
     dd2:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxCurrentNumberOfTasks>
     dd6:	8f 5f       	subi	r24, 0xFF	; 255
     dd8:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <uxCurrentNumberOfTasks>
     ddc:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     de0:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     de4:	89 2b       	or	r24, r25
     de6:	59 f4       	brne	.+22     	; 0xdfe <xTaskGenericCreate+0xba>
     de8:	b0 92 aa 07 	sts	0x07AA, r11	; 0x8007aa <pxCurrentTCB+0x1>
     dec:	a0 92 a9 07 	sts	0x07A9, r10	; 0x8007a9 <pxCurrentTCB>
     df0:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxCurrentNumberOfTasks>
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	91 f4       	brne	.+36     	; 0xe1c <xTaskGenericCreate+0xd8>
     df8:	0e 94 38 06 	call	0xc70	; 0xc70 <prvInitialiseTaskLists>
     dfc:	0f c0       	rjmp	.+30     	; 0xe1c <xTaskGenericCreate+0xd8>
     dfe:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <xSchedulerRunning>
     e02:	81 11       	cpse	r24, r1
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <xTaskGenericCreate+0xd8>
     e06:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     e0a:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     e0e:	86 89       	ldd	r24, Z+22	; 0x16
     e10:	78 16       	cp	r7, r24
     e12:	20 f0       	brcs	.+8      	; 0xe1c <xTaskGenericCreate+0xd8>
     e14:	b0 92 aa 07 	sts	0x07AA, r11	; 0x8007aa <pxCurrentTCB+0x1>
     e18:	a0 92 a9 07 	sts	0x07A9, r10	; 0x8007a9 <pxCurrentTCB>
     e1c:	80 91 53 07 	lds	r24, 0x0753	; 0x800753 <uxTaskNumber>
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <uxTaskNumber>
     e26:	f5 01       	movw	r30, r10
     e28:	86 89       	ldd	r24, Z+22	; 0x16
     e2a:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <uxTopReadyPriority>
     e2e:	98 17       	cp	r25, r24
     e30:	10 f4       	brcc	.+4      	; 0xe36 <xTaskGenericCreate+0xf2>
     e32:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <uxTopReadyPriority>
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	b5 01       	movw	r22, r10
     e3a:	6e 5f       	subi	r22, 0xFE	; 254
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	9c 01       	movw	r18, r24
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	82 0f       	add	r24, r18
     e4e:	93 1f       	adc	r25, r19
     e50:	8b 57       	subi	r24, 0x7B	; 123
     e52:	98 4f       	sbci	r25, 0xF8	; 248
     e54:	0e 94 e6 00 	call	0x1cc	; 0x1cc <vListInsertEnd>
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	f1 e0       	ldi	r31, 0x01	; 1
     e5e:	f9 83       	std	Y+1, r31	; 0x01
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <xTaskGenericCreate+0x122>
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	e9 81       	ldd	r30, Y+1	; 0x01
     e68:	e1 30       	cpi	r30, 0x01	; 1
     e6a:	69 f4       	brne	.+26     	; 0xe86 <xTaskGenericCreate+0x142>
     e6c:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <xSchedulerRunning>
     e70:	88 23       	and	r24, r24
     e72:	49 f0       	breq	.+18     	; 0xe86 <xTaskGenericCreate+0x142>
     e74:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <pxCurrentTCB>
     e78:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
     e7c:	86 89       	ldd	r24, Z+22	; 0x16
     e7e:	87 15       	cp	r24, r7
     e80:	10 f4       	brcc	.+4      	; 0xe86 <xTaskGenericCreate+0x142>
     e82:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	af 90       	pop	r10
     ea4:	9f 90       	pop	r9
     ea6:	8f 90       	pop	r8
     ea8:	7f 90       	pop	r7
     eaa:	5f 90       	pop	r5
     eac:	4f 90       	pop	r4
     eae:	3f 90       	pop	r3
     eb0:	2f 90       	pop	r2
     eb2:	08 95       	ret

00000eb4 <vTaskStartScheduler>:
     eb4:	af 92       	push	r10
     eb6:	bf 92       	push	r11
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	a1 2c       	mov	r10, r1
     ec4:	b1 2c       	mov	r11, r1
     ec6:	c1 2c       	mov	r12, r1
     ec8:	d1 2c       	mov	r13, r1
     eca:	e1 2c       	mov	r14, r1
     ecc:	f1 2c       	mov	r15, r1
     ece:	00 e0       	ldi	r16, 0x00	; 0
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	45 e5       	ldi	r20, 0x55	; 85
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	62 e0       	ldi	r22, 0x02	; 2
     eda:	71 e0       	ldi	r23, 0x01	; 1
     edc:	80 e1       	ldi	r24, 0x10	; 16
     ede:	99 e0       	ldi	r25, 0x09	; 9
     ee0:	0e 94 a2 06 	call	0xd44	; 0xd44 <xTaskGenericCreate>
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	49 f4       	brne	.+18     	; 0xefa <vTaskStartScheduler+0x46>
     ee8:	f8 94       	cli
     eea:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <xSchedulerRunning>
     eee:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <xTickCount+0x1>
     ef2:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <xTickCount>
     ef6:	0e 94 de 01 	call	0x3bc	; 0x3bc <xPortStartScheduler>
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	cf 90       	pop	r12
     f04:	bf 90       	pop	r11
     f06:	af 90       	pop	r10
     f08:	08 95       	ret

00000f0a <vTaskSuspendAll>:
     f0a:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <uxSchedulerSuspended>
     f0e:	8f 5f       	subi	r24, 0xFF	; 255
     f10:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <uxSchedulerSuspended>
     f14:	08 95       	ret

00000f16 <xTaskIncrementTick>:
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <uxSchedulerSuspended>
     f28:	81 11       	cpse	r24, r1
     f2a:	9d c0       	rjmp	.+314    	; 0x1066 <xTaskIncrementTick+0x150>
     f2c:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <xTickCount>
     f30:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <xTickCount+0x1>
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	90 93 5a 07 	sts	0x075A, r25	; 0x80075a <xTickCount+0x1>
     f3a:	80 93 59 07 	sts	0x0759, r24	; 0x800759 <xTickCount>
     f3e:	e0 90 59 07 	lds	r14, 0x0759	; 0x800759 <xTickCount>
     f42:	f0 90 5a 07 	lds	r15, 0x075A	; 0x80075a <xTickCount+0x1>
     f46:	e1 14       	cp	r14, r1
     f48:	f1 04       	cpc	r15, r1
     f4a:	d9 f4       	brne	.+54     	; 0xf82 <xTaskIncrementTick+0x6c>
     f4c:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <pxDelayedTaskList>
     f50:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <pxDelayedTaskList+0x1>
     f54:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <pxDelayedTaskList>
     f58:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <pxDelayedTaskList+0x1>
     f5c:	20 91 6f 07 	lds	r18, 0x076F	; 0x80076f <pxOverflowDelayedTaskList>
     f60:	30 91 70 07 	lds	r19, 0x0770	; 0x800770 <pxOverflowDelayedTaskList+0x1>
     f64:	30 93 72 07 	sts	0x0772, r19	; 0x800772 <pxDelayedTaskList+0x1>
     f68:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <pxDelayedTaskList>
     f6c:	90 93 70 07 	sts	0x0770, r25	; 0x800770 <pxOverflowDelayedTaskList+0x1>
     f70:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <pxOverflowDelayedTaskList>
     f74:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <xNumOfOverflows>
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <xNumOfOverflows>
     f7e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <prvResetNextTaskUnblockTime>
     f82:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f86:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f8a:	e8 16       	cp	r14, r24
     f8c:	f9 06       	cpc	r15, r25
     f8e:	28 f4       	brcc	.+10     	; 0xf9a <xTaskIncrementTick+0x84>
     f90:	d1 2c       	mov	r13, r1
     f92:	53 c0       	rjmp	.+166    	; 0x103a <xTaskIncrementTick+0x124>
     f94:	dd 24       	eor	r13, r13
     f96:	d3 94       	inc	r13
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <xTaskIncrementTick+0x86>
     f9a:	d1 2c       	mov	r13, r1
     f9c:	e0 91 71 07 	lds	r30, 0x0771	; 0x800771 <pxDelayedTaskList>
     fa0:	f0 91 72 07 	lds	r31, 0x0772	; 0x800772 <pxDelayedTaskList+0x1>
     fa4:	80 81       	ld	r24, Z
     fa6:	81 11       	cpse	r24, r1
     fa8:	07 c0       	rjmp	.+14     	; 0xfb8 <xTaskIncrementTick+0xa2>
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	9f ef       	ldi	r25, 0xFF	; 255
     fae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     fb2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     fb6:	41 c0       	rjmp	.+130    	; 0x103a <xTaskIncrementTick+0x124>
     fb8:	e0 91 71 07 	lds	r30, 0x0771	; 0x800771 <pxDelayedTaskList>
     fbc:	f0 91 72 07 	lds	r31, 0x0772	; 0x800772 <pxDelayedTaskList+0x1>
     fc0:	05 80       	ldd	r0, Z+5	; 0x05
     fc2:	f6 81       	ldd	r31, Z+6	; 0x06
     fc4:	e0 2d       	mov	r30, r0
     fc6:	c6 81       	ldd	r28, Z+6	; 0x06
     fc8:	d7 81       	ldd	r29, Z+7	; 0x07
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	9b 81       	ldd	r25, Y+3	; 0x03
     fce:	e8 16       	cp	r14, r24
     fd0:	f9 06       	cpc	r15, r25
     fd2:	28 f4       	brcc	.+10     	; 0xfde <xTaskIncrementTick+0xc8>
     fd4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     fd8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     fdc:	2e c0       	rjmp	.+92     	; 0x103a <xTaskIncrementTick+0x124>
     fde:	8e 01       	movw	r16, r28
     fe0:	0e 5f       	subi	r16, 0xFE	; 254
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	c8 01       	movw	r24, r16
     fe6:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
     fea:	8c 89       	ldd	r24, Y+20	; 0x14
     fec:	9d 89       	ldd	r25, Y+21	; 0x15
     fee:	89 2b       	or	r24, r25
     ff0:	21 f0       	breq	.+8      	; 0xffa <xTaskIncrementTick+0xe4>
     ff2:	ce 01       	movw	r24, r28
     ff4:	0c 96       	adiw	r24, 0x0c	; 12
     ff6:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
     ffa:	8e 89       	ldd	r24, Y+22	; 0x16
     ffc:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <uxTopReadyPriority>
    1000:	98 17       	cp	r25, r24
    1002:	10 f4       	brcc	.+4      	; 0x1008 <xTaskIncrementTick+0xf2>
    1004:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <uxTopReadyPriority>
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9c 01       	movw	r18, r24
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	22 0f       	add	r18, r18
    1012:	33 1f       	adc	r19, r19
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	b8 01       	movw	r22, r16
    101e:	8b 57       	subi	r24, 0x7B	; 123
    1020:	98 4f       	sbci	r25, 0xF8	; 248
    1022:	0e 94 e6 00 	call	0x1cc	; 0x1cc <vListInsertEnd>
    1026:	9e 89       	ldd	r25, Y+22	; 0x16
    1028:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    102c:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    1030:	86 89       	ldd	r24, Z+22	; 0x16
    1032:	98 17       	cp	r25, r24
    1034:	08 f0       	brcs	.+2      	; 0x1038 <xTaskIncrementTick+0x122>
    1036:	ae cf       	rjmp	.-164    	; 0xf94 <xTaskIncrementTick+0x7e>
    1038:	b1 cf       	rjmp	.-158    	; 0xf9c <xTaskIncrementTick+0x86>
    103a:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    103e:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    1042:	86 89       	ldd	r24, Z+22	; 0x16
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	fc 01       	movw	r30, r24
    1048:	ee 0f       	add	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	8e 0f       	add	r24, r30
    1056:	9f 1f       	adc	r25, r31
    1058:	fc 01       	movw	r30, r24
    105a:	eb 57       	subi	r30, 0x7B	; 123
    105c:	f8 4f       	sbci	r31, 0xF8	; 248
    105e:	80 81       	ld	r24, Z
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	40 f4       	brcc	.+16     	; 0x1074 <xTaskIncrementTick+0x15e>
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <xTaskIncrementTick+0x162>
    1066:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxPendedTicks>
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <uxPendedTicks>
    1070:	d1 2c       	mov	r13, r1
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <xTaskIncrementTick+0x162>
    1074:	dd 24       	eor	r13, r13
    1076:	d3 94       	inc	r13
    1078:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <xYieldPending>
    107c:	88 23       	and	r24, r24
    107e:	11 f0       	breq	.+4      	; 0x1084 <xTaskIncrementTick+0x16e>
    1080:	dd 24       	eor	r13, r13
    1082:	d3 94       	inc	r13
    1084:	8d 2d       	mov	r24, r13
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	08 95       	ret

00001096 <xTaskResumeAll>:
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <uxSchedulerSuspended>
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	0f 92       	push	r0
    10a8:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <uxSchedulerSuspended>
    10ac:	81 50       	subi	r24, 0x01	; 1
    10ae:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <uxSchedulerSuspended>
    10b2:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <uxSchedulerSuspended>
    10b6:	81 11       	cpse	r24, r1
    10b8:	57 c0       	rjmp	.+174    	; 0x1168 <xTaskResumeAll+0xd2>
    10ba:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxCurrentNumberOfTasks>
    10be:	81 11       	cpse	r24, r1
    10c0:	32 c0       	rjmp	.+100    	; 0x1126 <xTaskResumeAll+0x90>
    10c2:	55 c0       	rjmp	.+170    	; 0x116e <xTaskResumeAll+0xd8>
    10c4:	e0 91 6b 07 	lds	r30, 0x076B	; 0x80076b <xPendingReadyList+0x5>
    10c8:	f0 91 6c 07 	lds	r31, 0x076C	; 0x80076c <xPendingReadyList+0x6>
    10cc:	c6 81       	ldd	r28, Z+6	; 0x06
    10ce:	d7 81       	ldd	r29, Z+7	; 0x07
    10d0:	ce 01       	movw	r24, r28
    10d2:	0c 96       	adiw	r24, 0x0c	; 12
    10d4:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
    10d8:	8e 01       	movw	r16, r28
    10da:	0e 5f       	subi	r16, 0xFE	; 254
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	c8 01       	movw	r24, r16
    10e0:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
    10e4:	8e 89       	ldd	r24, Y+22	; 0x16
    10e6:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <uxTopReadyPriority>
    10ea:	98 17       	cp	r25, r24
    10ec:	10 f4       	brcc	.+4      	; 0x10f2 <xTaskResumeAll+0x5c>
    10ee:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <uxTopReadyPriority>
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 01       	movw	r18, r24
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	22 0f       	add	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	82 0f       	add	r24, r18
    1104:	93 1f       	adc	r25, r19
    1106:	b8 01       	movw	r22, r16
    1108:	8b 57       	subi	r24, 0x7B	; 123
    110a:	98 4f       	sbci	r25, 0xF8	; 248
    110c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <vListInsertEnd>
    1110:	9e 89       	ldd	r25, Y+22	; 0x16
    1112:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    1116:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    111a:	86 89       	ldd	r24, Z+22	; 0x16
    111c:	98 17       	cp	r25, r24
    111e:	18 f0       	brcs	.+6      	; 0x1126 <xTaskResumeAll+0x90>
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <xYieldPending>
    1126:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <xPendingReadyList>
    112a:	81 11       	cpse	r24, r1
    112c:	cb cf       	rjmp	.-106    	; 0x10c4 <xTaskResumeAll+0x2e>
    112e:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxPendedTicks>
    1132:	81 11       	cpse	r24, r1
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <xTaskResumeAll+0xba>
    1136:	10 c0       	rjmp	.+32     	; 0x1158 <xTaskResumeAll+0xc2>
    1138:	0e 94 8b 07 	call	0xf16	; 0xf16 <xTaskIncrementTick>
    113c:	88 23       	and	r24, r24
    113e:	19 f0       	breq	.+6      	; 0x1146 <xTaskResumeAll+0xb0>
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <xYieldPending>
    1146:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxPendedTicks>
    114a:	81 50       	subi	r24, 0x01	; 1
    114c:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <uxPendedTicks>
    1150:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <uxPendedTicks>
    1154:	81 11       	cpse	r24, r1
    1156:	f0 cf       	rjmp	.-32     	; 0x1138 <xTaskResumeAll+0xa2>
    1158:	80 91 55 07 	lds	r24, 0x0755	; 0x800755 <xYieldPending>
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	31 f4       	brne	.+12     	; 0x116c <xTaskResumeAll+0xd6>
    1160:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	03 c0       	rjmp	.+6      	; 0x116e <xTaskResumeAll+0xd8>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	01 c0       	rjmp	.+2      	; 0x116e <xTaskResumeAll+0xd8>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	08 95       	ret

0000117c <vTaskDelay>:
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	ec 01       	movw	r28, r24
    1182:	89 2b       	or	r24, r25
    1184:	b9 f0       	breq	.+46     	; 0x11b4 <vTaskDelay+0x38>
    1186:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <uxSchedulerSuspended>
    118a:	0e 94 85 07 	call	0xf0a	; 0xf0a <vTaskSuspendAll>
    118e:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <xTickCount>
    1192:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <xTickCount+0x1>
    1196:	c8 0f       	add	r28, r24
    1198:	d9 1f       	adc	r29, r25
    119a:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    119e:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    11a2:	02 96       	adiw	r24, 0x02	; 2
    11a4:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
    11a8:	ce 01       	movw	r24, r28
    11aa:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <prvAddCurrentTaskToDelayedList>
    11ae:	0e 94 4b 08 	call	0x1096	; 0x1096 <xTaskResumeAll>
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <vTaskDelay+0x3a>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	81 11       	cpse	r24, r1
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <vTaskDelay+0x42>
    11ba:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <prvCheckTasksWaitingTermination>:
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	24 c0       	rjmp	.+72     	; 0x1212 <prvCheckTasksWaitingTermination+0x4e>
    11ca:	0e 94 85 07 	call	0xf0a	; 0xf0a <vTaskSuspendAll>
    11ce:	c0 91 5d 07 	lds	r28, 0x075D	; 0x80075d <xTasksWaitingTermination>
    11d2:	0e 94 4b 08 	call	0x1096	; 0x1096 <xTaskResumeAll>
    11d6:	cc 23       	and	r28, r28
    11d8:	e1 f0       	breq	.+56     	; 0x1212 <prvCheckTasksWaitingTermination+0x4e>
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	0f 92       	push	r0
    11e0:	e0 91 62 07 	lds	r30, 0x0762	; 0x800762 <xTasksWaitingTermination+0x5>
    11e4:	f0 91 63 07 	lds	r31, 0x0763	; 0x800763 <xTasksWaitingTermination+0x6>
    11e8:	c6 81       	ldd	r28, Z+6	; 0x06
    11ea:	d7 81       	ldd	r29, Z+7	; 0x07
    11ec:	ce 01       	movw	r24, r28
    11ee:	02 96       	adiw	r24, 0x02	; 2
    11f0:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
    11f4:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <uxCurrentNumberOfTasks>
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <uxCurrentNumberOfTasks>
    11fe:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxTasksDeleted>
    1202:	81 50       	subi	r24, 0x01	; 1
    1204:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <uxTasksDeleted>
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	ce 01       	movw	r24, r28
    120e:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <prvDeleteTCB>
    1212:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <uxTasksDeleted>
    1216:	81 11       	cpse	r24, r1
    1218:	d8 cf       	rjmp	.-80     	; 0x11ca <prvCheckTasksWaitingTermination+0x6>
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <prvIdleTask>:
    1220:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <prvCheckTasksWaitingTermination>
    1224:	80 91 85 07 	lds	r24, 0x0785	; 0x800785 <pxReadyTasksLists>
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	10 f0       	brcs	.+4      	; 0x1230 <prvIdleTask+0x10>
    122c:	0e 94 0d 02 	call	0x41a	; 0x41a <vPortYield>
    1230:	0e 94 42 10 	call	0x2084	; 0x2084 <vApplicationIdleHook>
    1234:	f5 cf       	rjmp	.-22     	; 0x1220 <prvIdleTask>

00001236 <vTaskSwitchContext>:
    1236:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <uxSchedulerSuspended>
    123a:	88 23       	and	r24, r24
    123c:	21 f0       	breq	.+8      	; 0x1246 <vTaskSwitchContext+0x10>
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <xYieldPending>
    1244:	08 95       	ret
    1246:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <xYieldPending>
    124a:	07 c0       	rjmp	.+14     	; 0x125a <vTaskSwitchContext+0x24>
    124c:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <uxTopReadyPriority>
    1250:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <uxTopReadyPriority>
    1254:	81 50       	subi	r24, 0x01	; 1
    1256:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <uxTopReadyPriority>
    125a:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <uxTopReadyPriority>
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	fc 01       	movw	r30, r24
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	ee 0f       	add	r30, r30
    126c:	ff 1f       	adc	r31, r31
    126e:	8e 0f       	add	r24, r30
    1270:	9f 1f       	adc	r25, r31
    1272:	fc 01       	movw	r30, r24
    1274:	eb 57       	subi	r30, 0x7B	; 123
    1276:	f8 4f       	sbci	r31, 0xF8	; 248
    1278:	80 81       	ld	r24, Z
    127a:	88 23       	and	r24, r24
    127c:	39 f3       	breq	.-50     	; 0x124c <vTaskSwitchContext+0x16>
    127e:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <uxTopReadyPriority>
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9c 01       	movw	r18, r24
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	22 0f       	add	r18, r18
    1290:	33 1f       	adc	r19, r19
    1292:	28 0f       	add	r18, r24
    1294:	39 1f       	adc	r19, r25
    1296:	d9 01       	movw	r26, r18
    1298:	ab 57       	subi	r26, 0x7B	; 123
    129a:	b8 4f       	sbci	r27, 0xF8	; 248
    129c:	11 96       	adiw	r26, 0x01	; 1
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	12 97       	sbiw	r26, 0x02	; 2
    12a4:	02 80       	ldd	r0, Z+2	; 0x02
    12a6:	f3 81       	ldd	r31, Z+3	; 0x03
    12a8:	e0 2d       	mov	r30, r0
    12aa:	12 96       	adiw	r26, 0x02	; 2
    12ac:	fc 93       	st	X, r31
    12ae:	ee 93       	st	-X, r30
    12b0:	11 97       	sbiw	r26, 0x01	; 1
    12b2:	28 57       	subi	r18, 0x78	; 120
    12b4:	38 4f       	sbci	r19, 0xF8	; 248
    12b6:	e2 17       	cp	r30, r18
    12b8:	f3 07       	cpc	r31, r19
    12ba:	29 f4       	brne	.+10     	; 0x12c6 <vTaskSwitchContext+0x90>
    12bc:	22 81       	ldd	r18, Z+2	; 0x02
    12be:	33 81       	ldd	r19, Z+3	; 0x03
    12c0:	fd 01       	movw	r30, r26
    12c2:	32 83       	std	Z+2, r19	; 0x02
    12c4:	21 83       	std	Z+1, r18	; 0x01
    12c6:	fc 01       	movw	r30, r24
    12c8:	ee 0f       	add	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	ee 0f       	add	r30, r30
    12d2:	ff 1f       	adc	r31, r31
    12d4:	8e 0f       	add	r24, r30
    12d6:	9f 1f       	adc	r25, r31
    12d8:	fc 01       	movw	r30, r24
    12da:	eb 57       	subi	r30, 0x7B	; 123
    12dc:	f8 4f       	sbci	r31, 0xF8	; 248
    12de:	01 80       	ldd	r0, Z+1	; 0x01
    12e0:	f2 81       	ldd	r31, Z+2	; 0x02
    12e2:	e0 2d       	mov	r30, r0
    12e4:	86 81       	ldd	r24, Z+6	; 0x06
    12e6:	97 81       	ldd	r25, Z+7	; 0x07
    12e8:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <pxCurrentTCB+0x1>
    12ec:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <pxCurrentTCB>
    12f0:	08 95       	ret

000012f2 <vTaskPlaceOnEventList>:
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	eb 01       	movw	r28, r22
    12f8:	60 91 a9 07 	lds	r22, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    12fc:	70 91 aa 07 	lds	r23, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    1300:	64 5f       	subi	r22, 0xF4	; 244
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	0e 94 07 01 	call	0x20e	; 0x20e <vListInsert>
    1308:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    130c:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    1310:	02 96       	adiw	r24, 0x02	; 2
    1312:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
    1316:	80 91 59 07 	lds	r24, 0x0759	; 0x800759 <xTickCount>
    131a:	90 91 5a 07 	lds	r25, 0x075A	; 0x80075a <xTickCount+0x1>
    131e:	8c 0f       	add	r24, r28
    1320:	9d 1f       	adc	r25, r29
    1322:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <prvAddCurrentTaskToDelayedList>
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <xTaskRemoveFromEventList>:
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	dc 01       	movw	r26, r24
    1336:	15 96       	adiw	r26, 0x05	; 5
    1338:	ed 91       	ld	r30, X+
    133a:	fc 91       	ld	r31, X
    133c:	16 97       	sbiw	r26, 0x06	; 6
    133e:	c6 81       	ldd	r28, Z+6	; 0x06
    1340:	d7 81       	ldd	r29, Z+7	; 0x07
    1342:	8e 01       	movw	r16, r28
    1344:	04 5f       	subi	r16, 0xF4	; 244
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	c8 01       	movw	r24, r16
    134a:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
    134e:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <uxSchedulerSuspended>
    1352:	81 11       	cpse	r24, r1
    1354:	1c c0       	rjmp	.+56     	; 0x138e <xTaskRemoveFromEventList+0x62>
    1356:	0a 50       	subi	r16, 0x0A	; 10
    1358:	11 09       	sbc	r17, r1
    135a:	c8 01       	movw	r24, r16
    135c:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
    1360:	8e 89       	ldd	r24, Y+22	; 0x16
    1362:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <uxTopReadyPriority>
    1366:	98 17       	cp	r25, r24
    1368:	10 f4       	brcc	.+4      	; 0x136e <xTaskRemoveFromEventList+0x42>
    136a:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <uxTopReadyPriority>
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9c 01       	movw	r18, r24
    1372:	22 0f       	add	r18, r18
    1374:	33 1f       	adc	r19, r19
    1376:	22 0f       	add	r18, r18
    1378:	33 1f       	adc	r19, r19
    137a:	22 0f       	add	r18, r18
    137c:	33 1f       	adc	r19, r19
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	b8 01       	movw	r22, r16
    1384:	8b 57       	subi	r24, 0x7B	; 123
    1386:	98 4f       	sbci	r25, 0xF8	; 248
    1388:	0e 94 e6 00 	call	0x1cc	; 0x1cc <vListInsertEnd>
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <xTaskRemoveFromEventList+0x6c>
    138e:	b8 01       	movw	r22, r16
    1390:	86 e6       	ldi	r24, 0x66	; 102
    1392:	97 e0       	ldi	r25, 0x07	; 7
    1394:	0e 94 e6 00 	call	0x1cc	; 0x1cc <vListInsertEnd>
    1398:	9e 89       	ldd	r25, Y+22	; 0x16
    139a:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    139e:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    13a2:	86 89       	ldd	r24, Z+22	; 0x16
    13a4:	89 17       	cp	r24, r25
    13a6:	20 f4       	brcc	.+8      	; 0x13b0 <xTaskRemoveFromEventList+0x84>
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <xYieldPending>
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <xTaskRemoveFromEventList+0x86>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	08 95       	ret

000013bc <vTaskSetTimeOutState>:
    13bc:	20 91 54 07 	lds	r18, 0x0754	; 0x800754 <xNumOfOverflows>
    13c0:	fc 01       	movw	r30, r24
    13c2:	20 83       	st	Z, r18
    13c4:	20 91 59 07 	lds	r18, 0x0759	; 0x800759 <xTickCount>
    13c8:	30 91 5a 07 	lds	r19, 0x075A	; 0x80075a <xTickCount+0x1>
    13cc:	32 83       	std	Z+2, r19	; 0x02
    13ce:	21 83       	std	Z+1, r18	; 0x01
    13d0:	08 95       	ret

000013d2 <xTaskCheckForTimeOut>:
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	fc 01       	movw	r30, r24
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	0f 92       	push	r0
    13de:	40 91 59 07 	lds	r20, 0x0759	; 0x800759 <xTickCount>
    13e2:	50 91 5a 07 	lds	r21, 0x075A	; 0x80075a <xTickCount+0x1>
    13e6:	90 81       	ld	r25, Z
    13e8:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <xNumOfOverflows>
    13ec:	98 17       	cp	r25, r24
    13ee:	29 f0       	breq	.+10     	; 0x13fa <xTaskCheckForTimeOut+0x28>
    13f0:	81 81       	ldd	r24, Z+1	; 0x01
    13f2:	92 81       	ldd	r25, Z+2	; 0x02
    13f4:	48 17       	cp	r20, r24
    13f6:	59 07       	cpc	r21, r25
    13f8:	b0 f4       	brcc	.+44     	; 0x1426 <xTaskCheckForTimeOut+0x54>
    13fa:	21 81       	ldd	r18, Z+1	; 0x01
    13fc:	32 81       	ldd	r19, Z+2	; 0x02
    13fe:	ca 01       	movw	r24, r20
    1400:	82 1b       	sub	r24, r18
    1402:	93 0b       	sbc	r25, r19
    1404:	eb 01       	movw	r28, r22
    1406:	a8 81       	ld	r26, Y
    1408:	b9 81       	ldd	r27, Y+1	; 0x01
    140a:	8a 17       	cp	r24, r26
    140c:	9b 07       	cpc	r25, r27
    140e:	68 f4       	brcc	.+26     	; 0x142a <xTaskCheckForTimeOut+0x58>
    1410:	cf 01       	movw	r24, r30
    1412:	24 1b       	sub	r18, r20
    1414:	35 0b       	sbc	r19, r21
    1416:	2a 0f       	add	r18, r26
    1418:	3b 1f       	adc	r19, r27
    141a:	39 83       	std	Y+1, r19	; 0x01
    141c:	28 83       	st	Y, r18
    141e:	0e 94 de 09 	call	0x13bc	; 0x13bc <vTaskSetTimeOutState>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	03 c0       	rjmp	.+6      	; 0x142c <xTaskCheckForTimeOut+0x5a>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	01 c0       	rjmp	.+2      	; 0x142c <xTaskCheckForTimeOut+0x5a>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	08 95       	ret

00001436 <vTaskMissedYield>:
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 93 55 07 	sts	0x0755, r24	; 0x800755 <xYieldPending>
    143c:	08 95       	ret

0000143e <vTaskPriorityInherit>:
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	fc 01       	movw	r30, r24
    1448:	89 2b       	or	r24, r25
    144a:	09 f4       	brne	.+2      	; 0x144e <vTaskPriorityInherit+0x10>
    144c:	55 c0       	rjmp	.+170    	; 0x14f8 <vTaskPriorityInherit+0xba>
    144e:	26 89       	ldd	r18, Z+22	; 0x16
    1450:	a0 91 a9 07 	lds	r26, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    1454:	b0 91 aa 07 	lds	r27, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    1458:	56 96       	adiw	r26, 0x16	; 22
    145a:	8c 91       	ld	r24, X
    145c:	28 17       	cp	r18, r24
    145e:	08 f0       	brcs	.+2      	; 0x1462 <vTaskPriorityInherit+0x24>
    1460:	4b c0       	rjmp	.+150    	; 0x14f8 <vTaskPriorityInherit+0xba>
    1462:	84 85       	ldd	r24, Z+12	; 0x0c
    1464:	95 85       	ldd	r25, Z+13	; 0x0d
    1466:	99 23       	and	r25, r25
    1468:	64 f0       	brlt	.+24     	; 0x1482 <vTaskPriorityInherit+0x44>
    146a:	a0 91 a9 07 	lds	r26, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    146e:	b0 91 aa 07 	lds	r27, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    1472:	56 96       	adiw	r26, 0x16	; 22
    1474:	3c 91       	ld	r19, X
    1476:	84 e0       	ldi	r24, 0x04	; 4
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	83 1b       	sub	r24, r19
    147c:	91 09       	sbc	r25, r1
    147e:	95 87       	std	Z+13, r25	; 0x0d
    1480:	84 87       	std	Z+12, r24	; 0x0c
    1482:	82 85       	ldd	r24, Z+10	; 0x0a
    1484:	93 85       	ldd	r25, Z+11	; 0x0b
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	44 0f       	add	r20, r20
    148c:	55 1f       	adc	r21, r21
    148e:	44 0f       	add	r20, r20
    1490:	55 1f       	adc	r21, r21
    1492:	44 0f       	add	r20, r20
    1494:	55 1f       	adc	r21, r21
    1496:	24 0f       	add	r18, r20
    1498:	35 1f       	adc	r19, r21
    149a:	2b 57       	subi	r18, 0x7B	; 123
    149c:	38 4f       	sbci	r19, 0xF8	; 248
    149e:	82 17       	cp	r24, r18
    14a0:	93 07       	cpc	r25, r19
    14a2:	19 f5       	brne	.+70     	; 0x14ea <vTaskPriorityInherit+0xac>
    14a4:	8f 01       	movw	r16, r30
    14a6:	ef 01       	movw	r28, r30
    14a8:	22 96       	adiw	r28, 0x02	; 2
    14aa:	ce 01       	movw	r24, r28
    14ac:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
    14b0:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    14b4:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    14b8:	86 89       	ldd	r24, Z+22	; 0x16
    14ba:	f8 01       	movw	r30, r16
    14bc:	86 8b       	std	Z+22, r24	; 0x16
    14be:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <uxTopReadyPriority>
    14c2:	98 17       	cp	r25, r24
    14c4:	10 f4       	brcc	.+4      	; 0x14ca <vTaskPriorityInherit+0x8c>
    14c6:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <uxTopReadyPriority>
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	9c 01       	movw	r18, r24
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	22 0f       	add	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	82 0f       	add	r24, r18
    14dc:	93 1f       	adc	r25, r19
    14de:	be 01       	movw	r22, r28
    14e0:	8b 57       	subi	r24, 0x7B	; 123
    14e2:	98 4f       	sbci	r25, 0xF8	; 248
    14e4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <vListInsertEnd>
    14e8:	07 c0       	rjmp	.+14     	; 0x14f8 <vTaskPriorityInherit+0xba>
    14ea:	a0 91 a9 07 	lds	r26, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    14ee:	b0 91 aa 07 	lds	r27, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    14f2:	56 96       	adiw	r26, 0x16	; 22
    14f4:	8c 91       	ld	r24, X
    14f6:	86 8b       	std	Z+22, r24	; 0x16
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	08 95       	ret

00001502 <xTaskPriorityDisinherit>:
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	fc 01       	movw	r30, r24
    150c:	89 2b       	or	r24, r25
    150e:	79 f1       	breq	.+94     	; 0x156e <xTaskPriorityDisinherit+0x6c>
    1510:	82 a1       	ldd	r24, Z+34	; 0x22
    1512:	81 50       	subi	r24, 0x01	; 1
    1514:	82 a3       	std	Z+34, r24	; 0x22
    1516:	26 89       	ldd	r18, Z+22	; 0x16
    1518:	91 a1       	ldd	r25, Z+33	; 0x21
    151a:	29 17       	cp	r18, r25
    151c:	51 f1       	breq	.+84     	; 0x1572 <xTaskPriorityDisinherit+0x70>
    151e:	81 11       	cpse	r24, r1
    1520:	2a c0       	rjmp	.+84     	; 0x1576 <xTaskPriorityDisinherit+0x74>
    1522:	ef 01       	movw	r28, r30
    1524:	8f 01       	movw	r16, r30
    1526:	0e 5f       	subi	r16, 0xFE	; 254
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	c8 01       	movw	r24, r16
    152c:	0e 94 38 01 	call	0x270	; 0x270 <uxListRemove>
    1530:	89 a1       	ldd	r24, Y+33	; 0x21
    1532:	8e 8b       	std	Y+22, r24	; 0x16
    1534:	24 e0       	ldi	r18, 0x04	; 4
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	28 1b       	sub	r18, r24
    153a:	31 09       	sbc	r19, r1
    153c:	3d 87       	std	Y+13, r19	; 0x0d
    153e:	2c 87       	std	Y+12, r18	; 0x0c
    1540:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <uxTopReadyPriority>
    1544:	98 17       	cp	r25, r24
    1546:	10 f4       	brcc	.+4      	; 0x154c <xTaskPriorityDisinherit+0x4a>
    1548:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <uxTopReadyPriority>
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9c 01       	movw	r18, r24
    1550:	22 0f       	add	r18, r18
    1552:	33 1f       	adc	r19, r19
    1554:	22 0f       	add	r18, r18
    1556:	33 1f       	adc	r19, r19
    1558:	22 0f       	add	r18, r18
    155a:	33 1f       	adc	r19, r19
    155c:	82 0f       	add	r24, r18
    155e:	93 1f       	adc	r25, r19
    1560:	b8 01       	movw	r22, r16
    1562:	8b 57       	subi	r24, 0x7B	; 123
    1564:	98 4f       	sbci	r25, 0xF8	; 248
    1566:	0e 94 e6 00 	call	0x1cc	; 0x1cc <vListInsertEnd>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <xTaskPriorityDisinherit+0x76>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <xTaskPriorityDisinherit+0x76>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <xTaskPriorityDisinherit+0x76>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	08 95       	ret

00001582 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    1582:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    1586:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    158a:	89 2b       	or	r24, r25
    158c:	39 f0       	breq	.+14     	; 0x159c <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    158e:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    1592:	f0 91 aa 07 	lds	r31, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
    1596:	82 a1       	ldd	r24, Z+34	; 0x22
    1598:	8f 5f       	subi	r24, 0xFF	; 255
    159a:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    159c:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <pxCurrentTCB>
    15a0:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <pxCurrentTCB+0x1>
	}
    15a4:	08 95       	ret

000015a6 <main>:
bool powerOnReset;




int main(void){
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	e8 97       	sbiw	r28, 0x38	; 56
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
	
	/* New Main Code */
	
	/* MCC Init */
	SYSTEM_Initialize();
    15ba:	0e 94 82 0b 	call	0x1704	; 0x1704 <SYSTEM_Initialize>
	/* TWI Mutex */
	static SemaphoreHandle_t twi_mutex;
	twi_mutex = xSemaphoreCreateMutex();
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	0e 94 c7 04 	call	0x98e	; 0x98e <xQueueCreateMutex>
	xTaskCreate(inputTask, "input task", 85, &input_task_args, 2, &input_task_handle);
	*/
	
	/* Display task */
	static displayTaskArgs_t display_task_args;
	displayArgsInit(&display_task_args);
    15c4:	8d ea       	ldi	r24, 0xAD	; 173
    15c6:	97 e0       	ldi	r25, 0x07	; 7
    15c8:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <displayArgsInit>
	static TaskHandle_t display_task_handle;
	xTaskCreate(displayTask, "display task", 85, &display_task_args, 2, &display_task_handle);
    15cc:	a1 2c       	mov	r10, r1
    15ce:	b1 2c       	mov	r11, r1
    15d0:	c1 2c       	mov	r12, r1
    15d2:	d1 2c       	mov	r13, r1
    15d4:	0f 2e       	mov	r0, r31
    15d6:	fb ea       	ldi	r31, 0xAB	; 171
    15d8:	ef 2e       	mov	r14, r31
    15da:	f7 e0       	ldi	r31, 0x07	; 7
    15dc:	ff 2e       	mov	r15, r31
    15de:	f0 2d       	mov	r31, r0
    15e0:	02 e0       	ldi	r16, 0x02	; 2
    15e2:	2d ea       	ldi	r18, 0xAD	; 173
    15e4:	37 e0       	ldi	r19, 0x07	; 7
    15e6:	45 e5       	ldi	r20, 0x55	; 85
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	67 e0       	ldi	r22, 0x07	; 7
    15ec:	71 e0       	ldi	r23, 0x01	; 1
    15ee:	8c eb       	ldi	r24, 0xBC	; 188
    15f0:	9f e0       	ldi	r25, 0x0F	; 15
    15f2:	0e 94 a2 06 	call	0xd44	; 0xd44 <xTaskGenericCreate>
	//static appTaskArgs_t app_task_args;
	//appTaskArgsInit(&app_task_args);
	//TaskHandle_t app_task_handle;
	//xTaskCreate(appTask, "app_task", 20, &app_task_args, 3, &app_task_handle)
	
	vTaskStartScheduler();
    15f6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <vTaskStartScheduler>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15fa:	2f ef       	ldi	r18, 0xFF	; 255
    15fc:	81 ee       	ldi	r24, 0xE1	; 225
    15fe:	94 e0       	ldi	r25, 0x04	; 4
    1600:	21 50       	subi	r18, 0x01	; 1
    1602:	80 40       	sbci	r24, 0x00	; 0
    1604:	90 40       	sbci	r25, 0x00	; 0
    1606:	e1 f7       	brne	.-8      	; 0x1600 <main+0x5a>
    1608:	00 c0       	rjmp	.+0      	; 0x160a <main+0x64>
    160a:	00 00       	nop

	
	/* Init */
	_delay_ms(200);
	/* Used to send external resets to lcd so it dosent re config */
	if(MCUSR & 0b00000001){
    160c:	04 b6       	in	r0, 0x34	; 52
    160e:	00 fe       	sbrs	r0, 0
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <main+0x7a>
		powerOnReset = true;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	80 93 77 08 	sts	0x0877, r24	; 0x800877 <powerOnReset>
		MCUSR ^= 0b00000001;
    1618:	94 b7       	in	r25, 0x34	; 52
    161a:	89 27       	eor	r24, r25
    161c:	84 bf       	out	0x34, r24	; 52
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <main+0x7e>
	}else{
		powerOnReset = false;
    1620:	10 92 77 08 	sts	0x0877, r1	; 0x800877 <powerOnReset>
	}
	/* MCC init */
	
	/* My init */
	LCD_Init(&myLCDObj ,LCD_ADDRESS, powerOnReset);
    1624:	40 91 77 08 	lds	r20, 0x0877	; 0x800877 <powerOnReset>
    1628:	67 e2       	ldi	r22, 0x27	; 39
    162a:	ce 01       	movw	r24, r28
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_Init>
	AHT_init(&myAHTObj, 0x38);
    1632:	68 e3       	ldi	r22, 0x38	; 56
    1634:	ce 01       	movw	r24, r28
    1636:	0f 96       	adiw	r24, 0x0f	; 15
    1638:	0e 94 55 0e 	call	0x1caa	; 0x1caa <AHT_init>
	/* Intigrated LED set output */
	DDRB |= (1 << DDB5);
    163c:	84 b1       	in	r24, 0x04	; 4
    163e:	80 62       	ori	r24, 0x20	; 32
    1640:	84 b9       	out	0x04, r24	; 4
    1642:	2f ef       	ldi	r18, 0xFF	; 255
    1644:	81 ee       	ldi	r24, 0xE1	; 225
    1646:	94 e0       	ldi	r25, 0x04	; 4
    1648:	21 50       	subi	r18, 0x01	; 1
    164a:	80 40       	sbci	r24, 0x00	; 0
    164c:	90 40       	sbci	r25, 0x00	; 0
    164e:	e1 f7       	brne	.-8      	; 0x1648 <main+0xa2>
    1650:	00 c0       	rjmp	.+0      	; 0x1652 <main+0xac>
    1652:	00 00       	nop
	

	
    while(1){
		//turn LED on and off
		PORTB ^= (1<<PORTB5);
    1654:	95 b1       	in	r25, 0x05	; 5
    1656:	80 e2       	ldi	r24, 0x20	; 32
    1658:	89 27       	eor	r24, r25
    165a:	85 b9       	out	0x05, r24	; 5
		
		//We will need to find a way to split some of this out into its onw tasks
		myAHTObj.getdata(&myAHTObj);
    165c:	ef a9       	ldd	r30, Y+55	; 0x37
    165e:	f8 ad       	ldd	r31, Y+56	; 0x38
    1660:	ce 01       	movw	r24, r28
    1662:	0f 96       	adiw	r24, 0x0f	; 15
    1664:	09 95       	icall
		myLCDObj.writeStringAt(&myLCDObj, "Curnt Humi:", strlen("Curnt Humi:"), 0x00);
    1666:	eb 85       	ldd	r30, Y+11	; 0x0b
    1668:	fc 85       	ldd	r31, Y+12	; 0x0c
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	4b e0       	ldi	r20, 0x0B	; 11
    166e:	64 e1       	ldi	r22, 0x14	; 20
    1670:	71 e0       	ldi	r23, 0x01	; 1
    1672:	ce 01       	movw	r24, r28
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	09 95       	icall
		myLCDObj.writeStringAt(&myLCDObj, myAHTObj.humd_str, strlen(myAHTObj.humd_str), 0x14-strlen(myAHTObj.humd_str));
    1678:	eb 85       	ldd	r30, Y+11	; 0x0b
    167a:	fc 85       	ldd	r31, Y+12	; 0x0c
    167c:	be 01       	movw	r22, r28
    167e:	65 5d       	subi	r22, 0xD5	; 213
    1680:	7f 4f       	sbci	r23, 0xFF	; 255
    1682:	db 01       	movw	r26, r22
    1684:	0d 90       	ld	r0, X+
    1686:	00 20       	and	r0, r0
    1688:	e9 f7       	brne	.-6      	; 0x1684 <main+0xde>
    168a:	11 97       	sbiw	r26, 0x01	; 1
    168c:	ad 01       	movw	r20, r26
    168e:	46 1b       	sub	r20, r22
    1690:	57 0b       	sbc	r21, r23
    1692:	24 e1       	ldi	r18, 0x14	; 20
    1694:	24 1b       	sub	r18, r20
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	09 95       	icall
		myLCDObj.writeStringAt(&myLCDObj, "Curnt Temp:", strlen("Curnt Temp:"), 0x40);
    169c:	eb 85       	ldd	r30, Y+11	; 0x0b
    169e:	fc 85       	ldd	r31, Y+12	; 0x0c
    16a0:	20 e4       	ldi	r18, 0x40	; 64
    16a2:	4b e0       	ldi	r20, 0x0B	; 11
    16a4:	60 e2       	ldi	r22, 0x20	; 32
    16a6:	71 e0       	ldi	r23, 0x01	; 1
    16a8:	ce 01       	movw	r24, r28
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	09 95       	icall
		myLCDObj.writeStringAt(&myLCDObj, myAHTObj.temp_str, strlen(myAHTObj.temp_str), 0x54-strlen(myAHTObj.temp_str));
    16ae:	eb 85       	ldd	r30, Y+11	; 0x0b
    16b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    16b2:	be 01       	movw	r22, r28
    16b4:	6f 5c       	subi	r22, 0xCF	; 207
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	db 01       	movw	r26, r22
    16ba:	0d 90       	ld	r0, X+
    16bc:	00 20       	and	r0, r0
    16be:	e9 f7       	brne	.-6      	; 0x16ba <main+0x114>
    16c0:	11 97       	sbiw	r26, 0x01	; 1
    16c2:	ad 01       	movw	r20, r26
    16c4:	46 1b       	sub	r20, r22
    16c6:	57 0b       	sbc	r21, r23
    16c8:	24 e5       	ldi	r18, 0x54	; 84
    16ca:	24 1b       	sub	r18, r20
    16cc:	ce 01       	movw	r24, r28
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	09 95       	icall
    16d2:	2f ef       	ldi	r18, 0xFF	; 255
    16d4:	89 e6       	ldi	r24, 0x69	; 105
    16d6:	98 e1       	ldi	r25, 0x18	; 24
    16d8:	21 50       	subi	r18, 0x01	; 1
    16da:	80 40       	sbci	r24, 0x00	; 0
    16dc:	90 40       	sbci	r25, 0x00	; 0
    16de:	e1 f7       	brne	.-8      	; 0x16d8 <main+0x132>
    16e0:	00 c0       	rjmp	.+0      	; 0x16e2 <main+0x13c>
    16e2:	00 00       	nop
		_delay_ms(1000);
		myLCDObj.clear(&myLCDObj);
    16e4:	ed 85       	ldd	r30, Y+13	; 0x0d
    16e6:	fe 85       	ldd	r31, Y+14	; 0x0e
    16e8:	ce 01       	movw	r24, r28
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	09 95       	icall
    16ee:	b2 cf       	rjmp	.-156    	; 0x1654 <main+0xae>

000016f0 <PIN_MANAGER_Initialize>:
#include "../pins.h"

void PIN_MANAGER_Initialize()
{
  /* DIR Registers Initialization */
    DDRB = 0x0;
    16f0:	14 b8       	out	0x04, r1	; 4
    DDRC = 0x0;
    16f2:	17 b8       	out	0x07, r1	; 7
    DDRD = 0x0;
    16f4:	1a b8       	out	0x0a, r1	; 10

  /* PORTx Registers Initialization */
    PORTB = 0x0;
    16f6:	15 b8       	out	0x05, r1	; 5
    PORTC = 0x0;
    16f8:	18 b8       	out	0x08, r1	; 8
    PORTD = 0x0;
    16fa:	1b b8       	out	0x0b, r1	; 11

  /* PINx registers Initialization */
    PINB = 0x0;
    16fc:	13 b8       	out	0x03, r1	; 3
    PINC = 0x0;
    16fe:	16 b8       	out	0x06, r1	; 6
    PIND = 0x0;
    1700:	19 b8       	out	0x09, r1	; 9
    1702:	08 95       	ret

00001704 <SYSTEM_Initialize>:



void SYSTEM_Initialize(void)
{
    PIN_MANAGER_Initialize();
    1704:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <PIN_MANAGER_Initialize>
    //CPU_Initialize();
    //CPUINT_Initialize();
    TWI_Initialize();
    1708:	0e 94 90 0b 	call	0x1720	; 0x1720 <TWI_Initialize>
    170c:	08 95       	ret

0000170e <TWI_ErrorGet>:
{
    return TWSR & STATUS_BIT_MASK_VALUE;
}

static void TWI_DefaultCallback(void)
{
    170e:	e1 eb       	ldi	r30, 0xB1	; 177
    1710:	f7 e0       	ldi	r31, 0x07	; 7
    1712:	83 85       	ldd	r24, Z+11	; 0x0b
    1714:	13 86       	std	Z+11, r1	; 0x0b
    1716:	08 95       	ret

00001718 <TWI_IsBusy>:
    1718:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <twi_Status>
    171c:	08 95       	ret

0000171e <TWI_CallbackRegister>:
    171e:	08 95       	ret

00001720 <TWI_Initialize>:
    1720:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1724:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    1728:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    172c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1730:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7f80bd>
    1734:	80 e2       	ldi	r24, 0x20	; 32
    1736:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    173a:	08 95       	ret

0000173c <TWI_Deinitialize>:
    173c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1740:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    1744:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1748:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    174c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7f80bd>
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1756:	08 95       	ret

00001758 <TWI_StartSend>:
    1758:	ec eb       	ldi	r30, 0xBC	; 188
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	84 6a       	ori	r24, 0xA4	; 164
    1760:	80 83       	st	Z, r24
    1762:	08 95       	ret

00001764 <TWI_Close>:
    1764:	e1 eb       	ldi	r30, 0xB1	; 177
    1766:	f7 e0       	ldi	r31, 0x07	; 7
    1768:	10 82       	st	Z, r1
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	81 83       	std	Z+1, r24	; 0x01
    176e:	13 82       	std	Z+3, r1	; 0x03
    1770:	12 82       	std	Z+2, r1	; 0x02
    1772:	17 82       	std	Z+7, r1	; 0x07
    1774:	16 82       	std	Z+6, r1	; 0x06
    1776:	14 86       	std	Z+12, r1	; 0x0c
    1778:	ec eb       	ldi	r30, 0xBC	; 188
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	80 68       	ori	r24, 0x80	; 128
    1780:	80 83       	st	Z, r24
    1782:	80 81       	ld	r24, Z
    1784:	8e 7f       	andi	r24, 0xFE	; 254
    1786:	80 83       	st	Z, r24
    1788:	08 95       	ret

0000178a <TWI_EventHandler>:
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	00 00       	nop
    1790:	c1 eb       	ldi	r28, 0xB1	; 177
    1792:	d7 e0       	ldi	r29, 0x07	; 7
    1794:	ec 85       	ldd	r30, Y+12	; 0x0c
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	ee 0f       	add	r30, r30
    179a:	ff 1f       	adc	r31, r31
    179c:	e4 5d       	subi	r30, 0xD4	; 212
    179e:	fe 4f       	sbci	r31, 0xFE	; 254
    17a0:	01 90       	ld	r0, Z+
    17a2:	f0 81       	ld	r31, Z
    17a4:	e0 2d       	mov	r30, r0
    17a6:	09 95       	icall
    17a8:	8c 87       	std	Y+12, r24	; 0x0c
    17aa:	00 00       	nop
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret

000017b2 <TWI_Tasks>:
    17b2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TWI_IsBusy>
    17b6:	88 23       	and	r24, r24
    17b8:	51 f0       	breq	.+20     	; 0x17ce <TWI_Tasks+0x1c>
    17ba:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <twi_Status+0xb>
    17be:	81 11       	cpse	r24, r1
    17c0:	06 c0       	rjmp	.+12     	; 0x17ce <TWI_Tasks+0x1c>
    17c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    17c6:	88 23       	and	r24, r24
    17c8:	14 f4       	brge	.+4      	; 0x17ce <TWI_Tasks+0x1c>
    17ca:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_EventHandler>
    17ce:	08 95       	ret

000017d0 <TWI_GetStatus>:
    17d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    17d4:	88 7f       	andi	r24, 0xF8	; 248
    17d6:	08 95       	ret

000017d8 <I2C_EVENT_RESET>:
}

static inline void TWI_ResetBus(void)
{
    //Set Clear Buffer Flag
    TWCR = ((1 << TWSTO) | (1 << TWINT));
    17d8:	80 e9       	ldi	r24, 0x90	; 144
    17da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* I2C Event interfaces */
////////////////////////////////////////////i2c events/////////////////////////////////////////////
static i2c_event_states_t I2C_EVENT_RESET(void)
{
    TWI_ResetBus();
    twi_Status.busy = false;
    17de:	e1 eb       	ldi	r30, 0xB1	; 177
    17e0:	f7 e0       	ldi	r31, 0x07	; 7
    17e2:	10 82       	st	Z, r1
    twi_Status.errorState = I2C_ERROR_NONE;
    17e4:	13 86       	std	Z+11, r1	; 0x0b
    return I2C_STATE_RESET;
}
    17e6:	8d e0       	ldi	r24, 0x0D	; 13
    17e8:	08 95       	ret

000017ea <I2C_EVENT_IDLE>:

static i2c_event_states_t I2C_EVENT_IDLE(void)
{
    //TWI_ResetBus();
    twi_Status.busy = false;
    17ea:	e1 eb       	ldi	r30, 0xB1	; 177
    17ec:	f7 e0       	ldi	r31, 0x07	; 7
    17ee:	10 82       	st	Z, r1
    twi_Status.errorState = I2C_ERROR_NONE;
    17f0:	13 86       	std	Z+11, r1	; 0x0b
    return I2C_STATE_IDLE;
}
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	08 95       	ret

000017f6 <I2C_EVENT_SEND_START_READ>:

static i2c_event_states_t I2C_EVENT_SEND_START_READ(void)
{
    TWI_StartSend();
    17f6:	0e 94 ac 0b 	call	0x1758	; 0x1758 <TWI_StartSend>
    return I2C_STATE_SEND_ADR_READ;
}
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	08 95       	ret

000017fe <TWI_ReadStart>:
    TWCR  &= ~(1 << TWSTA);
}

static void TWI_ReadStart(void)
{
    twi_Status.state = I2C_EVENT_SEND_START_READ();
    17fe:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <I2C_EVENT_SEND_START_READ>
    1802:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <twi_Status+0xc>
    1806:	08 95       	ret

00001808 <TWI_Read>:
    }
    return retStatus;
}

bool TWI_Read(uint16_t address, uint8_t *data, size_t dataLength)
{
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	f8 2e       	mov	r15, r24
    1814:	8b 01       	movw	r16, r22
    1816:	ea 01       	movw	r28, r20
    bool retStatus = false;
    if (!TWI_IsBusy())
    1818:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TWI_IsBusy>
    181c:	81 11       	cpse	r24, r1
    181e:	13 c0       	rjmp	.+38     	; 0x1846 <TWI_Read+0x3e>
    {
        twi_Status.busy = true;
    1820:	e1 eb       	ldi	r30, 0xB1	; 177
    1822:	f7 e0       	ldi	r31, 0x07	; 7
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	80 83       	st	Z, r24
        twi_Status.address = address;
    1828:	f1 82       	std	Z+1, r15	; 0x01
        twi_Status.switchToRead = false;
    182a:	12 86       	std	Z+10, r1	; 0x0a
        twi_Status.readPtr = data;
    182c:	17 83       	std	Z+7, r17	; 0x07
    182e:	06 83       	std	Z+6, r16	; 0x06
        twi_Status.readLength = dataLength;
    1830:	d1 87       	std	Z+9, r29	; 0x09
    1832:	c0 87       	std	Z+8, r28	; 0x08
        twi_Status.writePtr = NULL;
    1834:	13 82       	std	Z+3, r1	; 0x03
    1836:	12 82       	std	Z+2, r1	; 0x02
        twi_Status.writeLength = 0;
    1838:	15 82       	std	Z+5, r1	; 0x05
    183a:	14 82       	std	Z+4, r1	; 0x04
        twi_Status.errorState = I2C_ERROR_NONE;
    183c:	13 86       	std	Z+11, r1	; 0x0b
        TWI_ReadStart();
    183e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <TWI_ReadStart>
        retStatus = true;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <TWI_Read+0x40>
    return retStatus;
}

bool TWI_Read(uint16_t address, uint8_t *data, size_t dataLength)
{
    bool retStatus = false;
    1846:	80 e0       	ldi	r24, 0x00	; 0
        twi_Status.errorState = I2C_ERROR_NONE;
        TWI_ReadStart();
        retStatus = true;
    }
    return retStatus;
}
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	08 95       	ret

00001854 <I2C_EVENT_SEND_START_WRITE>:
    return I2C_STATE_SEND_ADR_READ;
}

static i2c_event_states_t I2C_EVENT_SEND_START_WRITE(void)
{
    TWI_StartSend();
    1854:	0e 94 ac 0b 	call	0x1758	; 0x1758 <TWI_StartSend>
    return I2C_STATE_SEND_ADR_WRITE;
}
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	08 95       	ret

0000185c <TWI_WriteStart>:
    twi_Status.state = I2C_EVENT_SEND_START_READ();
}

static void TWI_WriteStart(void)
{
    twi_Status.state = I2C_EVENT_SEND_START_WRITE();
    185c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <I2C_EVENT_SEND_START_WRITE>
    1860:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <twi_Status+0xc>
    1864:	08 95       	ret

00001866 <TWI_Write>:
    
    TWI_CallbackRegister(TWI_DefaultCallback);
}

bool TWI_Write(uint8_t address, uint8_t *data, size_t dataLength)
{
    1866:	ff 92       	push	r15
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	f8 2e       	mov	r15, r24
    1872:	8b 01       	movw	r16, r22
    1874:	ea 01       	movw	r28, r20
    bool retStatus = false;
    if (!TWI_IsBusy())
    1876:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TWI_IsBusy>
    187a:	81 11       	cpse	r24, r1
    187c:	13 c0       	rjmp	.+38     	; 0x18a4 <TWI_Write+0x3e>
    {
        twi_Status.busy = true;
    187e:	e1 eb       	ldi	r30, 0xB1	; 177
    1880:	f7 e0       	ldi	r31, 0x07	; 7
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	80 83       	st	Z, r24
        twi_Status.address = address;
    1886:	f1 82       	std	Z+1, r15	; 0x01
        twi_Status.switchToRead = false;
    1888:	12 86       	std	Z+10, r1	; 0x0a
        twi_Status.writePtr = data;
    188a:	13 83       	std	Z+3, r17	; 0x03
    188c:	02 83       	std	Z+2, r16	; 0x02
        twi_Status.writeLength = dataLength;
    188e:	d5 83       	std	Z+5, r29	; 0x05
    1890:	c4 83       	std	Z+4, r28	; 0x04
        twi_Status.readPtr = NULL;
    1892:	17 82       	std	Z+7, r1	; 0x07
    1894:	16 82       	std	Z+6, r1	; 0x06
        twi_Status.readLength = 0;
    1896:	11 86       	std	Z+9, r1	; 0x09
    1898:	10 86       	std	Z+8, r1	; 0x08
        twi_Status.errorState = I2C_ERROR_NONE;
    189a:	13 86       	std	Z+11, r1	; 0x0b
        TWI_WriteStart();
    189c:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_WriteStart>
        retStatus = true;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	01 c0       	rjmp	.+2      	; 0x18a6 <TWI_Write+0x40>
    TWI_CallbackRegister(TWI_DefaultCallback);
}

bool TWI_Write(uint8_t address, uint8_t *data, size_t dataLength)
{
    bool retStatus = false;
    18a4:	80 e0       	ldi	r24, 0x00	; 0
        twi_Status.errorState = I2C_ERROR_NONE;
        TWI_WriteStart();
        retStatus = true;
    }
    return retStatus;
}
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	08 95       	ret

000018b2 <TWI_WriteRead>:
    }
    return retStatus;
}

bool TWI_WriteRead(uint16_t address, uint8_t *writeData, size_t writeLength, uint8_t *readData, size_t readLength)
{
    18b2:	bf 92       	push	r11
    18b4:	cf 92       	push	r12
    18b6:	df 92       	push	r13
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	b8 2e       	mov	r11, r24
    18c6:	6b 01       	movw	r12, r22
    18c8:	7a 01       	movw	r14, r20
    18ca:	e9 01       	movw	r28, r18
    bool retStatus = false;
    if (!TWI_IsBusy())
    18cc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <TWI_IsBusy>
    18d0:	81 11       	cpse	r24, r1
    18d2:	13 c0       	rjmp	.+38     	; 0x18fa <TWI_WriteRead+0x48>
    {
        twi_Status.busy = true;
    18d4:	e1 eb       	ldi	r30, 0xB1	; 177
    18d6:	f7 e0       	ldi	r31, 0x07	; 7
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	80 83       	st	Z, r24
        twi_Status.address = address;
    18dc:	b1 82       	std	Z+1, r11	; 0x01
        twi_Status.switchToRead = true;
    18de:	82 87       	std	Z+10, r24	; 0x0a
        twi_Status.writePtr = writeData;
    18e0:	d3 82       	std	Z+3, r13	; 0x03
    18e2:	c2 82       	std	Z+2, r12	; 0x02
        twi_Status.writeLength = writeLength;
    18e4:	f5 82       	std	Z+5, r15	; 0x05
    18e6:	e4 82       	std	Z+4, r14	; 0x04
        twi_Status.readPtr = readData;
    18e8:	d7 83       	std	Z+7, r29	; 0x07
    18ea:	c6 83       	std	Z+6, r28	; 0x06
        twi_Status.readLength = readLength;
    18ec:	11 87       	std	Z+9, r17	; 0x09
    18ee:	00 87       	std	Z+8, r16	; 0x08
        twi_Status.errorState = I2C_ERROR_NONE;
    18f0:	13 86       	std	Z+11, r1	; 0x0b
        TWI_WriteStart();
    18f2:	0e 94 2e 0c 	call	0x185c	; 0x185c <TWI_WriteStart>
        retStatus = true;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <TWI_WriteRead+0x4a>
    return retStatus;
}

bool TWI_WriteRead(uint16_t address, uint8_t *writeData, size_t writeLength, uint8_t *readData, size_t readLength)
{
    bool retStatus = false;
    18fa:	80 e0       	ldi	r24, 0x00	; 0
        twi_Status.errorState = I2C_ERROR_NONE;
        TWI_WriteStart();
        retStatus = true;
    }
    return retStatus;
}
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	bf 90       	pop	r11
    190e:	08 95       	ret

00001910 <I2C_EVENT_SEND_RESTART>:
    return I2C_STATE_SEND_ADR_WRITE;
}

static i2c_event_states_t I2C_EVENT_SEND_RESTART(void)
{
    TWI_StartSend();
    1910:	0e 94 ac 0b 	call	0x1758	; 0x1758 <TWI_StartSend>
    return I2C_EVENT_SEND_START_READ();
    1914:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <I2C_EVENT_SEND_START_READ>
}
    1918:	08 95       	ret

0000191a <I2C_EVENT_SEND_STOP>:
}

static inline void TWI_SendStop(void)
{
    //Clear Start Bit
    TWCR |= ((1 << TWSTO) | (1 << TWINT) | (1 << TWEN));
    191a:	ec eb       	ldi	r30, 0xBC	; 188
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	84 69       	ori	r24, 0x94	; 148
    1922:	80 83       	st	Z, r24
}

static i2c_event_states_t I2C_EVENT_SEND_STOP(void)
{
    TWI_SendStop();
    TWI_Close();
    1924:	0e 94 b2 0b 	call	0x1764	; 0x1764 <TWI_Close>
    return I2C_STATE_IDLE;
}
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	08 95       	ret

0000192c <I2C_EVENT_ADDRESS_NACK>:

static i2c_event_states_t I2C_EVENT_ADDRESS_NACK(void)
{
    twi_Status.errorState = I2C_ERROR_FAIL;
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <twi_Status+0xb>
    
	return I2C_EVENT_SEND_STOP();
    1932:	0e 94 8d 0c 	call	0x191a	; 0x191a <I2C_EVENT_SEND_STOP>
}
    1936:	08 95       	ret

00001938 <I2C_EVENT_RX_ACK>:
	return I2C_STATE_TX_ACK;
}

static i2c_event_states_t I2C_EVENT_RX_ACK(void)
{
    if (twi_Status.readLength == 1)
    1938:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <twi_Status+0x8>
    193c:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <twi_Status+0x9>
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	31 f4       	brne	.+12     	; 0x1950 <I2C_EVENT_RX_ACK+0x18>
    TWCR &= ~(1 << TWEA);
}

static inline void TWI_HostSendAck(void)
{
    TWCR &= ~(1 << TWEA);
    1944:	ec eb       	ldi	r30, 0xBC	; 188
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8f 7b       	andi	r24, 0xBF	; 191
    194c:	80 83       	st	Z, r24
    194e:	05 c0       	rjmp	.+10     	; 0x195a <I2C_EVENT_RX_ACK+0x22>
}

static inline void TWI_HostSendNack(void)
{
    TWCR |= (1 << TWEA);
    1950:	ec eb       	ldi	r30, 0xBC	; 188
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	80 64       	ori	r24, 0x40	; 64
    1958:	80 83       	st	Z, r24
        TWI_HostSendAck();
    else
        TWI_HostSendNack();

	return I2C_STATE_RX;
}
    195a:	84 e0       	ldi	r24, 0x04	; 4
    195c:	08 95       	ret

0000195e <I2C_EVENT_TX_ACK>:

static i2c_event_states_t I2C_EVENT_TX_ACK(void)
{
	
    // Check if SLA+W received NACK
	if (!((TWI_GetStatus() == 0x18)))
    195e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    1962:	88 31       	cpi	r24, 0x18	; 24
    1964:	19 f0       	breq	.+6      	; 0x196c <I2C_EVENT_TX_ACK+0xe>
		return I2C_EVENT_ADDRESS_NACK();
    1966:	0e 94 96 0c 	call	0x192c	; 0x192c <I2C_EVENT_ADDRESS_NACK>
    196a:	08 95       	ret
	
        
	return I2C_STATE_TX;
    196c:	83 e0       	ldi	r24, 0x03	; 3
}
    196e:	08 95       	ret

00001970 <I2C_EVENT_NACK_STOP>:
}

static inline void TWI_SendStop(void)
{
    //Clear Start Bit
    TWCR |= ((1 << TWSTO) | (1 << TWINT) | (1 << TWEN));
    1970:	ec eb       	ldi	r30, 0xBC	; 188
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	84 69       	ori	r24, 0x94	; 148
    1978:	80 83       	st	Z, r24

static i2c_event_states_t I2C_EVENT_NACK_STOP(void)
{
	TWI_SendStop();
	return I2C_STATE_IDLE;
}
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	08 95       	ret

0000197e <I2C_EVENT_NACK_RESTART>:

static i2c_event_states_t I2C_EVENT_NACK_RESTART(void)
{
	TWI_StartSend();
    197e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <TWI_StartSend>
	return I2C_EVENT_SEND_START_READ();
    1982:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <I2C_EVENT_SEND_START_READ>
}
    1986:	08 95       	ret

00001988 <I2C_EVENT_BUS_ERROR>:
}

static inline void TWI_ResetBus(void)
{
    //Set Clear Buffer Flag
    TWCR = ((1 << TWSTO) | (1 << TWINT));
    1988:	80 e9       	ldi	r24, 0x90	; 144
    198a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
}

static i2c_event_states_t I2C_EVENT_BUS_ERROR(void)
{
    TWI_ResetBus();
    twi_Status.busy = false;
    198e:	e1 eb       	ldi	r30, 0xB1	; 177
    1990:	f7 e0       	ldi	r31, 0x07	; 7
    1992:	10 82       	st	Z, r1
    twi_Status.errorState = I2C_ERROR_FAIL;
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	83 87       	std	Z+11, r24	; 0x0b
    return I2C_EVENT_RESET();
    1998:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <I2C_EVENT_RESET>
}
    199c:	08 95       	ret

0000199e <TWI_GetRxData>:

////////////////////////////////////////////register access////////////////////////////////////////

static uint8_t TWI_GetRxData(void)
{
    return TWDR;
    199e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
    19a2:	08 95       	ret

000019a4 <I2C_EVENT_RX>:
        }
	}
}

static i2c_event_states_t I2C_EVENT_RX(void)
{
    19a4:	0f 93       	push	r16
    19a6:	1f 93       	push	r17
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
	//TWSR was sitting at 0xff for some reason
	//This waits for that to be done
	//includes the mask in TWI_GetStatus
	while(TWI_GetStatus() == 0xf8);{
    19ac:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    19b0:	88 3f       	cpi	r24, 0xF8	; 248
    19b2:	e1 f3       	breq	.-8      	; 0x19ac <I2C_EVENT_RX+0x8>
		asm("nop");
    19b4:	00 00       	nop
	}
	
	if ((TWI_GetStatus() != 0x50) && (TWI_GetStatus() != 0x58))
    19b6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    19ba:	80 35       	cpi	r24, 0x50	; 80
    19bc:	39 f0       	breq	.+14     	; 0x19cc <I2C_EVENT_RX+0x28>
    19be:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    19c2:	88 35       	cpi	r24, 0x58	; 88
    19c4:	19 f0       	breq	.+6      	; 0x19cc <I2C_EVENT_RX+0x28>
	{
		return I2C_EVENT_RESET();
    19c6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <I2C_EVENT_RESET>
    19ca:	31 c0       	rjmp	.+98     	; 0x1a2e <I2C_EVENT_RX+0x8a>
	}

	if (--twi_Status.readLength) 
    19cc:	e1 eb       	ldi	r30, 0xB1	; 177
    19ce:	f7 e0       	ldi	r31, 0x07	; 7
    19d0:	80 85       	ldd	r24, Z+8	; 0x08
    19d2:	91 85       	ldd	r25, Z+9	; 0x09
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	91 87       	std	Z+9, r25	; 0x09
    19d8:	80 87       	std	Z+8, r24	; 0x08
    19da:	89 2b       	or	r24, r25
    19dc:	a1 f0       	breq	.+40     	; 0x1a06 <I2C_EVENT_RX+0x62>
    {
		*twi_Status.readPtr = TWI_GetRxData();
    19de:	ef 01       	movw	r28, r30
    19e0:	06 81       	ldd	r16, Z+6	; 0x06
    19e2:	17 81       	ldd	r17, Z+7	; 0x07
    19e4:	0e 94 cf 0c 	call	0x199e	; 0x199e <TWI_GetRxData>
    19e8:	f8 01       	movw	r30, r16
    19ea:	80 83       	st	Z, r24
		twi_Status.readPtr++;
    19ec:	8e 81       	ldd	r24, Y+6	; 0x06
    19ee:	9f 81       	ldd	r25, Y+7	; 0x07
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	9f 83       	std	Y+7, r25	; 0x07
    19f4:	8e 83       	std	Y+6, r24	; 0x06
    TWCR &= ~(1 << TWIE);
}

static inline void TWI_ClearInterrupts(void)
{
    TWCR |= (1 << TWINT);
    19f6:	ec eb       	ldi	r30, 0xBC	; 188
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	80 68       	ori	r24, 0x80	; 128
    19fe:	80 83       	st	Z, r24
    {
		*twi_Status.readPtr = TWI_GetRxData();
		twi_Status.readPtr++;
		// Clearing INT flag starts operation
	    TWI_ClearInterrupts();
		return I2C_EVENT_RX();
    1a00:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <I2C_EVENT_RX>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <I2C_EVENT_RX+0x8a>
	} 
    else 
    {
		*twi_Status.readPtr = TWI_GetRxData();
    1a06:	c1 eb       	ldi	r28, 0xB1	; 177
    1a08:	d7 e0       	ldi	r29, 0x07	; 7
    1a0a:	0e 81       	ldd	r16, Y+6	; 0x06
    1a0c:	1f 81       	ldd	r17, Y+7	; 0x07
    1a0e:	0e 94 cf 0c 	call	0x199e	; 0x199e <TWI_GetRxData>
    1a12:	f8 01       	movw	r30, r16
    1a14:	80 83       	st	Z, r24
		twi_Status.readPtr++;
    1a16:	8e 81       	ldd	r24, Y+6	; 0x06
    1a18:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	9f 83       	std	Y+7, r25	; 0x07
    1a1e:	8e 83       	std	Y+6, r24	; 0x06
    TWCR &= ~(1 << TWEA);
}

static inline void TWI_HostSendNack(void)
{
    TWCR |= (1 << TWEA);
    1a20:	ec eb       	ldi	r30, 0xBC	; 188
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	80 64       	ori	r24, 0x40	; 64
    1a28:	80 83       	st	Z, r24
    else 
    {
		*twi_Status.readPtr = TWI_GetRxData();
		twi_Status.readPtr++;
		TWI_HostSendNack();
        return I2C_EVENT_SEND_STOP();
    1a2a:	0e 94 8d 0c 	call	0x191a	; 0x191a <I2C_EVENT_SEND_STOP>
	}
}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	08 95       	ret

00001a38 <TWI_SendTxData>:
    return TWDR;
}

static void TWI_SendTxData(uint8_t data)
{
    TWDR = data;
    1a38:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1a3c:	08 95       	ret

00001a3e <I2C_EVENT_TX>:
	return I2C_EVENT_SEND_START_READ();
}

static i2c_event_states_t I2C_EVENT_TX(void)
{
    if (((TWI_GetStatus() == 0x30) || (TWI_GetStatus() == 0x48) || (TWI_GetStatus() == 0x20))) // Slave replied with NACK
    1a3e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    1a42:	80 33       	cpi	r24, 0x30	; 48
    1a44:	41 f0       	breq	.+16     	; 0x1a56 <I2C_EVENT_TX+0x18>
    1a46:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    1a4a:	88 34       	cpi	r24, 0x48	; 72
    1a4c:	21 f0       	breq	.+8      	; 0x1a56 <I2C_EVENT_TX+0x18>
    1a4e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    1a52:	80 32       	cpi	r24, 0x20	; 32
    1a54:	19 f4       	brne	.+6      	; 0x1a5c <I2C_EVENT_TX+0x1e>
	{

		return I2C_EVENT_SEND_STOP();
    1a56:	0e 94 8d 0c 	call	0x191a	; 0x191a <I2C_EVENT_SEND_STOP>
    1a5a:	08 95       	ret
	} 
    else
    {
        if((twi_Status.writeLength)--)
    1a5c:	e1 eb       	ldi	r30, 0xB1	; 177
    1a5e:	f7 e0       	ldi	r31, 0x07	; 7
    1a60:	84 81       	ldd	r24, Z+4	; 0x04
    1a62:	95 81       	ldd	r25, Z+5	; 0x05
    1a64:	9c 01       	movw	r18, r24
    1a66:	21 50       	subi	r18, 0x01	; 1
    1a68:	31 09       	sbc	r19, r1
    1a6a:	35 83       	std	Z+5, r19	; 0x05
    1a6c:	24 83       	std	Z+4, r18	; 0x04
    1a6e:	89 2b       	or	r24, r25
    1a70:	a1 f0       	breq	.+40     	; 0x1a9a <I2C_EVENT_TX+0x5c>
        {
            TWI_SendTxData(*twi_Status.writePtr++);
    1a72:	df 01       	movw	r26, r30
    1a74:	02 80       	ldd	r0, Z+2	; 0x02
    1a76:	f3 81       	ldd	r31, Z+3	; 0x03
    1a78:	e0 2d       	mov	r30, r0
    1a7a:	cf 01       	movw	r24, r30
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	13 96       	adiw	r26, 0x03	; 3
    1a80:	9c 93       	st	X, r25
    1a82:	8e 93       	st	-X, r24
    1a84:	12 97       	sbiw	r26, 0x02	; 2
    1a86:	80 81       	ld	r24, Z
    1a88:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <TWI_SendTxData>
    TWCR &= ~(1 << TWIE);
}

static inline void TWI_ClearInterrupts(void)
{
    TWCR |= (1 << TWINT);
    1a8c:	ec eb       	ldi	r30, 0xBC	; 188
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	80 68       	ori	r24, 0x80	; 128
    1a94:	80 83       	st	Z, r24
        if((twi_Status.writeLength)--)
        {
            TWI_SendTxData(*twi_Status.writePtr++);
            // Clearing INT flag starts operation
            TWI_ClearInterrupts();
            return I2C_STATE_TX;
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	08 95       	ret
        }
        else
        {
            if(twi_Status.switchToRead) 
    1a9a:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <twi_Status+0xa>
    1a9e:	88 23       	and	r24, r24
    1aa0:	29 f0       	breq	.+10     	; 0x1aac <I2C_EVENT_TX+0x6e>
            {
                twi_Status.switchToRead = false;
    1aa2:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <twi_Status+0xa>
                return I2C_EVENT_SEND_START_READ();
    1aa6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <I2C_EVENT_SEND_START_READ>
    1aaa:	08 95       	ret
            }
            else
                return I2C_EVENT_SEND_STOP();
    1aac:	0e 94 8d 0c 	call	0x191a	; 0x191a <I2C_EVENT_SEND_STOP>
        }
	}
}
    1ab0:	08 95       	ret

00001ab2 <I2C_EVENT_SEND_ADR_WRITE>:
}

static i2c_event_states_t I2C_EVENT_SEND_ADR_WRITE(void)
{
    // Check if START or REPSTART was successfully sent
	if (!(((TWI_GetStatus() == 0x08) || (TWI_GetStatus() == 0x10))))
    1ab2:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    1ab6:	88 30       	cpi	r24, 0x08	; 8
    1ab8:	39 f0       	breq	.+14     	; 0x1ac8 <I2C_EVENT_SEND_ADR_WRITE+0x16>
    1aba:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    1abe:	80 31       	cpi	r24, 0x10	; 16
    1ac0:	19 f0       	breq	.+6      	; 0x1ac8 <I2C_EVENT_SEND_ADR_WRITE+0x16>
		return I2C_EVENT_RESET();
    1ac2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <I2C_EVENT_RESET>
    1ac6:	08 95       	ret

	TWI_SendTxData(twi_Status.address << 1);
    1ac8:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <twi_Status+0x1>
    1acc:	88 0f       	add	r24, r24
    1ace:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <TWI_SendTxData>
}

static inline void TWI_ClearStart(void)
{
    //Clear TWI Start
    TWCR  &= ~(1 << TWSTA);
    1ad2:	ec eb       	ldi	r30, 0xBC	; 188
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8f 7d       	andi	r24, 0xDF	; 223
    1ada:	80 83       	st	Z, r24
    TWCR &= ~(1 << TWIE);
}

static inline void TWI_ClearInterrupts(void)
{
    TWCR |= (1 << TWINT);
    1adc:	80 81       	ld	r24, Z
    1ade:	80 68       	ori	r24, 0x80	; 128
    1ae0:	80 83       	st	Z, r24
	TWI_ClearStart();

	// Clearing INT flag starts operation
	TWI_ClearInterrupts();

	return I2C_STATE_TX_ACK;
    1ae2:	8a e0       	ldi	r24, 0x0A	; 10
}
    1ae4:	08 95       	ret

00001ae6 <I2C_EVENT_SEND_ADR_READ>:
}

static i2c_event_states_t I2C_EVENT_SEND_ADR_READ(void)
{
    // Check if START or REPSTART was successfully sent
	if (!(((TWI_GetStatus() == 0x08) || (TWI_GetStatus() == 0x10))))
    1ae6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    1aea:	88 30       	cpi	r24, 0x08	; 8
    1aec:	39 f0       	breq	.+14     	; 0x1afc <I2C_EVENT_SEND_ADR_READ+0x16>
    1aee:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <TWI_GetStatus>
    1af2:	80 31       	cpi	r24, 0x10	; 16
    1af4:	19 f0       	breq	.+6      	; 0x1afc <I2C_EVENT_SEND_ADR_READ+0x16>
		return I2C_EVENT_RESET();
    1af6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <I2C_EVENT_RESET>
    1afa:	08 95       	ret

	TWI_SendTxData((twi_Status.address << 1) | 1);
    1afc:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <twi_Status+0x1>
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	81 60       	ori	r24, 0x01	; 1
    1b08:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <TWI_SendTxData>
}

static inline void TWI_ClearStart(void)
{
    //Clear TWI Start
    TWCR  &= ~(1 << TWSTA);
    1b0c:	ec eb       	ldi	r30, 0xBC	; 188
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	8f 7d       	andi	r24, 0xDF	; 223
    1b14:	80 83       	st	Z, r24
    TWCR &= ~(1 << TWIE);
}

static inline void TWI_ClearInterrupts(void)
{
    TWCR |= (1 << TWINT);
    1b16:	80 81       	ld	r24, Z
    1b18:	80 68       	ori	r24, 0x80	; 128
    1b1a:	80 83       	st	Z, r24
	TWI_ClearStart();

	// Clearing INT flag starts operation
	TWI_ClearInterrupts();

	return I2C_STATE_RX_ACK;
    1b1c:	89 e0       	ldi	r24, 0x09	; 9
}
    1b1e:	08 95       	ret

00001b20 <triggermeasure>:
	
	twi_write(ahtObj->address, ahtObj->send, 3);
	_delay_ms(10);
}

void triggermeasure(ahtObj_t* ahtObj){
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	ec 01       	movw	r28, r24
	ahtObj->send[0] = 0xAC;
    1b2a:	8c ea       	ldi	r24, 0xAC	; 172
    1b2c:	89 83       	std	Y+1, r24	; 0x01
	ahtObj->send[1] = 0x33;
    1b2e:	83 e3       	ldi	r24, 0x33	; 51
    1b30:	8a 83       	std	Y+2, r24	; 0x02
	ahtObj->send[2] = 0x00;
    1b32:	1b 82       	std	Y+3, r1	; 0x03
	
	twi_write(ahtObj->address, ahtObj->send, 3);
    1b34:	be 01       	movw	r22, r28
    1b36:	6f 5f       	subi	r22, 0xFF	; 255
    1b38:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3a:	43 e0       	ldi	r20, 0x03	; 3
    1b3c:	88 81       	ld	r24, Y
    1b3e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <twi_write>
    1b42:	2f ef       	ldi	r18, 0xFF	; 255
    1b44:	83 ef       	ldi	r24, 0xF3	; 243
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	21 50       	subi	r18, 0x01	; 1
    1b4a:	80 40       	sbci	r24, 0x00	; 0
    1b4c:	90 40       	sbci	r25, 0x00	; 0
    1b4e:	e1 f7       	brne	.-8      	; 0x1b48 <triggermeasure+0x28>
    1b50:	00 c0       	rjmp	.+0      	; 0x1b52 <triggermeasure+0x32>
    1b52:	00 00       	nop
	
	// Change to freeRTOS
	_delay_ms(80);
	
	twi_read(ahtObj->address, ahtObj->rec, 7);
    1b54:	be 01       	movw	r22, r28
    1b56:	6b 5f       	subi	r22, 0xFB	; 251
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	47 e0       	ldi	r20, 0x07	; 7
    1b5c:	88 81       	ld	r24, Y
    1b5e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <twi_read>
	
	ahtObj->humd_raw = (uint32_t)(((uint32_t)ahtObj->rec[1] << 12) | (ahtObj->rec[2] << 4) | (ahtObj->rec[3] >> 4));
    1b62:	6e 81       	ldd	r22, Y+6	; 0x06
    1b64:	86 2f       	mov	r24, r22
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a0 e0       	ldi	r26, 0x00	; 0
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	07 2e       	mov	r0, r23
    1b6e:	7c e0       	ldi	r23, 0x0C	; 12
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	aa 1f       	adc	r26, r26
    1b76:	bb 1f       	adc	r27, r27
    1b78:	7a 95       	dec	r23
    1b7a:	d1 f7       	brne	.-12     	; 0x1b70 <triggermeasure+0x50>
    1b7c:	70 2d       	mov	r23, r0
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	20 e1       	ldi	r18, 0x10	; 16
    1b82:	62 9f       	mul	r22, r18
    1b84:	b0 01       	movw	r22, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	ab 01       	movw	r20, r22
    1b8a:	77 0f       	add	r23, r23
    1b8c:	66 0b       	sbc	r22, r22
    1b8e:	77 0b       	sbc	r23, r23
    1b90:	84 2b       	or	r24, r20
    1b92:	95 2b       	or	r25, r21
    1b94:	a6 2b       	or	r26, r22
    1b96:	b7 2b       	or	r27, r23
    1b98:	28 85       	ldd	r18, Y+8	; 0x08
    1b9a:	22 95       	swap	r18
    1b9c:	2f 70       	andi	r18, 0x0F	; 15
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	62 2b       	or	r22, r18
    1ba4:	6c 87       	std	Y+12, r22	; 0x0c
    1ba6:	7d 87       	std	Y+13, r23	; 0x0d
    1ba8:	8e 87       	std	Y+14, r24	; 0x0e
    1baa:	9f 87       	std	Y+15, r25	; 0x0f
	ahtObj->humd_float = ((float)ahtObj->humd_raw/(1048576))*100;
    1bac:	0e 94 b0 10 	call	0x2160	; 0x2160 <__floatunsisf>
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	55 e3       	ldi	r21, 0x35	; 53
    1bb8:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulsf3>
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	48 ec       	ldi	r20, 0xC8	; 200
    1bc2:	52 e4       	ldi	r21, 0x42	; 66
    1bc4:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulsf3>
    1bc8:	e6 2f       	mov	r30, r22
    1bca:	f7 2f       	mov	r31, r23
    1bcc:	46 2f       	mov	r20, r22
    1bce:	57 2f       	mov	r21, r23
    1bd0:	68 2f       	mov	r22, r24
    1bd2:	79 2f       	mov	r23, r25
    1bd4:	4c 8b       	std	Y+20, r20	; 0x14
    1bd6:	5d 8b       	std	Y+21, r21	; 0x15
    1bd8:	6e 8b       	std	Y+22, r22	; 0x16
    1bda:	7f 8b       	std	Y+23, r23	; 0x17
	sprintf(ahtObj->humd_str, "%3.2f", ahtObj->humd_float);
    1bdc:	9e 01       	movw	r18, r28
    1bde:	24 5e       	subi	r18, 0xE4	; 228
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	9f 93       	push	r25
    1be4:	8f 93       	push	r24
    1be6:	ff 93       	push	r31
    1be8:	ef 93       	push	r30
    1bea:	00 e6       	ldi	r16, 0x60	; 96
    1bec:	11 e0       	ldi	r17, 0x01	; 1
    1bee:	1f 93       	push	r17
    1bf0:	0f 93       	push	r16
    1bf2:	3f 93       	push	r19
    1bf4:	2f 93       	push	r18
    1bf6:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <sprintf>
	
	ahtObj->temp_raw = ( (0x000f0000 & ((uint32_t)ahtObj->rec[3]<<16)) | ((uint32_t)ahtObj->rec[4] << 8)  | (ahtObj->rec[5]) );
    1bfa:	68 85       	ldd	r22, Y+8	; 0x08
    1bfc:	86 2f       	mov	r24, r22
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a0 e0       	ldi	r26, 0x00	; 0
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	dc 01       	movw	r26, r24
    1c06:	99 27       	eor	r25, r25
    1c08:	88 27       	eor	r24, r24
    1c0a:	ac 01       	movw	r20, r24
    1c0c:	bd 01       	movw	r22, r26
    1c0e:	44 27       	eor	r20, r20
    1c10:	55 27       	eor	r21, r21
    1c12:	6f 70       	andi	r22, 0x0F	; 15
    1c14:	77 27       	eor	r23, r23
    1c16:	89 85       	ldd	r24, Y+9	; 0x09
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a0 e0       	ldi	r26, 0x00	; 0
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	ba 2f       	mov	r27, r26
    1c20:	a9 2f       	mov	r26, r25
    1c22:	98 2f       	mov	r25, r24
    1c24:	88 27       	eor	r24, r24
    1c26:	84 2b       	or	r24, r20
    1c28:	95 2b       	or	r25, r21
    1c2a:	a6 2b       	or	r26, r22
    1c2c:	b7 2b       	or	r27, r23
    1c2e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	62 2b       	or	r22, r18
    1c36:	68 8b       	std	Y+16, r22	; 0x10
    1c38:	79 8b       	std	Y+17, r23	; 0x11
    1c3a:	8a 8b       	std	Y+18, r24	; 0x12
    1c3c:	9b 8b       	std	Y+19, r25	; 0x13
	ahtObj->temp_float = ((((float)ahtObj->temp_raw/(1048576))*360)-58);
    1c3e:	0e 94 b0 10 	call	0x2160	; 0x2160 <__floatunsisf>
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e8       	ldi	r20, 0x80	; 128
    1c48:	55 e3       	ldi	r21, 0x35	; 53
    1c4a:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulsf3>
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	44 eb       	ldi	r20, 0xB4	; 180
    1c54:	53 e4       	ldi	r21, 0x43	; 67
    1c56:	0e 94 3e 11 	call	0x227c	; 0x227c <__mulsf3>
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	48 e6       	ldi	r20, 0x68	; 104
    1c60:	52 e4       	ldi	r21, 0x42	; 66
    1c62:	0e 94 43 10 	call	0x2086	; 0x2086 <__subsf3>
    1c66:	26 2f       	mov	r18, r22
    1c68:	37 2f       	mov	r19, r23
    1c6a:	46 2f       	mov	r20, r22
    1c6c:	57 2f       	mov	r21, r23
    1c6e:	68 2f       	mov	r22, r24
    1c70:	79 2f       	mov	r23, r25
    1c72:	48 8f       	std	Y+24, r20	; 0x18
    1c74:	59 8f       	std	Y+25, r21	; 0x19
    1c76:	6a 8f       	std	Y+26, r22	; 0x1a
    1c78:	7b 8f       	std	Y+27, r23	; 0x1b
	sprintf(ahtObj->temp_str, "%3.2f", ahtObj->temp_float);
    1c7a:	a2 96       	adiw	r28, 0x22	; 34
    1c7c:	9f 93       	push	r25
    1c7e:	8f 93       	push	r24
    1c80:	3f 93       	push	r19
    1c82:	2f 93       	push	r18
    1c84:	1f 93       	push	r17
    1c86:	0f 93       	push	r16
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <sprintf>
}
    1c90:	8d b7       	in	r24, 0x3d	; 61
    1c92:	9e b7       	in	r25, 0x3e	; 62
    1c94:	40 96       	adiw	r24, 0x10	; 16
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	9e bf       	out	0x3e, r25	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	8d bf       	out	0x3d, r24	; 61
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	08 95       	ret

00001caa <AHT_init>:
#include <stdio.h>

void triggermeasure(ahtObj_t* ahtObj);

	
void AHT_init(ahtObj_t * ahtObj, uint8_t address){
    1caa:	fc 01       	movw	r30, r24
    1cac:	86 2f       	mov	r24, r22
	ahtObj->getdata = triggermeasure; 
    1cae:	20 e9       	ldi	r18, 0x90	; 144
    1cb0:	3d e0       	ldi	r19, 0x0D	; 13
    1cb2:	31 a7       	std	Z+41, r19	; 0x29
    1cb4:	20 a7       	std	Z+40, r18	; 0x28
	ahtObj->address = address;
    1cb6:	60 83       	st	Z, r22
	
	ahtObj->send[0] = 0xBE;
    1cb8:	9e eb       	ldi	r25, 0xBE	; 190
    1cba:	91 83       	std	Z+1, r25	; 0x01
	ahtObj->send[1] = 0x08;
    1cbc:	98 e0       	ldi	r25, 0x08	; 8
    1cbe:	92 83       	std	Z+2, r25	; 0x02
	ahtObj->send[2] = 0x00;
    1cc0:	13 82       	std	Z+3, r1	; 0x03
	
	twi_write(ahtObj->address, ahtObj->send, 3);
    1cc2:	bf 01       	movw	r22, r30
    1cc4:	6f 5f       	subi	r22, 0xFF	; 255
    1cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc8:	43 e0       	ldi	r20, 0x03	; 3
    1cca:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <twi_write>
    1cce:	8f e1       	ldi	r24, 0x1F	; 31
    1cd0:	9e e4       	ldi	r25, 0x4E	; 78
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <AHT_init+0x28>
    1cd6:	00 c0       	rjmp	.+0      	; 0x1cd8 <AHT_init+0x2e>
    1cd8:	00 00       	nop
    1cda:	08 95       	ret

00001cdc <convert>:
	lcdObj->databus  = ((1 << DISP_CURS_MODES) | (dispOn << DISP_CURS_MODES_DISP_ON) | (cursOn << DISP_CURS_MODES_CURS_ON) | (cursBlinkOn <<  DISP_CURS_MODES_CURS_BLINK ));
}

//cursor and display shift func
void prep_cursor_shift_data(LCDObj_t * lcdObj, bool cursorLeft0Right1, bool displayDont0Do1){
	lcdObj->databus |= ((1 << SHIFT_MODES) | (cursorLeft0Right1 << SHIFT_MODE_CURS));
    1cdc:	fc 01       	movw	r30, r24
    1cde:	31 81       	ldd	r19, Z+1	; 0x01
    1ce0:	41 85       	ldd	r20, Z+9	; 0x09
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	44 0f       	add	r20, r20
    1ce6:	55 1f       	adc	r21, r21
    1ce8:	44 0f       	add	r20, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	44 0f       	add	r20, r20
    1cee:	55 1f       	adc	r21, r21
    1cf0:	23 2f       	mov	r18, r19
    1cf2:	20 7f       	andi	r18, 0xF0	; 240
    1cf4:	24 2b       	or	r18, r20
    1cf6:	97 81       	ldd	r25, Z+7	; 0x07
    1cf8:	89 2f       	mov	r24, r25
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	90 85       	ldd	r25, Z+8	; 0x08
    1d02:	52 2f       	mov	r21, r18
    1d04:	54 60       	ori	r21, 0x04	; 4
    1d06:	58 2b       	or	r21, r24
    1d08:	59 2b       	or	r21, r25
    1d0a:	52 83       	std	Z+2, r21	; 0x02
    1d0c:	28 2b       	or	r18, r24
    1d0e:	29 2b       	or	r18, r25
    1d10:	23 83       	std	Z+3, r18	; 0x03
    1d12:	60 e1       	ldi	r22, 0x10	; 16
    1d14:	36 9f       	mul	r19, r22
    1d16:	90 01       	movw	r18, r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	24 2b       	or	r18, r20
    1d1c:	32 2f       	mov	r19, r18
    1d1e:	34 60       	ori	r19, 0x04	; 4
    1d20:	38 2b       	or	r19, r24
    1d22:	39 2b       	or	r19, r25
    1d24:	34 83       	std	Z+4, r19	; 0x04
    1d26:	82 2b       	or	r24, r18
    1d28:	89 2b       	or	r24, r25
    1d2a:	85 83       	std	Z+5, r24	; 0x05
    1d2c:	11 82       	std	Z+1, r1	; 0x01
    1d2e:	17 82       	std	Z+7, r1	; 0x07
    1d30:	10 86       	std	Z+8, r1	; 0x08
    1d32:	16 82       	std	Z+6, r1	; 0x06
    1d34:	08 95       	ret

00001d36 <prep_disp_clear_data>:
    1d36:	21 e0       	ldi	r18, 0x01	; 1
    1d38:	fc 01       	movw	r30, r24
    1d3a:	21 83       	std	Z+1, r18	; 0x01
    1d3c:	08 95       	ret

00001d3e <clearDisplay>:
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	ec 01       	movw	r28, r24
    1d44:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <prep_disp_clear_data>
    1d48:	ce 01       	movw	r24, r28
    1d4a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <convert>
    1d4e:	be 01       	movw	r22, r28
    1d50:	6e 5f       	subi	r22, 0xFE	; 254
    1d52:	7f 4f       	sbci	r23, 0xFF	; 255
    1d54:	44 e0       	ldi	r20, 0x04	; 4
    1d56:	88 81       	ld	r24, Y
    1d58:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <twi_write>
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	08 95       	ret

00001d62 <prep_disp_curs_mode_data>:
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	66 0f       	add	r22, r22
    1d66:	77 1f       	adc	r23, r23
    1d68:	66 0f       	add	r22, r22
    1d6a:	77 1f       	adc	r23, r23
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	44 0f       	add	r20, r20
    1d70:	55 1f       	adc	r21, r21
    1d72:	68 60       	ori	r22, 0x08	; 8
    1d74:	46 2b       	or	r20, r22
    1d76:	42 2b       	or	r20, r18
    1d78:	fc 01       	movw	r30, r24
    1d7a:	41 83       	std	Z+1, r20	; 0x01
    1d7c:	08 95       	ret

00001d7e <prep_func_mode_data>:
}

//func modes
void prep_func_mode_data(LCDObj_t * lcdObj, bool func4Bit0_8Bit1, bool func1Line0_2Line1, bool font8Bit0_10Bit1){
	lcdObj->databus = ((1 << FUNC_MODE) | (func4Bit0_8Bit1 << FUNC_MODE_4_BIT) | (func1Line0_2Line1 << FUNC_MODE_DISPLAY_LINES) | (font8Bit0_10Bit1 << FUNC_MODE_FONT ));
    1d7e:	30 e1       	ldi	r19, 0x10	; 16
    1d80:	63 9f       	mul	r22, r19
    1d82:	b0 01       	movw	r22, r0
    1d84:	11 24       	eor	r1, r1
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	44 0f       	add	r20, r20
    1d8a:	55 1f       	adc	r21, r21
    1d8c:	44 0f       	add	r20, r20
    1d8e:	55 1f       	adc	r21, r21
    1d90:	44 0f       	add	r20, r20
    1d92:	55 1f       	adc	r21, r21
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	22 0f       	add	r18, r18
    1d98:	33 1f       	adc	r19, r19
    1d9a:	22 0f       	add	r18, r18
    1d9c:	33 1f       	adc	r19, r19
    1d9e:	60 62       	ori	r22, 0x20	; 32
    1da0:	46 2b       	or	r20, r22
    1da2:	24 2b       	or	r18, r20
    1da4:	fc 01       	movw	r30, r24
    1da6:	21 83       	std	Z+1, r18	; 0x01
    1da8:	08 95       	ret

00001daa <LCD_Init>:
 *--------------------------------------------------------------*/
/**
 * /brief Brief description
 *		  Long Description
 */
void LCD_Init(LCDObj_t* lcdObj, uint8_t address7Bit, bool powerOn){
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	ec 01       	movw	r28, r24
	
	//find a way to make recover from an unknown state
	lcdObj->light = true;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	89 87       	std	Y+9, r24	; 0x09
	lcdObj->i2c_address = address7Bit;
    1db8:	68 83       	st	Y, r22
	
	//make this where twi.h does not need to be imported
	lcdObj->writeStringAt = writeStringAt;
    1dba:	84 e2       	ldi	r24, 0x24	; 36
    1dbc:	9f e0       	ldi	r25, 0x0F	; 15
    1dbe:	9b 87       	std	Y+11, r25	; 0x0b
    1dc0:	8a 87       	std	Y+10, r24	; 0x0a
	lcdObj->clear = clearDisplay;
    1dc2:	8f e9       	ldi	r24, 0x9F	; 159
    1dc4:	9e e0       	ldi	r25, 0x0E	; 14
    1dc6:	9d 87       	std	Y+13, r25	; 0x0d
    1dc8:	8c 87       	std	Y+12, r24	; 0x0c
	
	// first power up setting
	if(powerOn == true){
    1dca:	44 23       	and	r20, r20
    1dcc:	81 f0       	breq	.+32     	; 0x1dee <LCD_Init+0x44>
		prep_func_mode_data(lcdObj, 0, 1, 0);
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <prep_func_mode_data>
		convert(lcdObj);
    1dda:	ce 01       	movw	r24, r28
    1ddc:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <convert>
		twi_write(lcdObj->i2c_address, lcdObj->data , 2);
    1de0:	42 e0       	ldi	r20, 0x02	; 2
    1de2:	be 01       	movw	r22, r28
    1de4:	6e 5f       	subi	r22, 0xFE	; 254
    1de6:	7f 4f       	sbci	r23, 0xFF	; 255
    1de8:	88 81       	ld	r24, Y
    1dea:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <twi_write>
	}
	
	
	//4 bit , 2 line, 8 font
	prep_func_mode_data(lcdObj, 0 ,1 ,0);
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	ce 01       	movw	r24, r28
    1df6:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <prep_func_mode_data>
	convert(lcdObj);
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <convert>
	twi_write(lcdObj->i2c_address,lcdObj->data, 4);
    1e00:	8e 01       	movw	r16, r28
    1e02:	0e 5f       	subi	r16, 0xFE	; 254
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	44 e0       	ldi	r20, 0x04	; 4
    1e08:	b8 01       	movw	r22, r16
    1e0a:	88 81       	ld	r24, Y
    1e0c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <twi_write>

	
	//display on, cursor on, flash on
	prep_disp_curs_mode_data(lcdObj, 1, 0, 0);
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	ce 01       	movw	r24, r28
    1e18:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <prep_disp_curs_mode_data>
	convert(lcdObj);
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <convert>
	twi_write(lcdObj->i2c_address, lcdObj->data , 4);
    1e22:	44 e0       	ldi	r20, 0x04	; 4
    1e24:	b8 01       	movw	r22, r16
    1e26:	88 81       	ld	r24, Y
    1e28:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <twi_write>

}
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	08 95       	ret

00001e36 <prep_goto_ddram_data>:
	lcdObj->databus = ((1 << FUNC_MODE) | (func4Bit0_8Bit1 << FUNC_MODE_4_BIT) | (func1Line0_2Line1 << FUNC_MODE_DISPLAY_LINES) | (font8Bit0_10Bit1 << FUNC_MODE_FONT ));
}

//set ddram address to display
void prep_goto_ddram_data(LCDObj_t * lcdObj, uint8_t locaiton){
	lcdObj->databus = ((1 <<DDRAM_SET) | (locaiton));
    1e36:	60 68       	ori	r22, 0x80	; 128
    1e38:	fc 01       	movw	r30, r24
    1e3a:	61 83       	std	Z+1, r22	; 0x01
    1e3c:	08 95       	ret

00001e3e <prep_write_char_data>:
}

//write ascii char
void prep_write_char_data(LCDObj_t * lcdObj, uint8_t character){
	lcdObj->databus = character;
    1e3e:	fc 01       	movw	r30, r24
    1e40:	61 83       	std	Z+1, r22	; 0x01
	lcdObj->reg_sel = 1;
    1e42:	21 e0       	ldi	r18, 0x01	; 1
    1e44:	20 87       	std	Z+8, r18	; 0x08
    1e46:	08 95       	ret

00001e48 <writeStringAt>:

/*--------------------------------------------------------------
 * Structure Functions
 *--------------------------------------------------------------*/

void writeStringAt(LCDObj_t* lcdObj, char* string, uint8_t size, uint8_t address){
    1e48:	cf 92       	push	r12
    1e4a:	df 92       	push	r13
    1e4c:	ef 92       	push	r14
    1e4e:	ff 92       	push	r15
    1e50:	0f 93       	push	r16
    1e52:	1f 93       	push	r17
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	8c 01       	movw	r16, r24
    1e5a:	6b 01       	movw	r12, r22
    1e5c:	d4 2f       	mov	r29, r20
	// go to defined address
	prep_goto_ddram_data(lcdObj,address);
    1e5e:	62 2f       	mov	r22, r18
    1e60:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <prep_goto_ddram_data>
	convert(lcdObj);
    1e64:	c8 01       	movw	r24, r16
    1e66:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <convert>
	
	twi_write(lcdObj->i2c_address, lcdObj->data , 4);
    1e6a:	78 01       	movw	r14, r16
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	e8 0e       	add	r14, r24
    1e70:	f1 1c       	adc	r15, r1
    1e72:	44 e0       	ldi	r20, 0x04	; 4
    1e74:	b7 01       	movw	r22, r14
    1e76:	f8 01       	movw	r30, r16
    1e78:	80 81       	ld	r24, Z
    1e7a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <twi_write>
	
	//write(i2c_address, convert(,data), 4);
	for(uint8_t i = 0; i < size; i++){
    1e7e:	c0 e0       	ldi	r28, 0x00	; 0
    1e80:	11 c0       	rjmp	.+34     	; 0x1ea4 <writeStringAt+0x5c>
		prep_write_char_data(lcdObj, string[i]);
    1e82:	f6 01       	movw	r30, r12
    1e84:	ec 0f       	add	r30, r28
    1e86:	f1 1d       	adc	r31, r1
    1e88:	60 81       	ld	r22, Z
    1e8a:	c8 01       	movw	r24, r16
    1e8c:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <prep_write_char_data>
		convert(lcdObj);
    1e90:	c8 01       	movw	r24, r16
    1e92:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <convert>
		twi_write(lcdObj->i2c_address, lcdObj->data, 4);
    1e96:	44 e0       	ldi	r20, 0x04	; 4
    1e98:	b7 01       	movw	r22, r14
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 81       	ld	r24, Z
    1e9e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <twi_write>
	convert(lcdObj);
	
	twi_write(lcdObj->i2c_address, lcdObj->data , 4);
	
	//write(i2c_address, convert(,data), 4);
	for(uint8_t i = 0; i < size; i++){
    1ea2:	cf 5f       	subi	r28, 0xFF	; 255
    1ea4:	cd 17       	cp	r28, r29
    1ea6:	68 f3       	brcs	.-38     	; 0x1e82 <writeStringAt+0x3a>
		prep_write_char_data(lcdObj, string[i]);
		convert(lcdObj);
		twi_write(lcdObj->i2c_address, lcdObj->data, 4);
	}
}
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	df 90       	pop	r13
    1eb6:	cf 90       	pop	r12
    1eb8:	08 95       	ret

00001eba <twi_write>:



void twi_write(uint8_t address7Bit, uint8_t * data_ptr, uint8_t size){
	
	if(I2C0_Host.Write(address7Bit, data_ptr,size)){
    1eba:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <I2C0_Host+0x4>
    1ebe:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <I2C0_Host+0x5>
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	09 95       	icall
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	06 c0       	rjmp	.+12     	; 0x1ed6 <twi_write+0x1c>
    1eca:	08 95       	ret
		while(I2C0_Host.IsBusy()){
			I2C0_Host.Tasks();
    1ecc:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <I2C0_Host+0x12>
    1ed0:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <I2C0_Host+0x13>
    1ed4:	09 95       	icall


void twi_write(uint8_t address7Bit, uint8_t * data_ptr, uint8_t size){
	
	if(I2C0_Host.Write(address7Bit, data_ptr,size)){
		while(I2C0_Host.IsBusy()){
    1ed6:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <I2C0_Host+0xe>
    1eda:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <I2C0_Host+0xf>
    1ede:	09 95       	icall
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	f4 cf       	rjmp	.-24     	; 0x1ecc <twi_write+0x12>
			I2C0_Host.Tasks();
		}
		i2c_host_error_t i2c_error = I2C0_Host.ErrorGet();
    1ee4:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <I2C0_Host+0xc>
    1ee8:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <I2C0_Host+0xd>
    1eec:	09 95       	icall
		if (i2c_error == I2C_ERROR_NONE){
    1eee:	81 11       	cpse	r24, r1
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <twi_write+0x3c>
			//success
			asm("nop");
    1ef2:	00 00       	nop
    1ef4:	08 95       	ret
			}else{
			//error
			asm("nop");
    1ef6:	00 00       	nop
    1ef8:	08 95       	ret

00001efa <twi_read>:
	
}

void twi_read( uint8_t address7Bit, uint8_t * data_ptr, uint8_t size){
	
	if(I2C0_Host.Read(address7Bit, data_ptr,size)){
    1efa:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <I2C0_Host+0x6>
    1efe:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <I2C0_Host+0x7>
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	09 95       	icall
    1f08:	81 11       	cpse	r24, r1
    1f0a:	06 c0       	rjmp	.+12     	; 0x1f18 <twi_read+0x1e>
    1f0c:	08 95       	ret
		while(I2C0_Host.IsBusy()){
			I2C0_Host.Tasks();
    1f0e:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <I2C0_Host+0x12>
    1f12:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <I2C0_Host+0x13>
    1f16:	09 95       	icall
}

void twi_read( uint8_t address7Bit, uint8_t * data_ptr, uint8_t size){
	
	if(I2C0_Host.Read(address7Bit, data_ptr,size)){
		while(I2C0_Host.IsBusy()){
    1f18:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <I2C0_Host+0xe>
    1f1c:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <I2C0_Host+0xf>
    1f20:	09 95       	icall
    1f22:	81 11       	cpse	r24, r1
    1f24:	f4 cf       	rjmp	.-24     	; 0x1f0e <twi_read+0x14>
			I2C0_Host.Tasks();
			//_delay_ms(5000);
		}
		i2c_host_error_t i2c_error = I2C0_Host.ErrorGet();
    1f26:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <I2C0_Host+0xc>
    1f2a:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <I2C0_Host+0xd>
    1f2e:	09 95       	icall
		if (i2c_error == I2C_ERROR_NONE){
    1f30:	81 11       	cpse	r24, r1
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <twi_read+0x3e>
			//success
			asm("nop");
    1f34:	00 00       	nop
    1f36:	08 95       	ret
			}else{
			//error
			asm("nop");
    1f38:	00 00       	nop
    1f3a:	08 95       	ret

00001f3c <displayArgsInit>:





void displayArgsInit(displayTaskArgs_t* args){
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	ec 01       	movw	r28, r24
	args->inToDisplay = xQueueCreate(10, sizeof(displayQueueItem_t));
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	65 e0       	ldi	r22, 0x05	; 5
    1f46:	8a e0       	ldi	r24, 0x0A	; 10
    1f48:	0e 94 0c 04 	call	0x818	; 0x818 <xQueueGenericCreate>
    1f4c:	99 83       	std	Y+1, r25	; 0x01
    1f4e:	88 83       	st	Y, r24
	
}
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	08 95       	ret

00001f56 <mainMenuInit>:

void mainMenuInit(menuItem_t* unit_item, menuItem_t* testt_item){
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	8c 01       	movw	r16, r24
    1f60:	eb 01       	movw	r28, r22
	setNextPrevPointers(unit_item, testt_item);
    1f62:	0e 94 39 10 	call	0x2072	; 0x2072 <setNextPrevPointers>
	setNextPrevPointers(testt_item, unit_item);
    1f66:	b8 01       	movw	r22, r16
    1f68:	ce 01       	movw	r24, r28
    1f6a:	0e 94 39 10 	call	0x2072	; 0x2072 <setNextPrevPointers>
	
}
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	0f 91       	pop	r16
    1f76:	08 95       	ret

00001f78 <displayTask>:


void displayTask(displayTaskArgs_t* task_args){
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	a2 97       	sbiw	r28, 0x22	; 34
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	8c 01       	movw	r16, r24
	/* init */	
	// LCD interface
	LCDObj_t lcd_obj;
	LCD_Init(&lcd_obj,LCD_ADDRESS, 1);
    1f8e:	41 e0       	ldi	r20, 0x01	; 1
    1f90:	67 e2       	ldi	r22, 0x27	; 39
    1f92:	ce 01       	movw	r24, r28
    1f94:	01 96       	adiw	r24, 0x01	; 1
    1f96:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <LCD_Init>
	
	// Menu Items
	static menuItem_t * active_menu_pointer;
	static menuItem_t unit_temp_item;
	static menuItem_t test_item;
	mainMenuInit(&unit_temp_item, &test_item);
    1f9a:	65 ec       	ldi	r22, 0xC5	; 197
    1f9c:	77 e0       	ldi	r23, 0x07	; 7
    1f9e:	8e e1       	ldi	r24, 0x1E	; 30
    1fa0:	98 e0       	ldi	r25, 0x08	; 8
    1fa2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <mainMenuInit>
	strcpy(unit_temp_item.line1, "Kevin Smith");
    1fa6:	8c e0       	ldi	r24, 0x0C	; 12
    1fa8:	e6 e6       	ldi	r30, 0x66	; 102
    1faa:	f1 e0       	ldi	r31, 0x01	; 1
    1fac:	a0 e2       	ldi	r26, 0x20	; 32
    1fae:	b8 e0       	ldi	r27, 0x08	; 8
    1fb0:	01 90       	ld	r0, Z+
    1fb2:	0d 92       	st	X+, r0
    1fb4:	8a 95       	dec	r24
    1fb6:	e1 f7       	brne	.-8      	; 0x1fb0 <displayTask+0x38>
	active_menu_pointer = &unit_temp_item;
    1fb8:	8e e1       	ldi	r24, 0x1E	; 30
    1fba:	98 e0       	ldi	r25, 0x08	; 8
    1fbc:	90 93 c4 07 	sts	0x07C4, r25	; 0x8007c4 <active_menu_pointer.2491+0x1>
    1fc0:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <active_menu_pointer.2491>
	char buffer[20];
	
	/* Display RT Task */
	while(1){
		/* Check queue update data */
		if(xQueueReceive(task_args->inToDisplay, &queue_local_buffer, (TickType_t)1) == pdTRUE){
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	50 e0       	ldi	r21, 0x00	; 0
    1fca:	6e eb       	ldi	r22, 0xBE	; 190
    1fcc:	77 e0       	ldi	r23, 0x07	; 7
    1fce:	f8 01       	movw	r30, r16
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <xQueueGenericReceive>
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	c9 f5       	brne	.+114    	; 0x204e <displayTask+0xd6>
			switch(queue_local_buffer.type){
    1fdc:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <queue_local_buffer.2494>
    1fe0:	81 11       	cpse	r24, r1
    1fe2:	35 c0       	rjmp	.+106    	; 0x204e <displayTask+0xd6>
				case UNIT_TEMP:
					sprintf(buffer, "%3.2f", queue_local_buffer.data.fvalue);
    1fe4:	ee eb       	ldi	r30, 0xBE	; 190
    1fe6:	f7 e0       	ldi	r31, 0x07	; 7
    1fe8:	81 81       	ldd	r24, Z+1	; 0x01
    1fea:	92 81       	ldd	r25, Z+2	; 0x02
    1fec:	23 81       	ldd	r18, Z+3	; 0x03
    1fee:	34 81       	ldd	r19, Z+4	; 0x04
    1ff0:	3f 93       	push	r19
    1ff2:	2f 93       	push	r18
    1ff4:	9f 93       	push	r25
    1ff6:	8f 93       	push	r24
    1ff8:	80 e6       	ldi	r24, 0x60	; 96
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	9f 93       	push	r25
    1ffe:	8f 93       	push	r24
    2000:	7e 01       	movw	r14, r28
    2002:	ff e0       	ldi	r31, 0x0F	; 15
    2004:	ef 0e       	add	r14, r31
    2006:	f1 1c       	adc	r15, r1
    2008:	ff 92       	push	r15
    200a:	ef 92       	push	r14
    200c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <sprintf>
					strncpy(unit_temp_item.line1+sizeof(unit_temp_item.line1)-strlen(buffer), buffer, strlen(buffer));
    2010:	f7 01       	movw	r30, r14
    2012:	01 90       	ld	r0, Z+
    2014:	00 20       	and	r0, r0
    2016:	e9 f7       	brne	.-6      	; 0x2012 <displayTask+0x9a>
    2018:	31 97       	sbiw	r30, 0x01	; 1
    201a:	af 01       	movw	r20, r30
    201c:	4e 19       	sub	r20, r14
    201e:	5f 09       	sbc	r21, r15
    2020:	84 e1       	ldi	r24, 0x14	; 20
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	84 1b       	sub	r24, r20
    2026:	95 0b       	sbc	r25, r21
    2028:	b7 01       	movw	r22, r14
    202a:	80 5e       	subi	r24, 0xE0	; 224
    202c:	97 4f       	sbci	r25, 0xF7	; 247
    202e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <strncpy>
					strncpy(unit_temp_item.line1, "Curnt Temp:", strlen("Curnt Temp:"));
    2032:	8b e0       	ldi	r24, 0x0B	; 11
    2034:	e0 e2       	ldi	r30, 0x20	; 32
    2036:	f1 e0       	ldi	r31, 0x01	; 1
    2038:	a0 e2       	ldi	r26, 0x20	; 32
    203a:	b8 e0       	ldi	r27, 0x08	; 8
    203c:	01 90       	ld	r0, Z+
    203e:	0d 92       	st	X+, r0
    2040:	8a 95       	dec	r24
    2042:	e1 f7       	brne	.-8      	; 0x203c <displayTask+0xc4>
				break;
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
		}
		else{
			//error or empty
		}

		lcd_obj.writeStringAt(&lcd_obj, active_menu_pointer->line1, 20, 0x00);
    204e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2050:	fc 85       	ldd	r31, Y+12	; 0x0c
    2052:	60 91 c3 07 	lds	r22, 0x07C3	; 0x8007c3 <active_menu_pointer.2491>
    2056:	70 91 c4 07 	lds	r23, 0x07C4	; 0x8007c4 <active_menu_pointer.2491+0x1>
    205a:	6e 5f       	subi	r22, 0xFE	; 254
    205c:	7f 4f       	sbci	r23, 0xFF	; 255
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	44 e1       	ldi	r20, 0x14	; 20
    2062:	ce 01       	movw	r24, r28
    2064:	01 96       	adiw	r24, 0x01	; 1
    2066:	09 95       	icall
		vTaskDelay(300);
    2068:	8c e2       	ldi	r24, 0x2C	; 44
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	0e 94 be 08 	call	0x117c	; 0x117c <vTaskDelay>
		

		
	}
    2070:	a9 cf       	rjmp	.-174    	; 0x1fc4 <displayTask+0x4c>

00002072 <setNextPrevPointers>:
void setFunction(menuItem_t* item, void(*function)(void*args)){
	item->menuFunction = function;
}

void setNextPrevPointers(menuItem_t *first, menuItem_t *secound){
	first->next = secound;
    2072:	fc 01       	movw	r30, r24
    2074:	e9 5a       	subi	r30, 0xA9	; 169
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	71 83       	std	Z+1, r23	; 0x01
    207a:	60 83       	st	Z, r22
	secound->prev = first;
    207c:	fb 01       	movw	r30, r22
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
    2082:	08 95       	ret

00002084 <vApplicationIdleHook>:

#include "options.h"
#include "idle.h"


void vApplicationIdleHook(void){
    2084:	08 95       	ret

00002086 <__subsf3>:
    2086:	50 58       	subi	r21, 0x80	; 128

00002088 <__addsf3>:
    2088:	bb 27       	eor	r27, r27
    208a:	aa 27       	eor	r26, r26
    208c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__addsf3x>
    2090:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__fp_round>
    2094:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__fp_pscA>
    2098:	38 f0       	brcs	.+14     	; 0x20a8 <__addsf3+0x20>
    209a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__fp_pscB>
    209e:	20 f0       	brcs	.+8      	; 0x20a8 <__addsf3+0x20>
    20a0:	39 f4       	brne	.+14     	; 0x20b0 <__addsf3+0x28>
    20a2:	9f 3f       	cpi	r25, 0xFF	; 255
    20a4:	19 f4       	brne	.+6      	; 0x20ac <__addsf3+0x24>
    20a6:	26 f4       	brtc	.+8      	; 0x20b0 <__addsf3+0x28>
    20a8:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__fp_nan>
    20ac:	0e f4       	brtc	.+2      	; 0x20b0 <__addsf3+0x28>
    20ae:	e0 95       	com	r30
    20b0:	e7 fb       	bst	r30, 7
    20b2:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__fp_inf>

000020b6 <__addsf3x>:
    20b6:	e9 2f       	mov	r30, r25
    20b8:	0e 94 15 11 	call	0x222a	; 0x222a <__fp_split3>
    20bc:	58 f3       	brcs	.-42     	; 0x2094 <__addsf3+0xc>
    20be:	ba 17       	cp	r27, r26
    20c0:	62 07       	cpc	r22, r18
    20c2:	73 07       	cpc	r23, r19
    20c4:	84 07       	cpc	r24, r20
    20c6:	95 07       	cpc	r25, r21
    20c8:	20 f0       	brcs	.+8      	; 0x20d2 <__addsf3x+0x1c>
    20ca:	79 f4       	brne	.+30     	; 0x20ea <__addsf3x+0x34>
    20cc:	a6 f5       	brtc	.+104    	; 0x2136 <__addsf3x+0x80>
    20ce:	0c 94 37 11 	jmp	0x226e	; 0x226e <__fp_zero>
    20d2:	0e f4       	brtc	.+2      	; 0x20d6 <__addsf3x+0x20>
    20d4:	e0 95       	com	r30
    20d6:	0b 2e       	mov	r0, r27
    20d8:	ba 2f       	mov	r27, r26
    20da:	a0 2d       	mov	r26, r0
    20dc:	0b 01       	movw	r0, r22
    20de:	b9 01       	movw	r22, r18
    20e0:	90 01       	movw	r18, r0
    20e2:	0c 01       	movw	r0, r24
    20e4:	ca 01       	movw	r24, r20
    20e6:	a0 01       	movw	r20, r0
    20e8:	11 24       	eor	r1, r1
    20ea:	ff 27       	eor	r31, r31
    20ec:	59 1b       	sub	r21, r25
    20ee:	99 f0       	breq	.+38     	; 0x2116 <__addsf3x+0x60>
    20f0:	59 3f       	cpi	r21, 0xF9	; 249
    20f2:	50 f4       	brcc	.+20     	; 0x2108 <__addsf3x+0x52>
    20f4:	50 3e       	cpi	r21, 0xE0	; 224
    20f6:	68 f1       	brcs	.+90     	; 0x2152 <__addsf3x+0x9c>
    20f8:	1a 16       	cp	r1, r26
    20fa:	f0 40       	sbci	r31, 0x00	; 0
    20fc:	a2 2f       	mov	r26, r18
    20fe:	23 2f       	mov	r18, r19
    2100:	34 2f       	mov	r19, r20
    2102:	44 27       	eor	r20, r20
    2104:	58 5f       	subi	r21, 0xF8	; 248
    2106:	f3 cf       	rjmp	.-26     	; 0x20ee <__addsf3x+0x38>
    2108:	46 95       	lsr	r20
    210a:	37 95       	ror	r19
    210c:	27 95       	ror	r18
    210e:	a7 95       	ror	r26
    2110:	f0 40       	sbci	r31, 0x00	; 0
    2112:	53 95       	inc	r21
    2114:	c9 f7       	brne	.-14     	; 0x2108 <__addsf3x+0x52>
    2116:	7e f4       	brtc	.+30     	; 0x2136 <__addsf3x+0x80>
    2118:	1f 16       	cp	r1, r31
    211a:	ba 0b       	sbc	r27, r26
    211c:	62 0b       	sbc	r22, r18
    211e:	73 0b       	sbc	r23, r19
    2120:	84 0b       	sbc	r24, r20
    2122:	ba f0       	brmi	.+46     	; 0x2152 <__addsf3x+0x9c>
    2124:	91 50       	subi	r25, 0x01	; 1
    2126:	a1 f0       	breq	.+40     	; 0x2150 <__addsf3x+0x9a>
    2128:	ff 0f       	add	r31, r31
    212a:	bb 1f       	adc	r27, r27
    212c:	66 1f       	adc	r22, r22
    212e:	77 1f       	adc	r23, r23
    2130:	88 1f       	adc	r24, r24
    2132:	c2 f7       	brpl	.-16     	; 0x2124 <__addsf3x+0x6e>
    2134:	0e c0       	rjmp	.+28     	; 0x2152 <__addsf3x+0x9c>
    2136:	ba 0f       	add	r27, r26
    2138:	62 1f       	adc	r22, r18
    213a:	73 1f       	adc	r23, r19
    213c:	84 1f       	adc	r24, r20
    213e:	48 f4       	brcc	.+18     	; 0x2152 <__addsf3x+0x9c>
    2140:	87 95       	ror	r24
    2142:	77 95       	ror	r23
    2144:	67 95       	ror	r22
    2146:	b7 95       	ror	r27
    2148:	f7 95       	ror	r31
    214a:	9e 3f       	cpi	r25, 0xFE	; 254
    214c:	08 f0       	brcs	.+2      	; 0x2150 <__addsf3x+0x9a>
    214e:	b0 cf       	rjmp	.-160    	; 0x20b0 <__addsf3+0x28>
    2150:	93 95       	inc	r25
    2152:	88 0f       	add	r24, r24
    2154:	08 f0       	brcs	.+2      	; 0x2158 <__addsf3x+0xa2>
    2156:	99 27       	eor	r25, r25
    2158:	ee 0f       	add	r30, r30
    215a:	97 95       	ror	r25
    215c:	87 95       	ror	r24
    215e:	08 95       	ret

00002160 <__floatunsisf>:
    2160:	e8 94       	clt
    2162:	09 c0       	rjmp	.+18     	; 0x2176 <__floatsisf+0x12>

00002164 <__floatsisf>:
    2164:	97 fb       	bst	r25, 7
    2166:	3e f4       	brtc	.+14     	; 0x2176 <__floatsisf+0x12>
    2168:	90 95       	com	r25
    216a:	80 95       	com	r24
    216c:	70 95       	com	r23
    216e:	61 95       	neg	r22
    2170:	7f 4f       	sbci	r23, 0xFF	; 255
    2172:	8f 4f       	sbci	r24, 0xFF	; 255
    2174:	9f 4f       	sbci	r25, 0xFF	; 255
    2176:	99 23       	and	r25, r25
    2178:	a9 f0       	breq	.+42     	; 0x21a4 <__floatsisf+0x40>
    217a:	f9 2f       	mov	r31, r25
    217c:	96 e9       	ldi	r25, 0x96	; 150
    217e:	bb 27       	eor	r27, r27
    2180:	93 95       	inc	r25
    2182:	f6 95       	lsr	r31
    2184:	87 95       	ror	r24
    2186:	77 95       	ror	r23
    2188:	67 95       	ror	r22
    218a:	b7 95       	ror	r27
    218c:	f1 11       	cpse	r31, r1
    218e:	f8 cf       	rjmp	.-16     	; 0x2180 <__floatsisf+0x1c>
    2190:	fa f4       	brpl	.+62     	; 0x21d0 <__floatsisf+0x6c>
    2192:	bb 0f       	add	r27, r27
    2194:	11 f4       	brne	.+4      	; 0x219a <__floatsisf+0x36>
    2196:	60 ff       	sbrs	r22, 0
    2198:	1b c0       	rjmp	.+54     	; 0x21d0 <__floatsisf+0x6c>
    219a:	6f 5f       	subi	r22, 0xFF	; 255
    219c:	7f 4f       	sbci	r23, 0xFF	; 255
    219e:	8f 4f       	sbci	r24, 0xFF	; 255
    21a0:	9f 4f       	sbci	r25, 0xFF	; 255
    21a2:	16 c0       	rjmp	.+44     	; 0x21d0 <__floatsisf+0x6c>
    21a4:	88 23       	and	r24, r24
    21a6:	11 f0       	breq	.+4      	; 0x21ac <__floatsisf+0x48>
    21a8:	96 e9       	ldi	r25, 0x96	; 150
    21aa:	11 c0       	rjmp	.+34     	; 0x21ce <__floatsisf+0x6a>
    21ac:	77 23       	and	r23, r23
    21ae:	21 f0       	breq	.+8      	; 0x21b8 <__floatsisf+0x54>
    21b0:	9e e8       	ldi	r25, 0x8E	; 142
    21b2:	87 2f       	mov	r24, r23
    21b4:	76 2f       	mov	r23, r22
    21b6:	05 c0       	rjmp	.+10     	; 0x21c2 <__floatsisf+0x5e>
    21b8:	66 23       	and	r22, r22
    21ba:	71 f0       	breq	.+28     	; 0x21d8 <__floatsisf+0x74>
    21bc:	96 e8       	ldi	r25, 0x86	; 134
    21be:	86 2f       	mov	r24, r22
    21c0:	70 e0       	ldi	r23, 0x00	; 0
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	2a f0       	brmi	.+10     	; 0x21d0 <__floatsisf+0x6c>
    21c6:	9a 95       	dec	r25
    21c8:	66 0f       	add	r22, r22
    21ca:	77 1f       	adc	r23, r23
    21cc:	88 1f       	adc	r24, r24
    21ce:	da f7       	brpl	.-10     	; 0x21c6 <__floatsisf+0x62>
    21d0:	88 0f       	add	r24, r24
    21d2:	96 95       	lsr	r25
    21d4:	87 95       	ror	r24
    21d6:	97 f9       	bld	r25, 7
    21d8:	08 95       	ret

000021da <__fp_inf>:
    21da:	97 f9       	bld	r25, 7
    21dc:	9f 67       	ori	r25, 0x7F	; 127
    21de:	80 e8       	ldi	r24, 0x80	; 128
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	08 95       	ret

000021e6 <__fp_nan>:
    21e6:	9f ef       	ldi	r25, 0xFF	; 255
    21e8:	80 ec       	ldi	r24, 0xC0	; 192
    21ea:	08 95       	ret

000021ec <__fp_pscA>:
    21ec:	00 24       	eor	r0, r0
    21ee:	0a 94       	dec	r0
    21f0:	16 16       	cp	r1, r22
    21f2:	17 06       	cpc	r1, r23
    21f4:	18 06       	cpc	r1, r24
    21f6:	09 06       	cpc	r0, r25
    21f8:	08 95       	ret

000021fa <__fp_pscB>:
    21fa:	00 24       	eor	r0, r0
    21fc:	0a 94       	dec	r0
    21fe:	12 16       	cp	r1, r18
    2200:	13 06       	cpc	r1, r19
    2202:	14 06       	cpc	r1, r20
    2204:	05 06       	cpc	r0, r21
    2206:	08 95       	ret

00002208 <__fp_round>:
    2208:	09 2e       	mov	r0, r25
    220a:	03 94       	inc	r0
    220c:	00 0c       	add	r0, r0
    220e:	11 f4       	brne	.+4      	; 0x2214 <__fp_round+0xc>
    2210:	88 23       	and	r24, r24
    2212:	52 f0       	brmi	.+20     	; 0x2228 <__fp_round+0x20>
    2214:	bb 0f       	add	r27, r27
    2216:	40 f4       	brcc	.+16     	; 0x2228 <__fp_round+0x20>
    2218:	bf 2b       	or	r27, r31
    221a:	11 f4       	brne	.+4      	; 0x2220 <__fp_round+0x18>
    221c:	60 ff       	sbrs	r22, 0
    221e:	04 c0       	rjmp	.+8      	; 0x2228 <__fp_round+0x20>
    2220:	6f 5f       	subi	r22, 0xFF	; 255
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	8f 4f       	sbci	r24, 0xFF	; 255
    2226:	9f 4f       	sbci	r25, 0xFF	; 255
    2228:	08 95       	ret

0000222a <__fp_split3>:
    222a:	57 fd       	sbrc	r21, 7
    222c:	90 58       	subi	r25, 0x80	; 128
    222e:	44 0f       	add	r20, r20
    2230:	55 1f       	adc	r21, r21
    2232:	59 f0       	breq	.+22     	; 0x224a <__fp_splitA+0x10>
    2234:	5f 3f       	cpi	r21, 0xFF	; 255
    2236:	71 f0       	breq	.+28     	; 0x2254 <__fp_splitA+0x1a>
    2238:	47 95       	ror	r20

0000223a <__fp_splitA>:
    223a:	88 0f       	add	r24, r24
    223c:	97 fb       	bst	r25, 7
    223e:	99 1f       	adc	r25, r25
    2240:	61 f0       	breq	.+24     	; 0x225a <__fp_splitA+0x20>
    2242:	9f 3f       	cpi	r25, 0xFF	; 255
    2244:	79 f0       	breq	.+30     	; 0x2264 <__fp_splitA+0x2a>
    2246:	87 95       	ror	r24
    2248:	08 95       	ret
    224a:	12 16       	cp	r1, r18
    224c:	13 06       	cpc	r1, r19
    224e:	14 06       	cpc	r1, r20
    2250:	55 1f       	adc	r21, r21
    2252:	f2 cf       	rjmp	.-28     	; 0x2238 <__fp_split3+0xe>
    2254:	46 95       	lsr	r20
    2256:	f1 df       	rcall	.-30     	; 0x223a <__fp_splitA>
    2258:	08 c0       	rjmp	.+16     	; 0x226a <__fp_splitA+0x30>
    225a:	16 16       	cp	r1, r22
    225c:	17 06       	cpc	r1, r23
    225e:	18 06       	cpc	r1, r24
    2260:	99 1f       	adc	r25, r25
    2262:	f1 cf       	rjmp	.-30     	; 0x2246 <__fp_splitA+0xc>
    2264:	86 95       	lsr	r24
    2266:	71 05       	cpc	r23, r1
    2268:	61 05       	cpc	r22, r1
    226a:	08 94       	sec
    226c:	08 95       	ret

0000226e <__fp_zero>:
    226e:	e8 94       	clt

00002270 <__fp_szero>:
    2270:	bb 27       	eor	r27, r27
    2272:	66 27       	eor	r22, r22
    2274:	77 27       	eor	r23, r23
    2276:	cb 01       	movw	r24, r22
    2278:	97 f9       	bld	r25, 7
    227a:	08 95       	ret

0000227c <__mulsf3>:
    227c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__mulsf3x>
    2280:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__fp_round>
    2284:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__fp_pscA>
    2288:	38 f0       	brcs	.+14     	; 0x2298 <__mulsf3+0x1c>
    228a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__fp_pscB>
    228e:	20 f0       	brcs	.+8      	; 0x2298 <__mulsf3+0x1c>
    2290:	95 23       	and	r25, r21
    2292:	11 f0       	breq	.+4      	; 0x2298 <__mulsf3+0x1c>
    2294:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__fp_inf>
    2298:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__fp_nan>
    229c:	11 24       	eor	r1, r1
    229e:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_szero>

000022a2 <__mulsf3x>:
    22a2:	0e 94 15 11 	call	0x222a	; 0x222a <__fp_split3>
    22a6:	70 f3       	brcs	.-36     	; 0x2284 <__mulsf3+0x8>

000022a8 <__mulsf3_pse>:
    22a8:	95 9f       	mul	r25, r21
    22aa:	c1 f3       	breq	.-16     	; 0x229c <__mulsf3+0x20>
    22ac:	95 0f       	add	r25, r21
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	55 1f       	adc	r21, r21
    22b2:	62 9f       	mul	r22, r18
    22b4:	f0 01       	movw	r30, r0
    22b6:	72 9f       	mul	r23, r18
    22b8:	bb 27       	eor	r27, r27
    22ba:	f0 0d       	add	r31, r0
    22bc:	b1 1d       	adc	r27, r1
    22be:	63 9f       	mul	r22, r19
    22c0:	aa 27       	eor	r26, r26
    22c2:	f0 0d       	add	r31, r0
    22c4:	b1 1d       	adc	r27, r1
    22c6:	aa 1f       	adc	r26, r26
    22c8:	64 9f       	mul	r22, r20
    22ca:	66 27       	eor	r22, r22
    22cc:	b0 0d       	add	r27, r0
    22ce:	a1 1d       	adc	r26, r1
    22d0:	66 1f       	adc	r22, r22
    22d2:	82 9f       	mul	r24, r18
    22d4:	22 27       	eor	r18, r18
    22d6:	b0 0d       	add	r27, r0
    22d8:	a1 1d       	adc	r26, r1
    22da:	62 1f       	adc	r22, r18
    22dc:	73 9f       	mul	r23, r19
    22de:	b0 0d       	add	r27, r0
    22e0:	a1 1d       	adc	r26, r1
    22e2:	62 1f       	adc	r22, r18
    22e4:	83 9f       	mul	r24, r19
    22e6:	a0 0d       	add	r26, r0
    22e8:	61 1d       	adc	r22, r1
    22ea:	22 1f       	adc	r18, r18
    22ec:	74 9f       	mul	r23, r20
    22ee:	33 27       	eor	r19, r19
    22f0:	a0 0d       	add	r26, r0
    22f2:	61 1d       	adc	r22, r1
    22f4:	23 1f       	adc	r18, r19
    22f6:	84 9f       	mul	r24, r20
    22f8:	60 0d       	add	r22, r0
    22fa:	21 1d       	adc	r18, r1
    22fc:	82 2f       	mov	r24, r18
    22fe:	76 2f       	mov	r23, r22
    2300:	6a 2f       	mov	r22, r26
    2302:	11 24       	eor	r1, r1
    2304:	9f 57       	subi	r25, 0x7F	; 127
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	9a f0       	brmi	.+38     	; 0x2330 <__mulsf3_pse+0x88>
    230a:	f1 f0       	breq	.+60     	; 0x2348 <__mulsf3_pse+0xa0>
    230c:	88 23       	and	r24, r24
    230e:	4a f0       	brmi	.+18     	; 0x2322 <__mulsf3_pse+0x7a>
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	bb 1f       	adc	r27, r27
    2316:	66 1f       	adc	r22, r22
    2318:	77 1f       	adc	r23, r23
    231a:	88 1f       	adc	r24, r24
    231c:	91 50       	subi	r25, 0x01	; 1
    231e:	50 40       	sbci	r21, 0x00	; 0
    2320:	a9 f7       	brne	.-22     	; 0x230c <__mulsf3_pse+0x64>
    2322:	9e 3f       	cpi	r25, 0xFE	; 254
    2324:	51 05       	cpc	r21, r1
    2326:	80 f0       	brcs	.+32     	; 0x2348 <__mulsf3_pse+0xa0>
    2328:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__fp_inf>
    232c:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_szero>
    2330:	5f 3f       	cpi	r21, 0xFF	; 255
    2332:	e4 f3       	brlt	.-8      	; 0x232c <__mulsf3_pse+0x84>
    2334:	98 3e       	cpi	r25, 0xE8	; 232
    2336:	d4 f3       	brlt	.-12     	; 0x232c <__mulsf3_pse+0x84>
    2338:	86 95       	lsr	r24
    233a:	77 95       	ror	r23
    233c:	67 95       	ror	r22
    233e:	b7 95       	ror	r27
    2340:	f7 95       	ror	r31
    2342:	e7 95       	ror	r30
    2344:	9f 5f       	subi	r25, 0xFF	; 255
    2346:	c1 f7       	brne	.-16     	; 0x2338 <__mulsf3_pse+0x90>
    2348:	fe 2b       	or	r31, r30
    234a:	88 0f       	add	r24, r24
    234c:	91 1d       	adc	r25, r1
    234e:	96 95       	lsr	r25
    2350:	87 95       	ror	r24
    2352:	97 f9       	bld	r25, 7
    2354:	08 95       	ret

00002356 <vfprintf>:
    2356:	a0 e1       	ldi	r26, 0x10	; 16
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e1 eb       	ldi	r30, 0xB1	; 177
    235c:	f1 e1       	ldi	r31, 0x11	; 17
    235e:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__prologue_saves__>
    2362:	7c 01       	movw	r14, r24
    2364:	1b 01       	movw	r2, r22
    2366:	6a 01       	movw	r12, r20
    2368:	fc 01       	movw	r30, r24
    236a:	17 82       	std	Z+7, r1	; 0x07
    236c:	16 82       	std	Z+6, r1	; 0x06
    236e:	83 81       	ldd	r24, Z+3	; 0x03
    2370:	81 ff       	sbrs	r24, 1
    2372:	44 c3       	rjmp	.+1672   	; 0x29fc <vfprintf+0x6a6>
    2374:	9e 01       	movw	r18, r28
    2376:	2f 5f       	subi	r18, 0xFF	; 255
    2378:	3f 4f       	sbci	r19, 0xFF	; 255
    237a:	39 01       	movw	r6, r18
    237c:	f7 01       	movw	r30, r14
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	f1 01       	movw	r30, r2
    2382:	93 fd       	sbrc	r25, 3
    2384:	85 91       	lpm	r24, Z+
    2386:	93 ff       	sbrs	r25, 3
    2388:	81 91       	ld	r24, Z+
    238a:	1f 01       	movw	r2, r30
    238c:	88 23       	and	r24, r24
    238e:	09 f4       	brne	.+2      	; 0x2392 <vfprintf+0x3c>
    2390:	31 c3       	rjmp	.+1634   	; 0x29f4 <vfprintf+0x69e>
    2392:	85 32       	cpi	r24, 0x25	; 37
    2394:	39 f4       	brne	.+14     	; 0x23a4 <vfprintf+0x4e>
    2396:	93 fd       	sbrc	r25, 3
    2398:	85 91       	lpm	r24, Z+
    239a:	93 ff       	sbrs	r25, 3
    239c:	81 91       	ld	r24, Z+
    239e:	1f 01       	movw	r2, r30
    23a0:	85 32       	cpi	r24, 0x25	; 37
    23a2:	39 f4       	brne	.+14     	; 0x23b2 <vfprintf+0x5c>
    23a4:	b7 01       	movw	r22, r14
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    23ac:	56 01       	movw	r10, r12
    23ae:	65 01       	movw	r12, r10
    23b0:	e5 cf       	rjmp	.-54     	; 0x237c <vfprintf+0x26>
    23b2:	10 e0       	ldi	r17, 0x00	; 0
    23b4:	51 2c       	mov	r5, r1
    23b6:	91 2c       	mov	r9, r1
    23b8:	ff e1       	ldi	r31, 0x1F	; 31
    23ba:	f9 15       	cp	r31, r9
    23bc:	d8 f0       	brcs	.+54     	; 0x23f4 <vfprintf+0x9e>
    23be:	8b 32       	cpi	r24, 0x2B	; 43
    23c0:	79 f0       	breq	.+30     	; 0x23e0 <vfprintf+0x8a>
    23c2:	38 f4       	brcc	.+14     	; 0x23d2 <vfprintf+0x7c>
    23c4:	80 32       	cpi	r24, 0x20	; 32
    23c6:	79 f0       	breq	.+30     	; 0x23e6 <vfprintf+0x90>
    23c8:	83 32       	cpi	r24, 0x23	; 35
    23ca:	a1 f4       	brne	.+40     	; 0x23f4 <vfprintf+0x9e>
    23cc:	f9 2d       	mov	r31, r9
    23ce:	f0 61       	ori	r31, 0x10	; 16
    23d0:	2e c0       	rjmp	.+92     	; 0x242e <vfprintf+0xd8>
    23d2:	8d 32       	cpi	r24, 0x2D	; 45
    23d4:	61 f0       	breq	.+24     	; 0x23ee <vfprintf+0x98>
    23d6:	80 33       	cpi	r24, 0x30	; 48
    23d8:	69 f4       	brne	.+26     	; 0x23f4 <vfprintf+0x9e>
    23da:	29 2d       	mov	r18, r9
    23dc:	21 60       	ori	r18, 0x01	; 1
    23de:	2d c0       	rjmp	.+90     	; 0x243a <vfprintf+0xe4>
    23e0:	39 2d       	mov	r19, r9
    23e2:	32 60       	ori	r19, 0x02	; 2
    23e4:	93 2e       	mov	r9, r19
    23e6:	89 2d       	mov	r24, r9
    23e8:	84 60       	ori	r24, 0x04	; 4
    23ea:	98 2e       	mov	r9, r24
    23ec:	2a c0       	rjmp	.+84     	; 0x2442 <vfprintf+0xec>
    23ee:	e9 2d       	mov	r30, r9
    23f0:	e8 60       	ori	r30, 0x08	; 8
    23f2:	15 c0       	rjmp	.+42     	; 0x241e <vfprintf+0xc8>
    23f4:	97 fc       	sbrc	r9, 7
    23f6:	2d c0       	rjmp	.+90     	; 0x2452 <vfprintf+0xfc>
    23f8:	20 ed       	ldi	r18, 0xD0	; 208
    23fa:	28 0f       	add	r18, r24
    23fc:	2a 30       	cpi	r18, 0x0A	; 10
    23fe:	88 f4       	brcc	.+34     	; 0x2422 <vfprintf+0xcc>
    2400:	96 fe       	sbrs	r9, 6
    2402:	06 c0       	rjmp	.+12     	; 0x2410 <vfprintf+0xba>
    2404:	3a e0       	ldi	r19, 0x0A	; 10
    2406:	13 9f       	mul	r17, r19
    2408:	20 0d       	add	r18, r0
    240a:	11 24       	eor	r1, r1
    240c:	12 2f       	mov	r17, r18
    240e:	19 c0       	rjmp	.+50     	; 0x2442 <vfprintf+0xec>
    2410:	8a e0       	ldi	r24, 0x0A	; 10
    2412:	58 9e       	mul	r5, r24
    2414:	20 0d       	add	r18, r0
    2416:	11 24       	eor	r1, r1
    2418:	52 2e       	mov	r5, r18
    241a:	e9 2d       	mov	r30, r9
    241c:	e0 62       	ori	r30, 0x20	; 32
    241e:	9e 2e       	mov	r9, r30
    2420:	10 c0       	rjmp	.+32     	; 0x2442 <vfprintf+0xec>
    2422:	8e 32       	cpi	r24, 0x2E	; 46
    2424:	31 f4       	brne	.+12     	; 0x2432 <vfprintf+0xdc>
    2426:	96 fc       	sbrc	r9, 6
    2428:	e5 c2       	rjmp	.+1482   	; 0x29f4 <vfprintf+0x69e>
    242a:	f9 2d       	mov	r31, r9
    242c:	f0 64       	ori	r31, 0x40	; 64
    242e:	9f 2e       	mov	r9, r31
    2430:	08 c0       	rjmp	.+16     	; 0x2442 <vfprintf+0xec>
    2432:	8c 36       	cpi	r24, 0x6C	; 108
    2434:	21 f4       	brne	.+8      	; 0x243e <vfprintf+0xe8>
    2436:	29 2d       	mov	r18, r9
    2438:	20 68       	ori	r18, 0x80	; 128
    243a:	92 2e       	mov	r9, r18
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <vfprintf+0xec>
    243e:	88 36       	cpi	r24, 0x68	; 104
    2440:	41 f4       	brne	.+16     	; 0x2452 <vfprintf+0xfc>
    2442:	f1 01       	movw	r30, r2
    2444:	93 fd       	sbrc	r25, 3
    2446:	85 91       	lpm	r24, Z+
    2448:	93 ff       	sbrs	r25, 3
    244a:	81 91       	ld	r24, Z+
    244c:	1f 01       	movw	r2, r30
    244e:	81 11       	cpse	r24, r1
    2450:	b3 cf       	rjmp	.-154    	; 0x23b8 <vfprintf+0x62>
    2452:	9b eb       	ldi	r25, 0xBB	; 187
    2454:	98 0f       	add	r25, r24
    2456:	93 30       	cpi	r25, 0x03	; 3
    2458:	20 f4       	brcc	.+8      	; 0x2462 <vfprintf+0x10c>
    245a:	99 2d       	mov	r25, r9
    245c:	90 61       	ori	r25, 0x10	; 16
    245e:	80 5e       	subi	r24, 0xE0	; 224
    2460:	07 c0       	rjmp	.+14     	; 0x2470 <vfprintf+0x11a>
    2462:	9b e9       	ldi	r25, 0x9B	; 155
    2464:	98 0f       	add	r25, r24
    2466:	93 30       	cpi	r25, 0x03	; 3
    2468:	08 f0       	brcs	.+2      	; 0x246c <vfprintf+0x116>
    246a:	66 c1       	rjmp	.+716    	; 0x2738 <vfprintf+0x3e2>
    246c:	99 2d       	mov	r25, r9
    246e:	9f 7e       	andi	r25, 0xEF	; 239
    2470:	96 ff       	sbrs	r25, 6
    2472:	16 e0       	ldi	r17, 0x06	; 6
    2474:	9f 73       	andi	r25, 0x3F	; 63
    2476:	99 2e       	mov	r9, r25
    2478:	85 36       	cpi	r24, 0x65	; 101
    247a:	19 f4       	brne	.+6      	; 0x2482 <vfprintf+0x12c>
    247c:	90 64       	ori	r25, 0x40	; 64
    247e:	99 2e       	mov	r9, r25
    2480:	08 c0       	rjmp	.+16     	; 0x2492 <vfprintf+0x13c>
    2482:	86 36       	cpi	r24, 0x66	; 102
    2484:	21 f4       	brne	.+8      	; 0x248e <vfprintf+0x138>
    2486:	39 2f       	mov	r19, r25
    2488:	30 68       	ori	r19, 0x80	; 128
    248a:	93 2e       	mov	r9, r19
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <vfprintf+0x13c>
    248e:	11 11       	cpse	r17, r1
    2490:	11 50       	subi	r17, 0x01	; 1
    2492:	97 fe       	sbrs	r9, 7
    2494:	07 c0       	rjmp	.+14     	; 0x24a4 <vfprintf+0x14e>
    2496:	1c 33       	cpi	r17, 0x3C	; 60
    2498:	50 f4       	brcc	.+20     	; 0x24ae <vfprintf+0x158>
    249a:	44 24       	eor	r4, r4
    249c:	43 94       	inc	r4
    249e:	41 0e       	add	r4, r17
    24a0:	27 e0       	ldi	r18, 0x07	; 7
    24a2:	0b c0       	rjmp	.+22     	; 0x24ba <vfprintf+0x164>
    24a4:	18 30       	cpi	r17, 0x08	; 8
    24a6:	38 f0       	brcs	.+14     	; 0x24b6 <vfprintf+0x160>
    24a8:	27 e0       	ldi	r18, 0x07	; 7
    24aa:	17 e0       	ldi	r17, 0x07	; 7
    24ac:	05 c0       	rjmp	.+10     	; 0x24b8 <vfprintf+0x162>
    24ae:	27 e0       	ldi	r18, 0x07	; 7
    24b0:	9c e3       	ldi	r25, 0x3C	; 60
    24b2:	49 2e       	mov	r4, r25
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <vfprintf+0x164>
    24b6:	21 2f       	mov	r18, r17
    24b8:	41 2c       	mov	r4, r1
    24ba:	56 01       	movw	r10, r12
    24bc:	84 e0       	ldi	r24, 0x04	; 4
    24be:	a8 0e       	add	r10, r24
    24c0:	b1 1c       	adc	r11, r1
    24c2:	f6 01       	movw	r30, r12
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	04 2d       	mov	r16, r4
    24ce:	a3 01       	movw	r20, r6
    24d0:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__ftoa_engine>
    24d4:	6c 01       	movw	r12, r24
    24d6:	f9 81       	ldd	r31, Y+1	; 0x01
    24d8:	fc 87       	std	Y+12, r31	; 0x0c
    24da:	f0 ff       	sbrs	r31, 0
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <vfprintf+0x18c>
    24de:	f3 ff       	sbrs	r31, 3
    24e0:	06 c0       	rjmp	.+12     	; 0x24ee <vfprintf+0x198>
    24e2:	91 fc       	sbrc	r9, 1
    24e4:	06 c0       	rjmp	.+12     	; 0x24f2 <vfprintf+0x19c>
    24e6:	92 fe       	sbrs	r9, 2
    24e8:	06 c0       	rjmp	.+12     	; 0x24f6 <vfprintf+0x1a0>
    24ea:	00 e2       	ldi	r16, 0x20	; 32
    24ec:	05 c0       	rjmp	.+10     	; 0x24f8 <vfprintf+0x1a2>
    24ee:	0d e2       	ldi	r16, 0x2D	; 45
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <vfprintf+0x1a2>
    24f2:	0b e2       	ldi	r16, 0x2B	; 43
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <vfprintf+0x1a2>
    24f6:	00 e0       	ldi	r16, 0x00	; 0
    24f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    24fa:	8c 70       	andi	r24, 0x0C	; 12
    24fc:	19 f0       	breq	.+6      	; 0x2504 <vfprintf+0x1ae>
    24fe:	01 11       	cpse	r16, r1
    2500:	5a c2       	rjmp	.+1204   	; 0x29b6 <vfprintf+0x660>
    2502:	9b c2       	rjmp	.+1334   	; 0x2a3a <vfprintf+0x6e4>
    2504:	97 fe       	sbrs	r9, 7
    2506:	10 c0       	rjmp	.+32     	; 0x2528 <vfprintf+0x1d2>
    2508:	4c 0c       	add	r4, r12
    250a:	fc 85       	ldd	r31, Y+12	; 0x0c
    250c:	f4 ff       	sbrs	r31, 4
    250e:	04 c0       	rjmp	.+8      	; 0x2518 <vfprintf+0x1c2>
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	81 33       	cpi	r24, 0x31	; 49
    2514:	09 f4       	brne	.+2      	; 0x2518 <vfprintf+0x1c2>
    2516:	4a 94       	dec	r4
    2518:	14 14       	cp	r1, r4
    251a:	74 f5       	brge	.+92     	; 0x2578 <vfprintf+0x222>
    251c:	28 e0       	ldi	r18, 0x08	; 8
    251e:	24 15       	cp	r18, r4
    2520:	78 f5       	brcc	.+94     	; 0x2580 <vfprintf+0x22a>
    2522:	88 e0       	ldi	r24, 0x08	; 8
    2524:	48 2e       	mov	r4, r24
    2526:	2c c0       	rjmp	.+88     	; 0x2580 <vfprintf+0x22a>
    2528:	96 fc       	sbrc	r9, 6
    252a:	2a c0       	rjmp	.+84     	; 0x2580 <vfprintf+0x22a>
    252c:	81 2f       	mov	r24, r17
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	8c 15       	cp	r24, r12
    2532:	9d 05       	cpc	r25, r13
    2534:	9c f0       	brlt	.+38     	; 0x255c <vfprintf+0x206>
    2536:	3c ef       	ldi	r19, 0xFC	; 252
    2538:	c3 16       	cp	r12, r19
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	d3 06       	cpc	r13, r19
    253e:	74 f0       	brlt	.+28     	; 0x255c <vfprintf+0x206>
    2540:	89 2d       	mov	r24, r9
    2542:	80 68       	ori	r24, 0x80	; 128
    2544:	98 2e       	mov	r9, r24
    2546:	0a c0       	rjmp	.+20     	; 0x255c <vfprintf+0x206>
    2548:	e2 e0       	ldi	r30, 0x02	; 2
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	ec 0f       	add	r30, r28
    254e:	fd 1f       	adc	r31, r29
    2550:	e1 0f       	add	r30, r17
    2552:	f1 1d       	adc	r31, r1
    2554:	80 81       	ld	r24, Z
    2556:	80 33       	cpi	r24, 0x30	; 48
    2558:	19 f4       	brne	.+6      	; 0x2560 <vfprintf+0x20a>
    255a:	11 50       	subi	r17, 0x01	; 1
    255c:	11 11       	cpse	r17, r1
    255e:	f4 cf       	rjmp	.-24     	; 0x2548 <vfprintf+0x1f2>
    2560:	97 fe       	sbrs	r9, 7
    2562:	0e c0       	rjmp	.+28     	; 0x2580 <vfprintf+0x22a>
    2564:	44 24       	eor	r4, r4
    2566:	43 94       	inc	r4
    2568:	41 0e       	add	r4, r17
    256a:	81 2f       	mov	r24, r17
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	c8 16       	cp	r12, r24
    2570:	d9 06       	cpc	r13, r25
    2572:	2c f4       	brge	.+10     	; 0x257e <vfprintf+0x228>
    2574:	1c 19       	sub	r17, r12
    2576:	04 c0       	rjmp	.+8      	; 0x2580 <vfprintf+0x22a>
    2578:	44 24       	eor	r4, r4
    257a:	43 94       	inc	r4
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <vfprintf+0x22a>
    257e:	10 e0       	ldi	r17, 0x00	; 0
    2580:	97 fe       	sbrs	r9, 7
    2582:	06 c0       	rjmp	.+12     	; 0x2590 <vfprintf+0x23a>
    2584:	1c 14       	cp	r1, r12
    2586:	1d 04       	cpc	r1, r13
    2588:	34 f4       	brge	.+12     	; 0x2596 <vfprintf+0x240>
    258a:	c6 01       	movw	r24, r12
    258c:	01 96       	adiw	r24, 0x01	; 1
    258e:	05 c0       	rjmp	.+10     	; 0x259a <vfprintf+0x244>
    2590:	85 e0       	ldi	r24, 0x05	; 5
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	02 c0       	rjmp	.+4      	; 0x259a <vfprintf+0x244>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	01 11       	cpse	r16, r1
    259c:	01 96       	adiw	r24, 0x01	; 1
    259e:	11 23       	and	r17, r17
    25a0:	31 f0       	breq	.+12     	; 0x25ae <vfprintf+0x258>
    25a2:	21 2f       	mov	r18, r17
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	2f 5f       	subi	r18, 0xFF	; 255
    25a8:	3f 4f       	sbci	r19, 0xFF	; 255
    25aa:	82 0f       	add	r24, r18
    25ac:	93 1f       	adc	r25, r19
    25ae:	25 2d       	mov	r18, r5
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	82 17       	cp	r24, r18
    25b4:	93 07       	cpc	r25, r19
    25b6:	14 f4       	brge	.+4      	; 0x25bc <vfprintf+0x266>
    25b8:	58 1a       	sub	r5, r24
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <vfprintf+0x268>
    25bc:	51 2c       	mov	r5, r1
    25be:	89 2d       	mov	r24, r9
    25c0:	89 70       	andi	r24, 0x09	; 9
    25c2:	49 f4       	brne	.+18     	; 0x25d6 <vfprintf+0x280>
    25c4:	55 20       	and	r5, r5
    25c6:	39 f0       	breq	.+14     	; 0x25d6 <vfprintf+0x280>
    25c8:	b7 01       	movw	r22, r14
    25ca:	80 e2       	ldi	r24, 0x20	; 32
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    25d2:	5a 94       	dec	r5
    25d4:	f7 cf       	rjmp	.-18     	; 0x25c4 <vfprintf+0x26e>
    25d6:	00 23       	and	r16, r16
    25d8:	29 f0       	breq	.+10     	; 0x25e4 <vfprintf+0x28e>
    25da:	b7 01       	movw	r22, r14
    25dc:	80 2f       	mov	r24, r16
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    25e4:	93 fc       	sbrc	r9, 3
    25e6:	09 c0       	rjmp	.+18     	; 0x25fa <vfprintf+0x2a4>
    25e8:	55 20       	and	r5, r5
    25ea:	39 f0       	breq	.+14     	; 0x25fa <vfprintf+0x2a4>
    25ec:	b7 01       	movw	r22, r14
    25ee:	80 e3       	ldi	r24, 0x30	; 48
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    25f6:	5a 94       	dec	r5
    25f8:	f7 cf       	rjmp	.-18     	; 0x25e8 <vfprintf+0x292>
    25fa:	97 fe       	sbrs	r9, 7
    25fc:	4c c0       	rjmp	.+152    	; 0x2696 <vfprintf+0x340>
    25fe:	46 01       	movw	r8, r12
    2600:	d7 fe       	sbrs	r13, 7
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <vfprintf+0x2b2>
    2604:	81 2c       	mov	r8, r1
    2606:	91 2c       	mov	r9, r1
    2608:	c6 01       	movw	r24, r12
    260a:	88 19       	sub	r24, r8
    260c:	99 09       	sbc	r25, r9
    260e:	f3 01       	movw	r30, r6
    2610:	e8 0f       	add	r30, r24
    2612:	f9 1f       	adc	r31, r25
    2614:	fe 87       	std	Y+14, r31	; 0x0e
    2616:	ed 87       	std	Y+13, r30	; 0x0d
    2618:	96 01       	movw	r18, r12
    261a:	24 19       	sub	r18, r4
    261c:	31 09       	sbc	r19, r1
    261e:	38 8b       	std	Y+16, r19	; 0x10
    2620:	2f 87       	std	Y+15, r18	; 0x0f
    2622:	01 2f       	mov	r16, r17
    2624:	10 e0       	ldi	r17, 0x00	; 0
    2626:	11 95       	neg	r17
    2628:	01 95       	neg	r16
    262a:	11 09       	sbc	r17, r1
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	83 16       	cp	r8, r19
    2630:	93 06       	cpc	r9, r19
    2632:	29 f4       	brne	.+10     	; 0x263e <vfprintf+0x2e8>
    2634:	b7 01       	movw	r22, r14
    2636:	8e e2       	ldi	r24, 0x2E	; 46
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    263e:	c8 14       	cp	r12, r8
    2640:	d9 04       	cpc	r13, r9
    2642:	4c f0       	brlt	.+18     	; 0x2656 <vfprintf+0x300>
    2644:	8f 85       	ldd	r24, Y+15	; 0x0f
    2646:	98 89       	ldd	r25, Y+16	; 0x10
    2648:	88 15       	cp	r24, r8
    264a:	99 05       	cpc	r25, r9
    264c:	24 f4       	brge	.+8      	; 0x2656 <vfprintf+0x300>
    264e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2650:	fe 85       	ldd	r31, Y+14	; 0x0e
    2652:	81 81       	ldd	r24, Z+1	; 0x01
    2654:	01 c0       	rjmp	.+2      	; 0x2658 <vfprintf+0x302>
    2656:	80 e3       	ldi	r24, 0x30	; 48
    2658:	f1 e0       	ldi	r31, 0x01	; 1
    265a:	8f 1a       	sub	r8, r31
    265c:	91 08       	sbc	r9, r1
    265e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2660:	3e 85       	ldd	r19, Y+14	; 0x0e
    2662:	2f 5f       	subi	r18, 0xFF	; 255
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	3e 87       	std	Y+14, r19	; 0x0e
    2668:	2d 87       	std	Y+13, r18	; 0x0d
    266a:	80 16       	cp	r8, r16
    266c:	91 06       	cpc	r9, r17
    266e:	2c f0       	brlt	.+10     	; 0x267a <vfprintf+0x324>
    2670:	b7 01       	movw	r22, r14
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    2678:	d9 cf       	rjmp	.-78     	; 0x262c <vfprintf+0x2d6>
    267a:	c8 14       	cp	r12, r8
    267c:	d9 04       	cpc	r13, r9
    267e:	41 f4       	brne	.+16     	; 0x2690 <vfprintf+0x33a>
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	96 33       	cpi	r25, 0x36	; 54
    2684:	20 f4       	brcc	.+8      	; 0x268e <vfprintf+0x338>
    2686:	95 33       	cpi	r25, 0x35	; 53
    2688:	19 f4       	brne	.+6      	; 0x2690 <vfprintf+0x33a>
    268a:	3c 85       	ldd	r19, Y+12	; 0x0c
    268c:	34 ff       	sbrs	r19, 4
    268e:	81 e3       	ldi	r24, 0x31	; 49
    2690:	b7 01       	movw	r22, r14
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	4e c0       	rjmp	.+156    	; 0x2732 <vfprintf+0x3dc>
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	81 33       	cpi	r24, 0x31	; 49
    269a:	19 f0       	breq	.+6      	; 0x26a2 <vfprintf+0x34c>
    269c:	9c 85       	ldd	r25, Y+12	; 0x0c
    269e:	9f 7e       	andi	r25, 0xEF	; 239
    26a0:	9c 87       	std	Y+12, r25	; 0x0c
    26a2:	b7 01       	movw	r22, r14
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    26aa:	11 11       	cpse	r17, r1
    26ac:	05 c0       	rjmp	.+10     	; 0x26b8 <vfprintf+0x362>
    26ae:	94 fc       	sbrc	r9, 4
    26b0:	18 c0       	rjmp	.+48     	; 0x26e2 <vfprintf+0x38c>
    26b2:	85 e6       	ldi	r24, 0x65	; 101
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	17 c0       	rjmp	.+46     	; 0x26e6 <vfprintf+0x390>
    26b8:	b7 01       	movw	r22, r14
    26ba:	8e e2       	ldi	r24, 0x2E	; 46
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    26c2:	1e 5f       	subi	r17, 0xFE	; 254
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	01 e0       	ldi	r16, 0x01	; 1
    26c8:	08 0f       	add	r16, r24
    26ca:	f3 01       	movw	r30, r6
    26cc:	e8 0f       	add	r30, r24
    26ce:	f1 1d       	adc	r31, r1
    26d0:	80 81       	ld	r24, Z
    26d2:	b7 01       	movw	r22, r14
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    26da:	80 2f       	mov	r24, r16
    26dc:	01 13       	cpse	r16, r17
    26de:	f3 cf       	rjmp	.-26     	; 0x26c6 <vfprintf+0x370>
    26e0:	e6 cf       	rjmp	.-52     	; 0x26ae <vfprintf+0x358>
    26e2:	85 e4       	ldi	r24, 0x45	; 69
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	b7 01       	movw	r22, r14
    26e8:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    26ec:	d7 fc       	sbrc	r13, 7
    26ee:	06 c0       	rjmp	.+12     	; 0x26fc <vfprintf+0x3a6>
    26f0:	c1 14       	cp	r12, r1
    26f2:	d1 04       	cpc	r13, r1
    26f4:	41 f4       	brne	.+16     	; 0x2706 <vfprintf+0x3b0>
    26f6:	ec 85       	ldd	r30, Y+12	; 0x0c
    26f8:	e4 ff       	sbrs	r30, 4
    26fa:	05 c0       	rjmp	.+10     	; 0x2706 <vfprintf+0x3b0>
    26fc:	d1 94       	neg	r13
    26fe:	c1 94       	neg	r12
    2700:	d1 08       	sbc	r13, r1
    2702:	8d e2       	ldi	r24, 0x2D	; 45
    2704:	01 c0       	rjmp	.+2      	; 0x2708 <vfprintf+0x3b2>
    2706:	8b e2       	ldi	r24, 0x2B	; 43
    2708:	b7 01       	movw	r22, r14
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    2710:	80 e3       	ldi	r24, 0x30	; 48
    2712:	2a e0       	ldi	r18, 0x0A	; 10
    2714:	c2 16       	cp	r12, r18
    2716:	d1 04       	cpc	r13, r1
    2718:	2c f0       	brlt	.+10     	; 0x2724 <vfprintf+0x3ce>
    271a:	8f 5f       	subi	r24, 0xFF	; 255
    271c:	fa e0       	ldi	r31, 0x0A	; 10
    271e:	cf 1a       	sub	r12, r31
    2720:	d1 08       	sbc	r13, r1
    2722:	f7 cf       	rjmp	.-18     	; 0x2712 <vfprintf+0x3bc>
    2724:	b7 01       	movw	r22, r14
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    272c:	b7 01       	movw	r22, r14
    272e:	c6 01       	movw	r24, r12
    2730:	c0 96       	adiw	r24, 0x30	; 48
    2732:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    2736:	54 c1       	rjmp	.+680    	; 0x29e0 <vfprintf+0x68a>
    2738:	83 36       	cpi	r24, 0x63	; 99
    273a:	31 f0       	breq	.+12     	; 0x2748 <vfprintf+0x3f2>
    273c:	83 37       	cpi	r24, 0x73	; 115
    273e:	79 f0       	breq	.+30     	; 0x275e <vfprintf+0x408>
    2740:	83 35       	cpi	r24, 0x53	; 83
    2742:	09 f0       	breq	.+2      	; 0x2746 <vfprintf+0x3f0>
    2744:	56 c0       	rjmp	.+172    	; 0x27f2 <vfprintf+0x49c>
    2746:	20 c0       	rjmp	.+64     	; 0x2788 <vfprintf+0x432>
    2748:	56 01       	movw	r10, r12
    274a:	32 e0       	ldi	r19, 0x02	; 2
    274c:	a3 0e       	add	r10, r19
    274e:	b1 1c       	adc	r11, r1
    2750:	f6 01       	movw	r30, r12
    2752:	80 81       	ld	r24, Z
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	01 e0       	ldi	r16, 0x01	; 1
    2758:	10 e0       	ldi	r17, 0x00	; 0
    275a:	63 01       	movw	r12, r6
    275c:	12 c0       	rjmp	.+36     	; 0x2782 <vfprintf+0x42c>
    275e:	56 01       	movw	r10, r12
    2760:	f2 e0       	ldi	r31, 0x02	; 2
    2762:	af 0e       	add	r10, r31
    2764:	b1 1c       	adc	r11, r1
    2766:	f6 01       	movw	r30, r12
    2768:	c0 80       	ld	r12, Z
    276a:	d1 80       	ldd	r13, Z+1	; 0x01
    276c:	96 fe       	sbrs	r9, 6
    276e:	03 c0       	rjmp	.+6      	; 0x2776 <vfprintf+0x420>
    2770:	61 2f       	mov	r22, r17
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	02 c0       	rjmp	.+4      	; 0x277a <vfprintf+0x424>
    2776:	6f ef       	ldi	r22, 0xFF	; 255
    2778:	7f ef       	ldi	r23, 0xFF	; 255
    277a:	c6 01       	movw	r24, r12
    277c:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <strnlen>
    2780:	8c 01       	movw	r16, r24
    2782:	f9 2d       	mov	r31, r9
    2784:	ff 77       	andi	r31, 0x7F	; 127
    2786:	14 c0       	rjmp	.+40     	; 0x27b0 <vfprintf+0x45a>
    2788:	56 01       	movw	r10, r12
    278a:	22 e0       	ldi	r18, 0x02	; 2
    278c:	a2 0e       	add	r10, r18
    278e:	b1 1c       	adc	r11, r1
    2790:	f6 01       	movw	r30, r12
    2792:	c0 80       	ld	r12, Z
    2794:	d1 80       	ldd	r13, Z+1	; 0x01
    2796:	96 fe       	sbrs	r9, 6
    2798:	03 c0       	rjmp	.+6      	; 0x27a0 <vfprintf+0x44a>
    279a:	61 2f       	mov	r22, r17
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <vfprintf+0x44e>
    27a0:	6f ef       	ldi	r22, 0xFF	; 255
    27a2:	7f ef       	ldi	r23, 0xFF	; 255
    27a4:	c6 01       	movw	r24, r12
    27a6:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <strnlen_P>
    27aa:	8c 01       	movw	r16, r24
    27ac:	f9 2d       	mov	r31, r9
    27ae:	f0 68       	ori	r31, 0x80	; 128
    27b0:	9f 2e       	mov	r9, r31
    27b2:	f3 fd       	sbrc	r31, 3
    27b4:	1a c0       	rjmp	.+52     	; 0x27ea <vfprintf+0x494>
    27b6:	85 2d       	mov	r24, r5
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	08 17       	cp	r16, r24
    27bc:	19 07       	cpc	r17, r25
    27be:	a8 f4       	brcc	.+42     	; 0x27ea <vfprintf+0x494>
    27c0:	b7 01       	movw	r22, r14
    27c2:	80 e2       	ldi	r24, 0x20	; 32
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    27ca:	5a 94       	dec	r5
    27cc:	f4 cf       	rjmp	.-24     	; 0x27b6 <vfprintf+0x460>
    27ce:	f6 01       	movw	r30, r12
    27d0:	97 fc       	sbrc	r9, 7
    27d2:	85 91       	lpm	r24, Z+
    27d4:	97 fe       	sbrs	r9, 7
    27d6:	81 91       	ld	r24, Z+
    27d8:	6f 01       	movw	r12, r30
    27da:	b7 01       	movw	r22, r14
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    27e2:	51 10       	cpse	r5, r1
    27e4:	5a 94       	dec	r5
    27e6:	01 50       	subi	r16, 0x01	; 1
    27e8:	11 09       	sbc	r17, r1
    27ea:	01 15       	cp	r16, r1
    27ec:	11 05       	cpc	r17, r1
    27ee:	79 f7       	brne	.-34     	; 0x27ce <vfprintf+0x478>
    27f0:	f7 c0       	rjmp	.+494    	; 0x29e0 <vfprintf+0x68a>
    27f2:	84 36       	cpi	r24, 0x64	; 100
    27f4:	11 f0       	breq	.+4      	; 0x27fa <vfprintf+0x4a4>
    27f6:	89 36       	cpi	r24, 0x69	; 105
    27f8:	61 f5       	brne	.+88     	; 0x2852 <vfprintf+0x4fc>
    27fa:	56 01       	movw	r10, r12
    27fc:	97 fe       	sbrs	r9, 7
    27fe:	09 c0       	rjmp	.+18     	; 0x2812 <vfprintf+0x4bc>
    2800:	24 e0       	ldi	r18, 0x04	; 4
    2802:	a2 0e       	add	r10, r18
    2804:	b1 1c       	adc	r11, r1
    2806:	f6 01       	movw	r30, r12
    2808:	60 81       	ld	r22, Z
    280a:	71 81       	ldd	r23, Z+1	; 0x01
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	93 81       	ldd	r25, Z+3	; 0x03
    2810:	0a c0       	rjmp	.+20     	; 0x2826 <vfprintf+0x4d0>
    2812:	f2 e0       	ldi	r31, 0x02	; 2
    2814:	af 0e       	add	r10, r31
    2816:	b1 1c       	adc	r11, r1
    2818:	f6 01       	movw	r30, r12
    281a:	60 81       	ld	r22, Z
    281c:	71 81       	ldd	r23, Z+1	; 0x01
    281e:	07 2e       	mov	r0, r23
    2820:	00 0c       	add	r0, r0
    2822:	88 0b       	sbc	r24, r24
    2824:	99 0b       	sbc	r25, r25
    2826:	f9 2d       	mov	r31, r9
    2828:	ff 76       	andi	r31, 0x6F	; 111
    282a:	9f 2e       	mov	r9, r31
    282c:	97 ff       	sbrs	r25, 7
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <vfprintf+0x4ec>
    2830:	90 95       	com	r25
    2832:	80 95       	com	r24
    2834:	70 95       	com	r23
    2836:	61 95       	neg	r22
    2838:	7f 4f       	sbci	r23, 0xFF	; 255
    283a:	8f 4f       	sbci	r24, 0xFF	; 255
    283c:	9f 4f       	sbci	r25, 0xFF	; 255
    283e:	f0 68       	ori	r31, 0x80	; 128
    2840:	9f 2e       	mov	r9, r31
    2842:	2a e0       	ldi	r18, 0x0A	; 10
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	a3 01       	movw	r20, r6
    2848:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ultoa_invert>
    284c:	c8 2e       	mov	r12, r24
    284e:	c6 18       	sub	r12, r6
    2850:	3f c0       	rjmp	.+126    	; 0x28d0 <vfprintf+0x57a>
    2852:	09 2d       	mov	r16, r9
    2854:	85 37       	cpi	r24, 0x75	; 117
    2856:	21 f4       	brne	.+8      	; 0x2860 <vfprintf+0x50a>
    2858:	0f 7e       	andi	r16, 0xEF	; 239
    285a:	2a e0       	ldi	r18, 0x0A	; 10
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	1d c0       	rjmp	.+58     	; 0x289a <vfprintf+0x544>
    2860:	09 7f       	andi	r16, 0xF9	; 249
    2862:	8f 36       	cpi	r24, 0x6F	; 111
    2864:	91 f0       	breq	.+36     	; 0x288a <vfprintf+0x534>
    2866:	18 f4       	brcc	.+6      	; 0x286e <vfprintf+0x518>
    2868:	88 35       	cpi	r24, 0x58	; 88
    286a:	59 f0       	breq	.+22     	; 0x2882 <vfprintf+0x52c>
    286c:	c3 c0       	rjmp	.+390    	; 0x29f4 <vfprintf+0x69e>
    286e:	80 37       	cpi	r24, 0x70	; 112
    2870:	19 f0       	breq	.+6      	; 0x2878 <vfprintf+0x522>
    2872:	88 37       	cpi	r24, 0x78	; 120
    2874:	11 f0       	breq	.+4      	; 0x287a <vfprintf+0x524>
    2876:	be c0       	rjmp	.+380    	; 0x29f4 <vfprintf+0x69e>
    2878:	00 61       	ori	r16, 0x10	; 16
    287a:	04 ff       	sbrs	r16, 4
    287c:	09 c0       	rjmp	.+18     	; 0x2890 <vfprintf+0x53a>
    287e:	04 60       	ori	r16, 0x04	; 4
    2880:	07 c0       	rjmp	.+14     	; 0x2890 <vfprintf+0x53a>
    2882:	94 fe       	sbrs	r9, 4
    2884:	08 c0       	rjmp	.+16     	; 0x2896 <vfprintf+0x540>
    2886:	06 60       	ori	r16, 0x06	; 6
    2888:	06 c0       	rjmp	.+12     	; 0x2896 <vfprintf+0x540>
    288a:	28 e0       	ldi	r18, 0x08	; 8
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	05 c0       	rjmp	.+10     	; 0x289a <vfprintf+0x544>
    2890:	20 e1       	ldi	r18, 0x10	; 16
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	02 c0       	rjmp	.+4      	; 0x289a <vfprintf+0x544>
    2896:	20 e1       	ldi	r18, 0x10	; 16
    2898:	32 e0       	ldi	r19, 0x02	; 2
    289a:	56 01       	movw	r10, r12
    289c:	07 ff       	sbrs	r16, 7
    289e:	09 c0       	rjmp	.+18     	; 0x28b2 <vfprintf+0x55c>
    28a0:	84 e0       	ldi	r24, 0x04	; 4
    28a2:	a8 0e       	add	r10, r24
    28a4:	b1 1c       	adc	r11, r1
    28a6:	f6 01       	movw	r30, r12
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	08 c0       	rjmp	.+16     	; 0x28c2 <vfprintf+0x56c>
    28b2:	f2 e0       	ldi	r31, 0x02	; 2
    28b4:	af 0e       	add	r10, r31
    28b6:	b1 1c       	adc	r11, r1
    28b8:	f6 01       	movw	r30, r12
    28ba:	60 81       	ld	r22, Z
    28bc:	71 81       	ldd	r23, Z+1	; 0x01
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	a3 01       	movw	r20, r6
    28c4:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__ultoa_invert>
    28c8:	c8 2e       	mov	r12, r24
    28ca:	c6 18       	sub	r12, r6
    28cc:	0f 77       	andi	r16, 0x7F	; 127
    28ce:	90 2e       	mov	r9, r16
    28d0:	96 fe       	sbrs	r9, 6
    28d2:	0b c0       	rjmp	.+22     	; 0x28ea <vfprintf+0x594>
    28d4:	09 2d       	mov	r16, r9
    28d6:	0e 7f       	andi	r16, 0xFE	; 254
    28d8:	c1 16       	cp	r12, r17
    28da:	50 f4       	brcc	.+20     	; 0x28f0 <vfprintf+0x59a>
    28dc:	94 fe       	sbrs	r9, 4
    28de:	0a c0       	rjmp	.+20     	; 0x28f4 <vfprintf+0x59e>
    28e0:	92 fc       	sbrc	r9, 2
    28e2:	08 c0       	rjmp	.+16     	; 0x28f4 <vfprintf+0x59e>
    28e4:	09 2d       	mov	r16, r9
    28e6:	0e 7e       	andi	r16, 0xEE	; 238
    28e8:	05 c0       	rjmp	.+10     	; 0x28f4 <vfprintf+0x59e>
    28ea:	dc 2c       	mov	r13, r12
    28ec:	09 2d       	mov	r16, r9
    28ee:	03 c0       	rjmp	.+6      	; 0x28f6 <vfprintf+0x5a0>
    28f0:	dc 2c       	mov	r13, r12
    28f2:	01 c0       	rjmp	.+2      	; 0x28f6 <vfprintf+0x5a0>
    28f4:	d1 2e       	mov	r13, r17
    28f6:	04 ff       	sbrs	r16, 4
    28f8:	0d c0       	rjmp	.+26     	; 0x2914 <vfprintf+0x5be>
    28fa:	fe 01       	movw	r30, r28
    28fc:	ec 0d       	add	r30, r12
    28fe:	f1 1d       	adc	r31, r1
    2900:	80 81       	ld	r24, Z
    2902:	80 33       	cpi	r24, 0x30	; 48
    2904:	11 f4       	brne	.+4      	; 0x290a <vfprintf+0x5b4>
    2906:	09 7e       	andi	r16, 0xE9	; 233
    2908:	09 c0       	rjmp	.+18     	; 0x291c <vfprintf+0x5c6>
    290a:	02 ff       	sbrs	r16, 2
    290c:	06 c0       	rjmp	.+12     	; 0x291a <vfprintf+0x5c4>
    290e:	d3 94       	inc	r13
    2910:	d3 94       	inc	r13
    2912:	04 c0       	rjmp	.+8      	; 0x291c <vfprintf+0x5c6>
    2914:	80 2f       	mov	r24, r16
    2916:	86 78       	andi	r24, 0x86	; 134
    2918:	09 f0       	breq	.+2      	; 0x291c <vfprintf+0x5c6>
    291a:	d3 94       	inc	r13
    291c:	03 fd       	sbrc	r16, 3
    291e:	11 c0       	rjmp	.+34     	; 0x2942 <vfprintf+0x5ec>
    2920:	00 ff       	sbrs	r16, 0
    2922:	06 c0       	rjmp	.+12     	; 0x2930 <vfprintf+0x5da>
    2924:	1c 2d       	mov	r17, r12
    2926:	d5 14       	cp	r13, r5
    2928:	80 f4       	brcc	.+32     	; 0x294a <vfprintf+0x5f4>
    292a:	15 0d       	add	r17, r5
    292c:	1d 19       	sub	r17, r13
    292e:	0d c0       	rjmp	.+26     	; 0x294a <vfprintf+0x5f4>
    2930:	d5 14       	cp	r13, r5
    2932:	58 f4       	brcc	.+22     	; 0x294a <vfprintf+0x5f4>
    2934:	b7 01       	movw	r22, r14
    2936:	80 e2       	ldi	r24, 0x20	; 32
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    293e:	d3 94       	inc	r13
    2940:	f7 cf       	rjmp	.-18     	; 0x2930 <vfprintf+0x5da>
    2942:	d5 14       	cp	r13, r5
    2944:	10 f4       	brcc	.+4      	; 0x294a <vfprintf+0x5f4>
    2946:	5d 18       	sub	r5, r13
    2948:	01 c0       	rjmp	.+2      	; 0x294c <vfprintf+0x5f6>
    294a:	51 2c       	mov	r5, r1
    294c:	04 ff       	sbrs	r16, 4
    294e:	10 c0       	rjmp	.+32     	; 0x2970 <vfprintf+0x61a>
    2950:	b7 01       	movw	r22, r14
    2952:	80 e3       	ldi	r24, 0x30	; 48
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    295a:	02 ff       	sbrs	r16, 2
    295c:	17 c0       	rjmp	.+46     	; 0x298c <vfprintf+0x636>
    295e:	01 fd       	sbrc	r16, 1
    2960:	03 c0       	rjmp	.+6      	; 0x2968 <vfprintf+0x612>
    2962:	88 e7       	ldi	r24, 0x78	; 120
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	02 c0       	rjmp	.+4      	; 0x296c <vfprintf+0x616>
    2968:	88 e5       	ldi	r24, 0x58	; 88
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	b7 01       	movw	r22, r14
    296e:	0c c0       	rjmp	.+24     	; 0x2988 <vfprintf+0x632>
    2970:	80 2f       	mov	r24, r16
    2972:	86 78       	andi	r24, 0x86	; 134
    2974:	59 f0       	breq	.+22     	; 0x298c <vfprintf+0x636>
    2976:	01 ff       	sbrs	r16, 1
    2978:	02 c0       	rjmp	.+4      	; 0x297e <vfprintf+0x628>
    297a:	8b e2       	ldi	r24, 0x2B	; 43
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <vfprintf+0x62a>
    297e:	80 e2       	ldi	r24, 0x20	; 32
    2980:	07 fd       	sbrc	r16, 7
    2982:	8d e2       	ldi	r24, 0x2D	; 45
    2984:	b7 01       	movw	r22, r14
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    298c:	c1 16       	cp	r12, r17
    298e:	38 f4       	brcc	.+14     	; 0x299e <vfprintf+0x648>
    2990:	b7 01       	movw	r22, r14
    2992:	80 e3       	ldi	r24, 0x30	; 48
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    299a:	11 50       	subi	r17, 0x01	; 1
    299c:	f7 cf       	rjmp	.-18     	; 0x298c <vfprintf+0x636>
    299e:	ca 94       	dec	r12
    29a0:	f3 01       	movw	r30, r6
    29a2:	ec 0d       	add	r30, r12
    29a4:	f1 1d       	adc	r31, r1
    29a6:	80 81       	ld	r24, Z
    29a8:	b7 01       	movw	r22, r14
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    29b0:	c1 10       	cpse	r12, r1
    29b2:	f5 cf       	rjmp	.-22     	; 0x299e <vfprintf+0x648>
    29b4:	15 c0       	rjmp	.+42     	; 0x29e0 <vfprintf+0x68a>
    29b6:	f4 e0       	ldi	r31, 0x04	; 4
    29b8:	f5 15       	cp	r31, r5
    29ba:	60 f5       	brcc	.+88     	; 0x2a14 <vfprintf+0x6be>
    29bc:	84 e0       	ldi	r24, 0x04	; 4
    29be:	58 1a       	sub	r5, r24
    29c0:	93 fe       	sbrs	r9, 3
    29c2:	1f c0       	rjmp	.+62     	; 0x2a02 <vfprintf+0x6ac>
    29c4:	01 11       	cpse	r16, r1
    29c6:	27 c0       	rjmp	.+78     	; 0x2a16 <vfprintf+0x6c0>
    29c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    29ca:	23 ff       	sbrs	r18, 3
    29cc:	2a c0       	rjmp	.+84     	; 0x2a22 <vfprintf+0x6cc>
    29ce:	08 e6       	ldi	r16, 0x68	; 104
    29d0:	10 e0       	ldi	r17, 0x00	; 0
    29d2:	39 2d       	mov	r19, r9
    29d4:	30 71       	andi	r19, 0x10	; 16
    29d6:	93 2e       	mov	r9, r19
    29d8:	f8 01       	movw	r30, r16
    29da:	84 91       	lpm	r24, Z
    29dc:	81 11       	cpse	r24, r1
    29de:	24 c0       	rjmp	.+72     	; 0x2a28 <vfprintf+0x6d2>
    29e0:	55 20       	and	r5, r5
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <vfprintf+0x690>
    29e4:	e4 cc       	rjmp	.-1592   	; 0x23ae <vfprintf+0x58>
    29e6:	b7 01       	movw	r22, r14
    29e8:	80 e2       	ldi	r24, 0x20	; 32
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    29f0:	5a 94       	dec	r5
    29f2:	f6 cf       	rjmp	.-20     	; 0x29e0 <vfprintf+0x68a>
    29f4:	f7 01       	movw	r30, r14
    29f6:	86 81       	ldd	r24, Z+6	; 0x06
    29f8:	97 81       	ldd	r25, Z+7	; 0x07
    29fa:	26 c0       	rjmp	.+76     	; 0x2a48 <vfprintf+0x6f2>
    29fc:	8f ef       	ldi	r24, 0xFF	; 255
    29fe:	9f ef       	ldi	r25, 0xFF	; 255
    2a00:	23 c0       	rjmp	.+70     	; 0x2a48 <vfprintf+0x6f2>
    2a02:	b7 01       	movw	r22, r14
    2a04:	80 e2       	ldi	r24, 0x20	; 32
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    2a0c:	5a 94       	dec	r5
    2a0e:	51 10       	cpse	r5, r1
    2a10:	f8 cf       	rjmp	.-16     	; 0x2a02 <vfprintf+0x6ac>
    2a12:	d8 cf       	rjmp	.-80     	; 0x29c4 <vfprintf+0x66e>
    2a14:	51 2c       	mov	r5, r1
    2a16:	b7 01       	movw	r22, r14
    2a18:	80 2f       	mov	r24, r16
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    2a20:	d3 cf       	rjmp	.-90     	; 0x29c8 <vfprintf+0x672>
    2a22:	0c e6       	ldi	r16, 0x6C	; 108
    2a24:	10 e0       	ldi	r17, 0x00	; 0
    2a26:	d5 cf       	rjmp	.-86     	; 0x29d2 <vfprintf+0x67c>
    2a28:	91 10       	cpse	r9, r1
    2a2a:	80 52       	subi	r24, 0x20	; 32
    2a2c:	b7 01       	movw	r22, r14
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	0e 94 65 16 	call	0x2cca	; 0x2cca <fputc>
    2a34:	0f 5f       	subi	r16, 0xFF	; 255
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	cf cf       	rjmp	.-98     	; 0x29d8 <vfprintf+0x682>
    2a3a:	23 e0       	ldi	r18, 0x03	; 3
    2a3c:	25 15       	cp	r18, r5
    2a3e:	10 f4       	brcc	.+4      	; 0x2a44 <vfprintf+0x6ee>
    2a40:	83 e0       	ldi	r24, 0x03	; 3
    2a42:	bd cf       	rjmp	.-134    	; 0x29be <vfprintf+0x668>
    2a44:	51 2c       	mov	r5, r1
    2a46:	c0 cf       	rjmp	.-128    	; 0x29c8 <vfprintf+0x672>
    2a48:	60 96       	adiw	r28, 0x10	; 16
    2a4a:	e2 e1       	ldi	r30, 0x12	; 18
    2a4c:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__epilogue_restores__>

00002a50 <__prologue_saves__>:
    2a50:	2f 92       	push	r2
    2a52:	3f 92       	push	r3
    2a54:	4f 92       	push	r4
    2a56:	5f 92       	push	r5
    2a58:	6f 92       	push	r6
    2a5a:	7f 92       	push	r7
    2a5c:	8f 92       	push	r8
    2a5e:	9f 92       	push	r9
    2a60:	af 92       	push	r10
    2a62:	bf 92       	push	r11
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	ca 1b       	sub	r28, r26
    2a7a:	db 0b       	sbc	r29, r27
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	09 94       	ijmp

00002a88 <__epilogue_restores__>:
    2a88:	2a 88       	ldd	r2, Y+18	; 0x12
    2a8a:	39 88       	ldd	r3, Y+17	; 0x11
    2a8c:	48 88       	ldd	r4, Y+16	; 0x10
    2a8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a90:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a92:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a94:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a96:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a98:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a9a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a9c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a9e:	df 80       	ldd	r13, Y+7	; 0x07
    2aa0:	ee 80       	ldd	r14, Y+6	; 0x06
    2aa2:	fd 80       	ldd	r15, Y+5	; 0x05
    2aa4:	0c 81       	ldd	r16, Y+4	; 0x04
    2aa6:	1b 81       	ldd	r17, Y+3	; 0x03
    2aa8:	aa 81       	ldd	r26, Y+2	; 0x02
    2aaa:	b9 81       	ldd	r27, Y+1	; 0x01
    2aac:	ce 0f       	add	r28, r30
    2aae:	d1 1d       	adc	r29, r1
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	ed 01       	movw	r28, r26
    2abc:	08 95       	ret

00002abe <__ftoa_engine>:
    2abe:	28 30       	cpi	r18, 0x08	; 8
    2ac0:	08 f0       	brcs	.+2      	; 0x2ac4 <__ftoa_engine+0x6>
    2ac2:	27 e0       	ldi	r18, 0x07	; 7
    2ac4:	33 27       	eor	r19, r19
    2ac6:	da 01       	movw	r26, r20
    2ac8:	99 0f       	add	r25, r25
    2aca:	31 1d       	adc	r19, r1
    2acc:	87 fd       	sbrc	r24, 7
    2ace:	91 60       	ori	r25, 0x01	; 1
    2ad0:	00 96       	adiw	r24, 0x00	; 0
    2ad2:	61 05       	cpc	r22, r1
    2ad4:	71 05       	cpc	r23, r1
    2ad6:	39 f4       	brne	.+14     	; 0x2ae6 <__ftoa_engine+0x28>
    2ad8:	32 60       	ori	r19, 0x02	; 2
    2ada:	2e 5f       	subi	r18, 0xFE	; 254
    2adc:	3d 93       	st	X+, r19
    2ade:	30 e3       	ldi	r19, 0x30	; 48
    2ae0:	2a 95       	dec	r18
    2ae2:	e1 f7       	brne	.-8      	; 0x2adc <__ftoa_engine+0x1e>
    2ae4:	08 95       	ret
    2ae6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ae8:	30 f0       	brcs	.+12     	; 0x2af6 <__ftoa_engine+0x38>
    2aea:	80 38       	cpi	r24, 0x80	; 128
    2aec:	71 05       	cpc	r23, r1
    2aee:	61 05       	cpc	r22, r1
    2af0:	09 f0       	breq	.+2      	; 0x2af4 <__ftoa_engine+0x36>
    2af2:	3c 5f       	subi	r19, 0xFC	; 252
    2af4:	3c 5f       	subi	r19, 0xFC	; 252
    2af6:	3d 93       	st	X+, r19
    2af8:	91 30       	cpi	r25, 0x01	; 1
    2afa:	08 f0       	brcs	.+2      	; 0x2afe <__ftoa_engine+0x40>
    2afc:	80 68       	ori	r24, 0x80	; 128
    2afe:	91 1d       	adc	r25, r1
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	1f 93       	push	r17
    2b06:	0f 93       	push	r16
    2b08:	ff 92       	push	r15
    2b0a:	ef 92       	push	r14
    2b0c:	19 2f       	mov	r17, r25
    2b0e:	98 7f       	andi	r25, 0xF8	; 248
    2b10:	96 95       	lsr	r25
    2b12:	e9 2f       	mov	r30, r25
    2b14:	96 95       	lsr	r25
    2b16:	96 95       	lsr	r25
    2b18:	e9 0f       	add	r30, r25
    2b1a:	ff 27       	eor	r31, r31
    2b1c:	e6 53       	subi	r30, 0x36	; 54
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	99 27       	eor	r25, r25
    2b22:	33 27       	eor	r19, r19
    2b24:	ee 24       	eor	r14, r14
    2b26:	ff 24       	eor	r15, r15
    2b28:	a7 01       	movw	r20, r14
    2b2a:	e7 01       	movw	r28, r14
    2b2c:	05 90       	lpm	r0, Z+
    2b2e:	08 94       	sec
    2b30:	07 94       	ror	r0
    2b32:	28 f4       	brcc	.+10     	; 0x2b3e <__ftoa_engine+0x80>
    2b34:	36 0f       	add	r19, r22
    2b36:	e7 1e       	adc	r14, r23
    2b38:	f8 1e       	adc	r15, r24
    2b3a:	49 1f       	adc	r20, r25
    2b3c:	51 1d       	adc	r21, r1
    2b3e:	66 0f       	add	r22, r22
    2b40:	77 1f       	adc	r23, r23
    2b42:	88 1f       	adc	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	06 94       	lsr	r0
    2b48:	a1 f7       	brne	.-24     	; 0x2b32 <__ftoa_engine+0x74>
    2b4a:	05 90       	lpm	r0, Z+
    2b4c:	07 94       	ror	r0
    2b4e:	28 f4       	brcc	.+10     	; 0x2b5a <__ftoa_engine+0x9c>
    2b50:	e7 0e       	add	r14, r23
    2b52:	f8 1e       	adc	r15, r24
    2b54:	49 1f       	adc	r20, r25
    2b56:	56 1f       	adc	r21, r22
    2b58:	c1 1d       	adc	r28, r1
    2b5a:	77 0f       	add	r23, r23
    2b5c:	88 1f       	adc	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	66 1f       	adc	r22, r22
    2b62:	06 94       	lsr	r0
    2b64:	a1 f7       	brne	.-24     	; 0x2b4e <__ftoa_engine+0x90>
    2b66:	05 90       	lpm	r0, Z+
    2b68:	07 94       	ror	r0
    2b6a:	28 f4       	brcc	.+10     	; 0x2b76 <__ftoa_engine+0xb8>
    2b6c:	f8 0e       	add	r15, r24
    2b6e:	49 1f       	adc	r20, r25
    2b70:	56 1f       	adc	r21, r22
    2b72:	c7 1f       	adc	r28, r23
    2b74:	d1 1d       	adc	r29, r1
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	66 1f       	adc	r22, r22
    2b7c:	77 1f       	adc	r23, r23
    2b7e:	06 94       	lsr	r0
    2b80:	a1 f7       	brne	.-24     	; 0x2b6a <__ftoa_engine+0xac>
    2b82:	05 90       	lpm	r0, Z+
    2b84:	07 94       	ror	r0
    2b86:	20 f4       	brcc	.+8      	; 0x2b90 <__ftoa_engine+0xd2>
    2b88:	49 0f       	add	r20, r25
    2b8a:	56 1f       	adc	r21, r22
    2b8c:	c7 1f       	adc	r28, r23
    2b8e:	d8 1f       	adc	r29, r24
    2b90:	99 0f       	add	r25, r25
    2b92:	66 1f       	adc	r22, r22
    2b94:	77 1f       	adc	r23, r23
    2b96:	88 1f       	adc	r24, r24
    2b98:	06 94       	lsr	r0
    2b9a:	a9 f7       	brne	.-22     	; 0x2b86 <__ftoa_engine+0xc8>
    2b9c:	84 91       	lpm	r24, Z
    2b9e:	10 95       	com	r17
    2ba0:	17 70       	andi	r17, 0x07	; 7
    2ba2:	41 f0       	breq	.+16     	; 0x2bb4 <__ftoa_engine+0xf6>
    2ba4:	d6 95       	lsr	r29
    2ba6:	c7 95       	ror	r28
    2ba8:	57 95       	ror	r21
    2baa:	47 95       	ror	r20
    2bac:	f7 94       	ror	r15
    2bae:	e7 94       	ror	r14
    2bb0:	1a 95       	dec	r17
    2bb2:	c1 f7       	brne	.-16     	; 0x2ba4 <__ftoa_engine+0xe6>
    2bb4:	e0 e7       	ldi	r30, 0x70	; 112
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	68 94       	set
    2bba:	15 90       	lpm	r1, Z+
    2bbc:	15 91       	lpm	r17, Z+
    2bbe:	35 91       	lpm	r19, Z+
    2bc0:	65 91       	lpm	r22, Z+
    2bc2:	95 91       	lpm	r25, Z+
    2bc4:	05 90       	lpm	r0, Z+
    2bc6:	7f e2       	ldi	r23, 0x2F	; 47
    2bc8:	73 95       	inc	r23
    2bca:	e1 18       	sub	r14, r1
    2bcc:	f1 0a       	sbc	r15, r17
    2bce:	43 0b       	sbc	r20, r19
    2bd0:	56 0b       	sbc	r21, r22
    2bd2:	c9 0b       	sbc	r28, r25
    2bd4:	d0 09       	sbc	r29, r0
    2bd6:	c0 f7       	brcc	.-16     	; 0x2bc8 <__ftoa_engine+0x10a>
    2bd8:	e1 0c       	add	r14, r1
    2bda:	f1 1e       	adc	r15, r17
    2bdc:	43 1f       	adc	r20, r19
    2bde:	56 1f       	adc	r21, r22
    2be0:	c9 1f       	adc	r28, r25
    2be2:	d0 1d       	adc	r29, r0
    2be4:	7e f4       	brtc	.+30     	; 0x2c04 <__ftoa_engine+0x146>
    2be6:	70 33       	cpi	r23, 0x30	; 48
    2be8:	11 f4       	brne	.+4      	; 0x2bee <__ftoa_engine+0x130>
    2bea:	8a 95       	dec	r24
    2bec:	e6 cf       	rjmp	.-52     	; 0x2bba <__ftoa_engine+0xfc>
    2bee:	e8 94       	clt
    2bf0:	01 50       	subi	r16, 0x01	; 1
    2bf2:	30 f0       	brcs	.+12     	; 0x2c00 <__ftoa_engine+0x142>
    2bf4:	08 0f       	add	r16, r24
    2bf6:	0a f4       	brpl	.+2      	; 0x2bfa <__ftoa_engine+0x13c>
    2bf8:	00 27       	eor	r16, r16
    2bfa:	02 17       	cp	r16, r18
    2bfc:	08 f4       	brcc	.+2      	; 0x2c00 <__ftoa_engine+0x142>
    2bfe:	20 2f       	mov	r18, r16
    2c00:	23 95       	inc	r18
    2c02:	02 2f       	mov	r16, r18
    2c04:	7a 33       	cpi	r23, 0x3A	; 58
    2c06:	28 f0       	brcs	.+10     	; 0x2c12 <__ftoa_engine+0x154>
    2c08:	79 e3       	ldi	r23, 0x39	; 57
    2c0a:	7d 93       	st	X+, r23
    2c0c:	2a 95       	dec	r18
    2c0e:	e9 f7       	brne	.-6      	; 0x2c0a <__ftoa_engine+0x14c>
    2c10:	10 c0       	rjmp	.+32     	; 0x2c32 <__ftoa_engine+0x174>
    2c12:	7d 93       	st	X+, r23
    2c14:	2a 95       	dec	r18
    2c16:	89 f6       	brne	.-94     	; 0x2bba <__ftoa_engine+0xfc>
    2c18:	06 94       	lsr	r0
    2c1a:	97 95       	ror	r25
    2c1c:	67 95       	ror	r22
    2c1e:	37 95       	ror	r19
    2c20:	17 95       	ror	r17
    2c22:	17 94       	ror	r1
    2c24:	e1 18       	sub	r14, r1
    2c26:	f1 0a       	sbc	r15, r17
    2c28:	43 0b       	sbc	r20, r19
    2c2a:	56 0b       	sbc	r21, r22
    2c2c:	c9 0b       	sbc	r28, r25
    2c2e:	d0 09       	sbc	r29, r0
    2c30:	98 f0       	brcs	.+38     	; 0x2c58 <__ftoa_engine+0x19a>
    2c32:	23 95       	inc	r18
    2c34:	7e 91       	ld	r23, -X
    2c36:	73 95       	inc	r23
    2c38:	7a 33       	cpi	r23, 0x3A	; 58
    2c3a:	08 f0       	brcs	.+2      	; 0x2c3e <__ftoa_engine+0x180>
    2c3c:	70 e3       	ldi	r23, 0x30	; 48
    2c3e:	7c 93       	st	X, r23
    2c40:	20 13       	cpse	r18, r16
    2c42:	b8 f7       	brcc	.-18     	; 0x2c32 <__ftoa_engine+0x174>
    2c44:	7e 91       	ld	r23, -X
    2c46:	70 61       	ori	r23, 0x10	; 16
    2c48:	7d 93       	st	X+, r23
    2c4a:	30 f0       	brcs	.+12     	; 0x2c58 <__ftoa_engine+0x19a>
    2c4c:	83 95       	inc	r24
    2c4e:	71 e3       	ldi	r23, 0x31	; 49
    2c50:	7d 93       	st	X+, r23
    2c52:	70 e3       	ldi	r23, 0x30	; 48
    2c54:	2a 95       	dec	r18
    2c56:	e1 f7       	brne	.-8      	; 0x2c50 <__ftoa_engine+0x192>
    2c58:	11 24       	eor	r1, r1
    2c5a:	ef 90       	pop	r14
    2c5c:	ff 90       	pop	r15
    2c5e:	0f 91       	pop	r16
    2c60:	1f 91       	pop	r17
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	99 27       	eor	r25, r25
    2c68:	87 fd       	sbrc	r24, 7
    2c6a:	90 95       	com	r25
    2c6c:	08 95       	ret

00002c6e <strnlen_P>:
    2c6e:	fc 01       	movw	r30, r24
    2c70:	05 90       	lpm	r0, Z+
    2c72:	61 50       	subi	r22, 0x01	; 1
    2c74:	70 40       	sbci	r23, 0x00	; 0
    2c76:	01 10       	cpse	r0, r1
    2c78:	d8 f7       	brcc	.-10     	; 0x2c70 <strnlen_P+0x2>
    2c7a:	80 95       	com	r24
    2c7c:	90 95       	com	r25
    2c7e:	8e 0f       	add	r24, r30
    2c80:	9f 1f       	adc	r25, r31
    2c82:	08 95       	ret

00002c84 <memcpy>:
    2c84:	fb 01       	movw	r30, r22
    2c86:	dc 01       	movw	r26, r24
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <memcpy+0xa>
    2c8a:	01 90       	ld	r0, Z+
    2c8c:	0d 92       	st	X+, r0
    2c8e:	41 50       	subi	r20, 0x01	; 1
    2c90:	50 40       	sbci	r21, 0x00	; 0
    2c92:	d8 f7       	brcc	.-10     	; 0x2c8a <memcpy+0x6>
    2c94:	08 95       	ret

00002c96 <strncpy>:
    2c96:	fb 01       	movw	r30, r22
    2c98:	dc 01       	movw	r26, r24
    2c9a:	41 50       	subi	r20, 0x01	; 1
    2c9c:	50 40       	sbci	r21, 0x00	; 0
    2c9e:	48 f0       	brcs	.+18     	; 0x2cb2 <strncpy+0x1c>
    2ca0:	01 90       	ld	r0, Z+
    2ca2:	0d 92       	st	X+, r0
    2ca4:	00 20       	and	r0, r0
    2ca6:	c9 f7       	brne	.-14     	; 0x2c9a <strncpy+0x4>
    2ca8:	01 c0       	rjmp	.+2      	; 0x2cac <strncpy+0x16>
    2caa:	1d 92       	st	X+, r1
    2cac:	41 50       	subi	r20, 0x01	; 1
    2cae:	50 40       	sbci	r21, 0x00	; 0
    2cb0:	e0 f7       	brcc	.-8      	; 0x2caa <strncpy+0x14>
    2cb2:	08 95       	ret

00002cb4 <strnlen>:
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	61 50       	subi	r22, 0x01	; 1
    2cb8:	70 40       	sbci	r23, 0x00	; 0
    2cba:	01 90       	ld	r0, Z+
    2cbc:	01 10       	cpse	r0, r1
    2cbe:	d8 f7       	brcc	.-10     	; 0x2cb6 <strnlen+0x2>
    2cc0:	80 95       	com	r24
    2cc2:	90 95       	com	r25
    2cc4:	8e 0f       	add	r24, r30
    2cc6:	9f 1f       	adc	r25, r31
    2cc8:	08 95       	ret

00002cca <fputc>:
    2cca:	0f 93       	push	r16
    2ccc:	1f 93       	push	r17
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	fb 01       	movw	r30, r22
    2cd4:	23 81       	ldd	r18, Z+3	; 0x03
    2cd6:	21 fd       	sbrc	r18, 1
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <fputc+0x16>
    2cda:	8f ef       	ldi	r24, 0xFF	; 255
    2cdc:	9f ef       	ldi	r25, 0xFF	; 255
    2cde:	2c c0       	rjmp	.+88     	; 0x2d38 <fputc+0x6e>
    2ce0:	22 ff       	sbrs	r18, 2
    2ce2:	16 c0       	rjmp	.+44     	; 0x2d10 <fputc+0x46>
    2ce4:	46 81       	ldd	r20, Z+6	; 0x06
    2ce6:	57 81       	ldd	r21, Z+7	; 0x07
    2ce8:	24 81       	ldd	r18, Z+4	; 0x04
    2cea:	35 81       	ldd	r19, Z+5	; 0x05
    2cec:	42 17       	cp	r20, r18
    2cee:	53 07       	cpc	r21, r19
    2cf0:	44 f4       	brge	.+16     	; 0x2d02 <fputc+0x38>
    2cf2:	a0 81       	ld	r26, Z
    2cf4:	b1 81       	ldd	r27, Z+1	; 0x01
    2cf6:	9d 01       	movw	r18, r26
    2cf8:	2f 5f       	subi	r18, 0xFF	; 255
    2cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfc:	31 83       	std	Z+1, r19	; 0x01
    2cfe:	20 83       	st	Z, r18
    2d00:	8c 93       	st	X, r24
    2d02:	26 81       	ldd	r18, Z+6	; 0x06
    2d04:	37 81       	ldd	r19, Z+7	; 0x07
    2d06:	2f 5f       	subi	r18, 0xFF	; 255
    2d08:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0a:	37 83       	std	Z+7, r19	; 0x07
    2d0c:	26 83       	std	Z+6, r18	; 0x06
    2d0e:	14 c0       	rjmp	.+40     	; 0x2d38 <fputc+0x6e>
    2d10:	8b 01       	movw	r16, r22
    2d12:	ec 01       	movw	r28, r24
    2d14:	fb 01       	movw	r30, r22
    2d16:	00 84       	ldd	r0, Z+8	; 0x08
    2d18:	f1 85       	ldd	r31, Z+9	; 0x09
    2d1a:	e0 2d       	mov	r30, r0
    2d1c:	09 95       	icall
    2d1e:	89 2b       	or	r24, r25
    2d20:	e1 f6       	brne	.-72     	; 0x2cda <fputc+0x10>
    2d22:	d8 01       	movw	r26, r16
    2d24:	16 96       	adiw	r26, 0x06	; 6
    2d26:	8d 91       	ld	r24, X+
    2d28:	9c 91       	ld	r25, X
    2d2a:	17 97       	sbiw	r26, 0x07	; 7
    2d2c:	01 96       	adiw	r24, 0x01	; 1
    2d2e:	17 96       	adiw	r26, 0x07	; 7
    2d30:	9c 93       	st	X, r25
    2d32:	8e 93       	st	-X, r24
    2d34:	16 97       	sbiw	r26, 0x06	; 6
    2d36:	ce 01       	movw	r24, r28
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	08 95       	ret

00002d42 <sprintf>:
    2d42:	ae e0       	ldi	r26, 0x0E	; 14
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e7 ea       	ldi	r30, 0xA7	; 167
    2d48:	f6 e1       	ldi	r31, 0x16	; 22
    2d4a:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x1c>
    2d4e:	0d 89       	ldd	r16, Y+21	; 0x15
    2d50:	1e 89       	ldd	r17, Y+22	; 0x16
    2d52:	86 e0       	ldi	r24, 0x06	; 6
    2d54:	8c 83       	std	Y+4, r24	; 0x04
    2d56:	1a 83       	std	Y+2, r17	; 0x02
    2d58:	09 83       	std	Y+1, r16	; 0x01
    2d5a:	8f ef       	ldi	r24, 0xFF	; 255
    2d5c:	9f e7       	ldi	r25, 0x7F	; 127
    2d5e:	9e 83       	std	Y+6, r25	; 0x06
    2d60:	8d 83       	std	Y+5, r24	; 0x05
    2d62:	ae 01       	movw	r20, r28
    2d64:	47 5e       	subi	r20, 0xE7	; 231
    2d66:	5f 4f       	sbci	r21, 0xFF	; 255
    2d68:	6f 89       	ldd	r22, Y+23	; 0x17
    2d6a:	78 8d       	ldd	r23, Y+24	; 0x18
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	01 96       	adiw	r24, 0x01	; 1
    2d70:	0e 94 ab 11 	call	0x2356	; 0x2356 <vfprintf>
    2d74:	ef 81       	ldd	r30, Y+7	; 0x07
    2d76:	f8 85       	ldd	r31, Y+8	; 0x08
    2d78:	e0 0f       	add	r30, r16
    2d7a:	f1 1f       	adc	r31, r17
    2d7c:	10 82       	st	Z, r1
    2d7e:	2e 96       	adiw	r28, 0x0e	; 14
    2d80:	e4 e0       	ldi	r30, 0x04	; 4
    2d82:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x1c>

00002d86 <__ultoa_invert>:
    2d86:	fa 01       	movw	r30, r20
    2d88:	aa 27       	eor	r26, r26
    2d8a:	28 30       	cpi	r18, 0x08	; 8
    2d8c:	51 f1       	breq	.+84     	; 0x2de2 <__ultoa_invert+0x5c>
    2d8e:	20 31       	cpi	r18, 0x10	; 16
    2d90:	81 f1       	breq	.+96     	; 0x2df2 <__ultoa_invert+0x6c>
    2d92:	e8 94       	clt
    2d94:	6f 93       	push	r22
    2d96:	6e 7f       	andi	r22, 0xFE	; 254
    2d98:	6e 5f       	subi	r22, 0xFE	; 254
    2d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2da0:	af 4f       	sbci	r26, 0xFF	; 255
    2da2:	b1 e0       	ldi	r27, 0x01	; 1
    2da4:	3e d0       	rcall	.+124    	; 0x2e22 <__ultoa_invert+0x9c>
    2da6:	b4 e0       	ldi	r27, 0x04	; 4
    2da8:	3c d0       	rcall	.+120    	; 0x2e22 <__ultoa_invert+0x9c>
    2daa:	67 0f       	add	r22, r23
    2dac:	78 1f       	adc	r23, r24
    2dae:	89 1f       	adc	r24, r25
    2db0:	9a 1f       	adc	r25, r26
    2db2:	a1 1d       	adc	r26, r1
    2db4:	68 0f       	add	r22, r24
    2db6:	79 1f       	adc	r23, r25
    2db8:	8a 1f       	adc	r24, r26
    2dba:	91 1d       	adc	r25, r1
    2dbc:	a1 1d       	adc	r26, r1
    2dbe:	6a 0f       	add	r22, r26
    2dc0:	71 1d       	adc	r23, r1
    2dc2:	81 1d       	adc	r24, r1
    2dc4:	91 1d       	adc	r25, r1
    2dc6:	a1 1d       	adc	r26, r1
    2dc8:	20 d0       	rcall	.+64     	; 0x2e0a <__ultoa_invert+0x84>
    2dca:	09 f4       	brne	.+2      	; 0x2dce <__ultoa_invert+0x48>
    2dcc:	68 94       	set
    2dce:	3f 91       	pop	r19
    2dd0:	2a e0       	ldi	r18, 0x0A	; 10
    2dd2:	26 9f       	mul	r18, r22
    2dd4:	11 24       	eor	r1, r1
    2dd6:	30 19       	sub	r19, r0
    2dd8:	30 5d       	subi	r19, 0xD0	; 208
    2dda:	31 93       	st	Z+, r19
    2ddc:	de f6       	brtc	.-74     	; 0x2d94 <__ultoa_invert+0xe>
    2dde:	cf 01       	movw	r24, r30
    2de0:	08 95       	ret
    2de2:	46 2f       	mov	r20, r22
    2de4:	47 70       	andi	r20, 0x07	; 7
    2de6:	40 5d       	subi	r20, 0xD0	; 208
    2de8:	41 93       	st	Z+, r20
    2dea:	b3 e0       	ldi	r27, 0x03	; 3
    2dec:	0f d0       	rcall	.+30     	; 0x2e0c <__ultoa_invert+0x86>
    2dee:	c9 f7       	brne	.-14     	; 0x2de2 <__ultoa_invert+0x5c>
    2df0:	f6 cf       	rjmp	.-20     	; 0x2dde <__ultoa_invert+0x58>
    2df2:	46 2f       	mov	r20, r22
    2df4:	4f 70       	andi	r20, 0x0F	; 15
    2df6:	40 5d       	subi	r20, 0xD0	; 208
    2df8:	4a 33       	cpi	r20, 0x3A	; 58
    2dfa:	18 f0       	brcs	.+6      	; 0x2e02 <__ultoa_invert+0x7c>
    2dfc:	49 5d       	subi	r20, 0xD9	; 217
    2dfe:	31 fd       	sbrc	r19, 1
    2e00:	40 52       	subi	r20, 0x20	; 32
    2e02:	41 93       	st	Z+, r20
    2e04:	02 d0       	rcall	.+4      	; 0x2e0a <__ultoa_invert+0x84>
    2e06:	a9 f7       	brne	.-22     	; 0x2df2 <__ultoa_invert+0x6c>
    2e08:	ea cf       	rjmp	.-44     	; 0x2dde <__ultoa_invert+0x58>
    2e0a:	b4 e0       	ldi	r27, 0x04	; 4
    2e0c:	a6 95       	lsr	r26
    2e0e:	97 95       	ror	r25
    2e10:	87 95       	ror	r24
    2e12:	77 95       	ror	r23
    2e14:	67 95       	ror	r22
    2e16:	ba 95       	dec	r27
    2e18:	c9 f7       	brne	.-14     	; 0x2e0c <__ultoa_invert+0x86>
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	61 05       	cpc	r22, r1
    2e1e:	71 05       	cpc	r23, r1
    2e20:	08 95       	ret
    2e22:	9b 01       	movw	r18, r22
    2e24:	ac 01       	movw	r20, r24
    2e26:	0a 2e       	mov	r0, r26
    2e28:	06 94       	lsr	r0
    2e2a:	57 95       	ror	r21
    2e2c:	47 95       	ror	r20
    2e2e:	37 95       	ror	r19
    2e30:	27 95       	ror	r18
    2e32:	ba 95       	dec	r27
    2e34:	c9 f7       	brne	.-14     	; 0x2e28 <__ultoa_invert+0xa2>
    2e36:	62 0f       	add	r22, r18
    2e38:	73 1f       	adc	r23, r19
    2e3a:	84 1f       	adc	r24, r20
    2e3c:	95 1f       	adc	r25, r21
    2e3e:	a0 1d       	adc	r26, r0
    2e40:	08 95       	ret

00002e42 <_exit>:
    2e42:	f8 94       	cli

00002e44 <__stop_program>:
    2e44:	ff cf       	rjmp	.-2      	; 0x2e44 <__stop_program>
